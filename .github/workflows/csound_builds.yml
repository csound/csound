name: csound_builds

env:
  VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,readwrite"
  CSOUND_VERSION: 7.0.0

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - develop

jobs:
  linux_build:
    name: Linux/Ubuntu build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: true

      - name: Bootstrap VCPKG
        run: ./vcpkg/bootstrap-vcpkg.sh

      - name: Setup NuGet credentials
        shell: bash
        run: >
          mono `./vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "https://nuget.pkg.github.com/csound/index.json"
          -storepasswordincleartext
          -name "GitHub"
          -username "csound"
          -password "${{ secrets.GITHUB_TOKEN }}"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install cmake libasound2-dev libjack-dev libpulse-dev ladspa-sdk dssi-dev

      - name: Configure Build
        run: cmake -B build -S . -DUSE_VCPKG=1 -DUSE_MP3=0 -DBUILD_STATIC_LIBRARY=1 -DCUSTOM_CMAKE="./platform/linux/custom.cmake"

      - name: Build Csound
        run: cmake --build build --config Release

      - name: Run integration and unit tests
        run: cmake --build build --target test csdtests

  macos_build:
    name: MacOS build
    runs-on: macos-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Install Dependencies
        run: brew install cmake bison flex swig asio libsndfile portaudio portmidi libsamplerate liblo jack openjdk gettext googletest
      - name: Configure build
        run: export PATH="/usr/local/opt/bison/bin:$PATH" && export PATH="/usr/local/opt/flex/bin:$PATH" && bison --version && mkdir build && cd build && cmake .. -DCMAKE_VERBOSE_MAKEFILE=1 -DBUILD_STATIC_LIBRARY=1
      - name: Build Csound
        run: cd build && make
      - name: Run Tests
        run: cd build && make test csdtests

  #  android_build:
  #    name: Android build
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: run the Docker image
  #        run: docker run --name csound_test_run -i sjamble/csound_android
  #      - name: copying build out of container
  #        run: docker cp csound_test_run:/csound/Android/csound-android-7.0.0.zip .
  #      - uses: actions/upload-artifact@v2
  #        with:
  #         name: csound-android-7.0.0.zip
  #          path: .

  windows_build:
    name: Windows build
    runs-on: windows-2022
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: true

      - name: Install system dependencies
        run: |
          choco install -y winflexbison3 innosetup

      - name: Bootstrap VCPKG
        run: .\vcpkg\bootstrap-vcpkg.bat

      - name: Setup NuGet Credentials
        shell: bash
        run: >
          `./vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "https://nuget.pkg.github.com/csound/index.json"
          -storepasswordincleartext
          -name "GitHub"
          -username "csound"
          -password "${{ secrets.GITHUB_TOKEN }}"

      - name: Configure build
        run: cmake -B build -S . -DUSE_VCPKG=1 -DCUSTOM_CMAKE="./platform/windows/Custom-vs.cmake"

      - name: Build Csound
        run: cmake --build build --config Release

      - name: Run tests
        run: cmake --build build --target csdtests

      - name: Run unit test framework
        run: cmake --build build --target RUN_TESTS --config Release

      - name: Acquire Csound manual
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "https://github.com/csound/manual/releases/download/6.18.0/Csound6.18.0_manual_html.zip" -OutFile "./manual.zip"
          7z x manual.zip

      - name: Build installer
        shell: powershell
        run: |
          $Env:RedistVersion=Get-Content "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\Microsoft.VCRedistVersion.default.txt"
          $Env:VCREDIST_CRT_DIR="C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC\${Env:RedistVersion}\x64\Microsoft.VC143.CRT"
          $Env:VCREDIST_CXXAMP_DIR="C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC\${Env:RedistVersion}\x64\Microsoft.VC143.CXXAMP"
          $Env:VCREDIST_OPENMP_DIR="C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC\${Env:RedistVersion}\x64\Microsoft.VC143.OpenMP"
          iscc /o. installer\\windows\\csound6_x64_github.iss

      - name: Upload installer
        uses: actions/upload-artifact@v2
        with:
          name: Csound_x64-${{env.CSOUND_VERSION}}.${{github.run_number}}-windows-x64-installer
          path: ./csound-windows_x86_64-*.exe
          if-no-files-found: error

      - name: Upload zip
        uses: actions/upload-artifact@v2
        with:
          name: csound-${{env.CSOUND_VERSION}}-${{github.run_number}}-windows-x64-binaries
          path: |
            ./build/Release/*.exe
            ./build/Release/*.dll
            ./build/Release/*.pyd
            ./build/Release/csound64.lib
            ./build/*.jar
            ./build/*.py
            ./include/
          if-no-files-found: error
