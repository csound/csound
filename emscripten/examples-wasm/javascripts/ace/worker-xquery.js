"no use strict";
;(function(window) {
if (typeof window.window != "undefined" && window.document) {
    return;
}

window.console = function() {
    var msgs = Array.prototype.slice.call(arguments, 0);
    postMessage({type: "log", data: msgs});
};
window.console.error =
window.console.warn = 
window.console.log =
window.console.trace = window.console;

window.window = window;
window.ace = window;

window.onerror = function(message, file, line, col, err) {
    postMessage({type: "error", data: {
        message: message,
        file: file,
        line: line, 
        col: col,
        stack: err.stack
    }});
};

window.normalizeModule = function(parentId, moduleName) {
    // normalize plugin requires
    if (moduleName.indexOf("!") !== -1) {
        var chunks = moduleName.split("!");
        return window.normalizeModule(parentId, chunks[0]) + "!" + window.normalizeModule(parentId, chunks[1]);
    }
    // normalize relative requires
    if (moduleName.charAt(0) == ".") {
        var base = parentId.split("/").slice(0, -1).join("/");
        moduleName = (base ? base + "/" : "") + moduleName;
        
        while(moduleName.indexOf(".") !== -1 && previous != moduleName) {
            var previous = moduleName;
            moduleName = moduleName.replace(/^\.\//, "").replace(/\/\.\//, "/").replace(/[^\/]+\/\.\.\//, "");
        }
    }
    
    return moduleName;
};

window.require = function(parentId, id) {
    if (!id) {
        id = parentId;
        parentId = null;
    }
    if (!id.charAt)
        throw new Error("worker.js require() accepts only (parentId, id) as arguments");

    id = window.normalizeModule(parentId, id);

    var module = window.require.modules[id];
    if (module) {
        if (!module.initialized) {
            module.initialized = true;
            module.exports = module.factory().exports;
        }
        return module.exports;
    }
    
    var chunks = id.split("/");
    if (!window.require.tlns)
        return console.log("unable to load " + id);
    chunks[0] = window.require.tlns[chunks[0]] || chunks[0];
    var path = chunks.join("/") + ".js";
    
    window.require.id = id;
    importScripts(path);
    return window.require(parentId, id);
};
window.require.modules = {};
window.require.tlns = {};

window.define = function(id, deps, factory) {
    if (arguments.length == 2) {
        factory = deps;
        if (typeof id != "string") {
            deps = id;
            id = window.require.id;
        }
    } else if (arguments.length == 1) {
        factory = id;
        deps = [];
        id = window.require.id;
    }
    
    if (typeof factory != "function") {
        window.require.modules[id] = {
            exports: factory,
            initialized: true
        };
        return;
    }

    if (!deps.length)
        // If there is no dependencies, we inject 'require', 'exports' and
        // 'module' as dependencies, to provide CommonJS compatibility.
        deps = ['require', 'exports', 'module'];

    var req = function(childId) {
        return window.require(id, childId);
    };

    window.require.modules[id] = {
        exports: {},
        factory: function() {
            var module = this;
            var returnExports = factory.apply(this, deps.map(function(dep) {
              switch(dep) {
                  // Because 'require', 'exports' and 'module' aren't actual
                  // dependencies, we must handle them seperately.
                  case 'require': return req;
                  case 'exports': return module.exports;
                  case 'module':  return module;
                  // But for all other dependencies, we can just go ahead and
                  // require them.
                  default:        return req(dep);
              }
            }));
            if (returnExports)
                module.exports = returnExports;
            return module;
        }
    };
};
window.define.amd = {};

window.initBaseUrls  = function initBaseUrls(topLevelNamespaces) {
    require.tlns = topLevelNamespaces;
};

window.initSender = function initSender() {

    var EventEmitter = window.require("ace/lib/event_emitter").EventEmitter;
    var oop = window.require("ace/lib/oop");
    
    var Sender = function() {};
    
    (function() {
        
        oop.implement(this, EventEmitter);
                
        this.callback = function(data, callbackId) {
            postMessage({
                type: "call",
                id: callbackId,
                data: data
            });
        };
    
        this.emit = function(name, data) {
            postMessage({
                type: "event",
                name: name,
                data: data
            });
        };
        
    }).call(Sender.prototype);
    
    return new Sender();
};

var main = window.main = null;
var sender = window.sender = null;

window.onmessage = function(e) {
    var msg = e.data;
    if (msg.command) {
        if (main[msg.command])
            main[msg.command].apply(main, msg.args);
        else
            throw new Error("Unknown command:" + msg.command);
    }
    else if (msg.init) {        
        initBaseUrls(msg.tlns);
        require("ace/lib/es5-shim");
        sender = window.sender = initSender();
        var clazz = require(msg.module)[msg.classname];
        main = window.main = new clazz(sender);
    } 
    else if (msg.event && sender) {
        sender._signal(msg.event, msg.data);
    }
};
})(this);

define("ace/lib/oop",["require","exports","module"], function(require, exports, module) {
"use strict";

exports.inherits = function(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
};

exports.mixin = function(obj, mixin) {
    for (var key in mixin) {
        obj[key] = mixin[key];
    }
    return obj;
};

exports.implement = function(proto, mixin) {
    exports.mixin(proto, mixin);
};

});

define("ace/lib/event_emitter",["require","exports","module"], function(require, exports, module) {
"use strict";

var EventEmitter = {};
var stopPropagation = function() { this.propagationStopped = true; };
var preventDefault = function() { this.defaultPrevented = true; };

EventEmitter._emit =
EventEmitter._dispatchEvent = function(eventName, e) {
    this._eventRegistry || (this._eventRegistry = {});
    this._defaultHandlers || (this._defaultHandlers = {});

    var listeners = this._eventRegistry[eventName] || [];
    var defaultHandler = this._defaultHandlers[eventName];
    if (!listeners.length && !defaultHandler)
        return;

    if (typeof e != "object" || !e)
        e = {};

    if (!e.type)
        e.type = eventName;
    if (!e.stopPropagation)
        e.stopPropagation = stopPropagation;
    if (!e.preventDefault)
        e.preventDefault = preventDefault;

    listeners = listeners.slice();
    for (var i=0; i<listeners.length; i++) {
        listeners[i](e, this);
        if (e.propagationStopped)
            break;
    }
    
    if (defaultHandler && !e.defaultPrevented)
        return defaultHandler(e, this);
};


EventEmitter._signal = function(eventName, e) {
    var listeners = (this._eventRegistry || {})[eventName];
    if (!listeners)
        return;
    listeners = listeners.slice();
    for (var i=0; i<listeners.length; i++)
        listeners[i](e, this);
};

EventEmitter.once = function(eventName, callback) {
    var _self = this;
    callback && this.addEventListener(eventName, function newCallback() {
        _self.removeEventListener(eventName, newCallback);
        callback.apply(null, arguments);
    });
};


EventEmitter.setDefaultHandler = function(eventName, callback) {
    var handlers = this._defaultHandlers
    if (!handlers)
        handlers = this._defaultHandlers = {_disabled_: {}};
    
    if (handlers[eventName]) {
        var old = handlers[eventName];
        var disabled = handlers._disabled_[eventName];
        if (!disabled)
            handlers._disabled_[eventName] = disabled = [];
        disabled.push(old);
        var i = disabled.indexOf(callback);
        if (i != -1) 
            disabled.splice(i, 1);
    }
    handlers[eventName] = callback;
};
EventEmitter.removeDefaultHandler = function(eventName, callback) {
    var handlers = this._defaultHandlers
    if (!handlers)
        return;
    var disabled = handlers._disabled_[eventName];
    
    if (handlers[eventName] == callback) {
        var old = handlers[eventName];
        if (disabled)
            this.setDefaultHandler(eventName, disabled.pop());
    } else if (disabled) {
        var i = disabled.indexOf(callback);
        if (i != -1)
            disabled.splice(i, 1);
    }
};

EventEmitter.on =
EventEmitter.addEventListener = function(eventName, callback, capturing) {
    this._eventRegistry = this._eventRegistry || {};

    var listeners = this._eventRegistry[eventName];
    if (!listeners)
        listeners = this._eventRegistry[eventName] = [];

    if (listeners.indexOf(callback) == -1)
        listeners[capturing ? "unshift" : "push"](callback);
    return callback;
};

EventEmitter.off =
EventEmitter.removeListener =
EventEmitter.removeEventListener = function(eventName, callback) {
    this._eventRegistry = this._eventRegistry || {};

    var listeners = this._eventRegistry[eventName];
    if (!listeners)
        return;

    var index = listeners.indexOf(callback);
    if (index !== -1)
        listeners.splice(index, 1);
};

EventEmitter.removeAllListeners = function(eventName) {
    if (this._eventRegistry) this._eventRegistry[eventName] = [];
};

exports.EventEmitter = EventEmitter;

});

define("ace/range",["require","exports","module"], function(require, exports, module) {
"use strict";
var comparePoints = function(p1, p2) {
    return p1.row - p2.row || p1.column - p2.column;
};
var Range = function(startRow, startColumn, endRow, endColumn) {
    this.start = {
        row: startRow,
        column: startColumn
    };

    this.end = {
        row: endRow,
        column: endColumn
    };
};

(function() {
    this.isEqual = function(range) {
        return this.start.row === range.start.row &&
            this.end.row === range.end.row &&
            this.start.column === range.start.column &&
            this.end.column === range.end.column;
    };
    this.toString = function() {
        return ("Range: [" + this.start.row + "/" + this.start.column +
            "] -> [" + this.end.row + "/" + this.end.column + "]");
    };

    this.contains = function(row, column) {
        return this.compare(row, column) == 0;
    };
    this.compareRange = function(range) {
        var cmp,
            end = range.end,
            start = range.start;

        cmp = this.compare(end.row, end.column);
        if (cmp == 1) {
            cmp = this.compare(start.row, start.column);
            if (cmp == 1) {
                return 2;
            } else if (cmp == 0) {
                return 1;
            } else {
                return 0;
            }
        } else if (cmp == -1) {
            return -2;
        } else {
            cmp = this.compare(start.row, start.column);
            if (cmp == -1) {
                return -1;
            } else if (cmp == 1) {
                return 42;
            } else {
                return 0;
            }
        }
    };
    this.comparePoint = function(p) {
        return this.compare(p.row, p.column);
    };
    this.containsRange = function(range) {
        return this.comparePoint(range.start) == 0 && this.comparePoint(range.end) == 0;
    };
    this.intersects = function(range) {
        var cmp = this.compareRange(range);
        return (cmp == -1 || cmp == 0 || cmp == 1);
    };
    this.isEnd = function(row, column) {
        return this.end.row == row && this.end.column == column;
    };
    this.isStart = function(row, column) {
        return this.start.row == row && this.start.column == column;
    };
    this.setStart = function(row, column) {
        if (typeof row == "object") {
            this.start.column = row.column;
            this.start.row = row.row;
        } else {
            this.start.row = row;
            this.start.column = column;
        }
    };
    this.setEnd = function(row, column) {
        if (typeof row == "object") {
            this.end.column = row.column;
            this.end.row = row.row;
        } else {
            this.end.row = row;
            this.end.column = column;
        }
    };
    this.inside = function(row, column) {
        if (this.compare(row, column) == 0) {
            if (this.isEnd(row, column) || this.isStart(row, column)) {
                return false;
            } else {
                return true;
            }
        }
        return false;
    };
    this.insideStart = function(row, column) {
        if (this.compare(row, column) == 0) {
            if (this.isEnd(row, column)) {
                return false;
            } else {
                return true;
            }
        }
        return false;
    };
    this.insideEnd = function(row, column) {
        if (this.compare(row, column) == 0) {
            if (this.isStart(row, column)) {
                return false;
            } else {
                return true;
            }
        }
        return false;
    };
    this.compare = function(row, column) {
        if (!this.isMultiLine()) {
            if (row === this.start.row) {
                return column < this.start.column ? -1 : (column > this.end.column ? 1 : 0);
            };
        }

        if (row < this.start.row)
            return -1;

        if (row > this.end.row)
            return 1;

        if (this.start.row === row)
            return column >= this.start.column ? 0 : -1;

        if (this.end.row === row)
            return column <= this.end.column ? 0 : 1;

        return 0;
    };
    this.compareStart = function(row, column) {
        if (this.start.row == row && this.start.column == column) {
            return -1;
        } else {
            return this.compare(row, column);
        }
    };
    this.compareEnd = function(row, column) {
        if (this.end.row == row && this.end.column == column) {
            return 1;
        } else {
            return this.compare(row, column);
        }
    };
    this.compareInside = function(row, column) {
        if (this.end.row == row && this.end.column == column) {
            return 1;
        } else if (this.start.row == row && this.start.column == column) {
            return -1;
        } else {
            return this.compare(row, column);
        }
    };
    this.clipRows = function(firstRow, lastRow) {
        if (this.end.row > lastRow)
            var end = {row: lastRow + 1, column: 0};
        else if (this.end.row < firstRow)
            var end = {row: firstRow, column: 0};

        if (this.start.row > lastRow)
            var start = {row: lastRow + 1, column: 0};
        else if (this.start.row < firstRow)
            var start = {row: firstRow, column: 0};

        return Range.fromPoints(start || this.start, end || this.end);
    };
    this.extend = function(row, column) {
        var cmp = this.compare(row, column);

        if (cmp == 0)
            return this;
        else if (cmp == -1)
            var start = {row: row, column: column};
        else
            var end = {row: row, column: column};

        return Range.fromPoints(start || this.start, end || this.end);
    };

    this.isEmpty = function() {
        return (this.start.row === this.end.row && this.start.column === this.end.column);
    };
    this.isMultiLine = function() {
        return (this.start.row !== this.end.row);
    };
    this.clone = function() {
        return Range.fromPoints(this.start, this.end);
    };
    this.collapseRows = function() {
        if (this.end.column == 0)
            return new Range(this.start.row, 0, Math.max(this.start.row, this.end.row-1), 0)
        else
            return new Range(this.start.row, 0, this.end.row, 0)
    };
    this.toScreenRange = function(session) {
        var screenPosStart = session.documentToScreenPosition(this.start);
        var screenPosEnd = session.documentToScreenPosition(this.end);

        return new Range(
            screenPosStart.row, screenPosStart.column,
            screenPosEnd.row, screenPosEnd.column
        );
    };
    this.moveBy = function(row, column) {
        this.start.row += row;
        this.start.column += column;
        this.end.row += row;
        this.end.column += column;
    };

}).call(Range.prototype);
Range.fromPoints = function(start, end) {
    return new Range(start.row, start.column, end.row, end.column);
};
Range.comparePoints = comparePoints;

Range.comparePoints = function(p1, p2) {
    return p1.row - p2.row || p1.column - p2.column;
};


exports.Range = Range;
});

define("ace/anchor",["require","exports","module","ace/lib/oop","ace/lib/event_emitter"], function(require, exports, module) {
"use strict";

var oop = require("./lib/oop");
var EventEmitter = require("./lib/event_emitter").EventEmitter;

var Anchor = exports.Anchor = function(doc, row, column) {
    this.$onChange = this.onChange.bind(this);
    this.attach(doc);
    
    if (typeof column == "undefined")
        this.setPosition(row.row, row.column);
    else
        this.setPosition(row, column);
};

(function() {

    oop.implement(this, EventEmitter);
    this.getPosition = function() {
        return this.$clipPositionToDocument(this.row, this.column);
    };
    this.getDocument = function() {
        return this.document;
    };
    this.$insertRight = false;
    this.onChange = function(e) {
        var delta = e.data;
        var range = delta.range;

        if (range.start.row == range.end.row && range.start.row != this.row)
            return;

        if (range.start.row > this.row)
            return;

        if (range.start.row == this.row && range.start.column > this.column)
            return;

        var row = this.row;
        var column = this.column;
        var start = range.start;
        var end = range.end;

        if (delta.action === "insertText") {
            if (start.row === row && start.column <= column) {
                if (start.column === column && this.$insertRight) {
                } else if (start.row === end.row) {
                    column += end.column - start.column;
                } else {
                    column -= start.column;
                    row += end.row - start.row;
                }
            } else if (start.row !== end.row && start.row < row) {
                row += end.row - start.row;
            }
        } else if (delta.action === "insertLines") {
            if (start.row === row && column === 0 && this.$insertRight) {
            }
            else if (start.row <= row) {
                row += end.row - start.row;
            }
        } else if (delta.action === "removeText") {
            if (start.row === row && start.column < column) {
                if (end.column >= column)
                    column = start.column;
                else
                    column = Math.max(0, column - (end.column - start.column));

            } else if (start.row !== end.row && start.row < row) {
                if (end.row === row)
                    column = Math.max(0, column - end.column) + start.column;
                row -= (end.row - start.row);
            } else if (end.row === row) {
                row -= end.row - start.row;
                column = Math.max(0, column - end.column) + start.column;
            }
        } else if (delta.action == "removeLines") {
            if (start.row <= row) {
                if (end.row <= row)
                    row -= end.row - start.row;
                else {
                    row = start.row;
                    column = 0;
                }
            }
        }

        this.setPosition(row, column, true);
    };
    this.setPosition = function(row, column, noClip) {
        var pos;
        if (noClip) {
            pos = {
                row: row,
                column: column
            };
        } else {
            pos = this.$clipPositionToDocument(row, column);
        }

        if (this.row == pos.row && this.column == pos.column)
            return;

        var old = {
            row: this.row,
            column: this.column
        };

        this.row = pos.row;
        this.column = pos.column;
        this._signal("change", {
            old: old,
            value: pos
        });
    };
    this.detach = function() {
        this.document.removeEventListener("change", this.$onChange);
    };
    this.attach = function(doc) {
        this.document = doc || this.document;
        this.document.on("change", this.$onChange);
    };
    this.$clipPositionToDocument = function(row, column) {
        var pos = {};

        if (row >= this.document.getLength()) {
            pos.row = Math.max(0, this.document.getLength() - 1);
            pos.column = this.document.getLine(pos.row).length;
        }
        else if (row < 0) {
            pos.row = 0;
            pos.column = 0;
        }
        else {
            pos.row = row;
            pos.column = Math.min(this.document.getLine(pos.row).length, Math.max(0, column));
        }

        if (column < 0)
            pos.column = 0;

        return pos;
    };

}).call(Anchor.prototype);

});

define("ace/document",["require","exports","module","ace/lib/oop","ace/lib/event_emitter","ace/range","ace/anchor"], function(require, exports, module) {
"use strict";

var oop = require("./lib/oop");
var EventEmitter = require("./lib/event_emitter").EventEmitter;
var Range = require("./range").Range;
var Anchor = require("./anchor").Anchor;

var Document = function(text) {
    this.$lines = [];
    if (text.length === 0) {
        this.$lines = [""];
    } else if (Array.isArray(text)) {
        this._insertLines(0, text);
    } else {
        this.insert({row: 0, column:0}, text);
    }
};

(function() {

    oop.implement(this, EventEmitter);
    this.setValue = function(text) {
        var len = this.getLength();
        this.remove(new Range(0, 0, len, this.getLine(len-1).length));
        this.insert({row: 0, column:0}, text);
    };
    this.getValue = function() {
        return this.getAllLines().join(this.getNewLineCharacter());
    };
    this.createAnchor = function(row, column) {
        return new Anchor(this, row, column);
    };
    if ("aaa".split(/a/).length === 0)
        this.$split = function(text) {
            return text.replace(/\r\n|\r/g, "\n").split("\n");
        };
    else
        this.$split = function(text) {
            return text.split(/\r\n|\r|\n/);
        };


    this.$detectNewLine = function(text) {
        var match = text.match(/^.*?(\r\n|\r|\n)/m);
        this.$autoNewLine = match ? match[1] : "\n";
        this._signal("changeNewLineMode");
    };
    this.getNewLineCharacter = function() {
        switch (this.$newLineMode) {
          case "windows":
            return "\r\n";
          case "unix":
            return "\n";
          default:
            return this.$autoNewLine || "\n";
        }
    };

    this.$autoNewLine = "";
    this.$newLineMode = "auto";
    this.setNewLineMode = function(newLineMode) {
        if (this.$newLineMode === newLineMode)
            return;

        this.$newLineMode = newLineMode;
        this._signal("changeNewLineMode");
    };
    this.getNewLineMode = function() {
        return this.$newLineMode;
    };
    this.isNewLine = function(text) {
        return (text == "\r\n" || text == "\r" || text == "\n");
    };
    this.getLine = function(row) {
        return this.$lines[row] || "";
    };
    this.getLines = function(firstRow, lastRow) {
        return this.$lines.slice(firstRow, lastRow + 1);
    };
    this.getAllLines = function() {
        return this.getLines(0, this.getLength());
    };
    this.getLength = function() {
        return this.$lines.length;
    };
    this.getTextRange = function(range) {
        if (range.start.row == range.end.row) {
            return this.getLine(range.start.row)
                .substring(range.start.column, range.end.column);
        }
        var lines = this.getLines(range.start.row, range.end.row);
        lines[0] = (lines[0] || "").substring(range.start.column);
        var l = lines.length - 1;
        if (range.end.row - range.start.row == l)
            lines[l] = lines[l].substring(0, range.end.column);
        return lines.join(this.getNewLineCharacter());
    };

    this.$clipPosition = function(position) {
        var length = this.getLength();
        if (position.row >= length) {
            position.row = Math.max(0, length - 1);
            position.column = this.getLine(length-1).length;
        } else if (position.row < 0)
            position.row = 0;
        return position;
    };
    this.insert = function(position, text) {
        if (!text || text.length === 0)
            return position;

        position = this.$clipPosition(position);
        if (this.getLength() <= 1)
            this.$detectNewLine(text);

        var lines = this.$split(text);
        var firstLine = lines.splice(0, 1)[0];
        var lastLine = lines.length == 0 ? null : lines.splice(lines.length - 1, 1)[0];

        position = this.insertInLine(position, firstLine);
        if (lastLine !== null) {
            position = this.insertNewLine(position); // terminate first line
            position = this._insertLines(position.row, lines);
            position = this.insertInLine(position, lastLine || "");
        }
        return position;
    };
    this.insertLines = function(row, lines) {
        if (row >= this.getLength())
            return this.insert({row: row, column: 0}, "\n" + lines.join("\n"));
        return this._insertLines(Math.max(row, 0), lines);
    };
    this._insertLines = function(row, lines) {
        if (lines.length == 0)
            return {row: row, column: 0};
        while (lines.length > 0xF000) {
            var end = this._insertLines(row, lines.slice(0, 0xF000));
            lines = lines.slice(0xF000);
            row = end.row;
        }

        var args = [row, 0];
        args.push.apply(args, lines);
        this.$lines.splice.apply(this.$lines, args);

        var range = new Range(row, 0, row + lines.length, 0);
        var delta = {
            action: "insertLines",
            range: range,
            lines: lines
        };
        this._signal("change", { data: delta });
        return range.end;
    };
    this.insertNewLine = function(position) {
        position = this.$clipPosition(position);
        var line = this.$lines[position.row] || "";

        this.$lines[position.row] = line.substring(0, position.column);
        this.$lines.splice(position.row + 1, 0, line.substring(position.column, line.length));

        var end = {
            row : position.row + 1,
            column : 0
        };

        var delta = {
            action: "insertText",
            range: Range.fromPoints(position, end),
            text: this.getNewLineCharacter()
        };
        this._signal("change", { data: delta });

        return end;
    };
    this.insertInLine = function(position, text) {
        if (text.length == 0)
            return position;

        var line = this.$lines[position.row] || "";

        this.$lines[position.row] = line.substring(0, position.column) + text
                + line.substring(position.column);

        var end = {
            row : position.row,
            column : position.column + text.length
        };

        var delta = {
            action: "insertText",
            range: Range.fromPoints(position, end),
            text: text
        };
        this._signal("change", { data: delta });

        return end;
    };
    this.remove = function(range) {
        if (!(range instanceof Range))
            range = Range.fromPoints(range.start, range.end);
        range.start = this.$clipPosition(range.start);
        range.end = this.$clipPosition(range.end);

        if (range.isEmpty())
            return range.start;

        var firstRow = range.start.row;
        var lastRow = range.end.row;

        if (range.isMultiLine()) {
            var firstFullRow = range.start.column == 0 ? firstRow : firstRow + 1;
            var lastFullRow = lastRow - 1;

            if (range.end.column > 0)
                this.removeInLine(lastRow, 0, range.end.column);

            if (lastFullRow >= firstFullRow)
                this._removeLines(firstFullRow, lastFullRow);

            if (firstFullRow != firstRow) {
                this.removeInLine(firstRow, range.start.column, this.getLine(firstRow).length);
                this.removeNewLine(range.start.row);
            }
        }
        else {
            this.removeInLine(firstRow, range.start.column, range.end.column);
        }
        return range.start;
    };
    this.removeInLine = function(row, startColumn, endColumn) {
        if (startColumn == endColumn)
            return;

        var range = new Range(row, startColumn, row, endColumn);
        var line = this.getLine(row);
        var removed = line.substring(startColumn, endColumn);
        var newLine = line.substring(0, startColumn) + line.substring(endColumn, line.length);
        this.$lines.splice(row, 1, newLine);

        var delta = {
            action: "removeText",
            range: range,
            text: removed
        };
        this._signal("change", { data: delta });
        return range.start;
    };
    this.removeLines = function(firstRow, lastRow) {
        if (firstRow < 0 || lastRow >= this.getLength())
            return this.remove(new Range(firstRow, 0, lastRow + 1, 0));
        return this._removeLines(firstRow, lastRow);
    };

    this._removeLines = function(firstRow, lastRow) {
        var range = new Range(firstRow, 0, lastRow + 1, 0);
        var removed = this.$lines.splice(firstRow, lastRow - firstRow + 1);

        var delta = {
            action: "removeLines",
            range: range,
            nl: this.getNewLineCharacter(),
            lines: removed
        };
        this._signal("change", { data: delta });
        return removed;
    };
    this.removeNewLine = function(row) {
        var firstLine = this.getLine(row);
        var secondLine = this.getLine(row+1);

        var range = new Range(row, firstLine.length, row+1, 0);
        var line = firstLine + secondLine;

        this.$lines.splice(row, 2, line);

        var delta = {
            action: "removeText",
            range: range,
            text: this.getNewLineCharacter()
        };
        this._signal("change", { data: delta });
    };
    this.replace = function(range, text) {
        if (!(range instanceof Range))
            range = Range.fromPoints(range.start, range.end);
        if (text.length == 0 && range.isEmpty())
            return range.start;
        if (text == this.getTextRange(range))
            return range.end;

        this.remove(range);
        if (text) {
            var end = this.insert(range.start, text);
        }
        else {
            end = range.start;
        }

        return end;
    };
    this.applyDeltas = function(deltas) {
        for (var i=0; i<deltas.length; i++) {
            var delta = deltas[i];
            var range = Range.fromPoints(delta.range.start, delta.range.end);

            if (delta.action == "insertLines")
                this.insertLines(range.start.row, delta.lines);
            else if (delta.action == "insertText")
                this.insert(range.start, delta.text);
            else if (delta.action == "removeLines")
                this._removeLines(range.start.row, range.end.row - 1);
            else if (delta.action == "removeText")
                this.remove(range);
        }
    };
    this.revertDeltas = function(deltas) {
        for (var i=deltas.length-1; i>=0; i--) {
            var delta = deltas[i];

            var range = Range.fromPoints(delta.range.start, delta.range.end);

            if (delta.action == "insertLines")
                this._removeLines(range.start.row, range.end.row - 1);
            else if (delta.action == "insertText")
                this.remove(range);
            else if (delta.action == "removeLines")
                this._insertLines(range.start.row, delta.lines);
            else if (delta.action == "removeText")
                this.insert(range.start, delta.text);
        }
    };
    this.indexToPosition = function(index, startRow) {
        var lines = this.$lines || this.getAllLines();
        var newlineLength = this.getNewLineCharacter().length;
        for (var i = startRow || 0, l = lines.length; i < l; i++) {
            index -= lines[i].length + newlineLength;
            if (index < 0)
                return {row: i, column: index + lines[i].length + newlineLength};
        }
        return {row: l-1, column: lines[l-1].length};
    };
    this.positionToIndex = function(pos, startRow) {
        var lines = this.$lines || this.getAllLines();
        var newlineLength = this.getNewLineCharacter().length;
        var index = 0;
        var row = Math.min(pos.row, lines.length);
        for (var i = startRow || 0; i < row; ++i)
            index += lines[i].length + newlineLength;

        return index + pos.column;
    };

}).call(Document.prototype);

exports.Document = Document;
});

define("ace/lib/lang",["require","exports","module"], function(require, exports, module) {
"use strict";

exports.last = function(a) {
    return a[a.length - 1];
};

exports.stringReverse = function(string) {
    return string.split("").reverse().join("");
};

exports.stringRepeat = function (string, count) {
    var result = '';
    while (count > 0) {
        if (count & 1)
            result += string;

        if (count >>= 1)
            string += string;
    }
    return result;
};

var trimBeginRegexp = /^\s\s*/;
var trimEndRegexp = /\s\s*$/;

exports.stringTrimLeft = function (string) {
    return string.replace(trimBeginRegexp, '');
};

exports.stringTrimRight = function (string) {
    return string.replace(trimEndRegexp, '');
};

exports.copyObject = function(obj) {
    var copy = {};
    for (var key in obj) {
        copy[key] = obj[key];
    }
    return copy;
};

exports.copyArray = function(array){
    var copy = [];
    for (var i=0, l=array.length; i<l; i++) {
        if (array[i] && typeof array[i] == "object")
            copy[i] = this.copyObject( array[i] );
        else 
            copy[i] = array[i];
    }
    return copy;
};

exports.deepCopy = function (obj) {
    if (typeof obj !== "object" || !obj)
        return obj;
    var cons = obj.constructor;
    if (cons === RegExp)
        return obj;
    
    var copy = cons();
    for (var key in obj) {
        if (typeof obj[key] === "object") {
            copy[key] = exports.deepCopy(obj[key]);
        } else {
            copy[key] = obj[key];
        }
    }
    return copy;
};

exports.arrayToMap = function(arr) {
    var map = {};
    for (var i=0; i<arr.length; i++) {
        map[arr[i]] = 1;
    }
    return map;

};

exports.createMap = function(props) {
    var map = Object.create(null);
    for (var i in props) {
        map[i] = props[i];
    }
    return map;
};
exports.arrayRemove = function(array, value) {
  for (var i = 0; i <= array.length; i++) {
    if (value === array[i]) {
      array.splice(i, 1);
    }
  }
};

exports.escapeRegExp = function(str) {
    return str.replace(/([.*+?^${}()|[\]\/\\])/g, '\\$1');
};

exports.escapeHTML = function(str) {
    return str.replace(/&/g, "&#38;").replace(/"/g, "&#34;").replace(/'/g, "&#39;").replace(/</g, "&#60;");
};

exports.getMatchOffsets = function(string, regExp) {
    var matches = [];

    string.replace(regExp, function(str) {
        matches.push({
            offset: arguments[arguments.length-2],
            length: str.length
        });
    });

    return matches;
};
exports.deferredCall = function(fcn) {
    var timer = null;
    var callback = function() {
        timer = null;
        fcn();
    };

    var deferred = function(timeout) {
        deferred.cancel();
        timer = setTimeout(callback, timeout || 0);
        return deferred;
    };

    deferred.schedule = deferred;

    deferred.call = function() {
        this.cancel();
        fcn();
        return deferred;
    };

    deferred.cancel = function() {
        clearTimeout(timer);
        timer = null;
        return deferred;
    };
    
    deferred.isPending = function() {
        return timer;
    };

    return deferred;
};


exports.delayedCall = function(fcn, defaultTimeout) {
    var timer = null;
    var callback = function() {
        timer = null;
        fcn();
    };

    var _self = function(timeout) {
        if (timer == null)
            timer = setTimeout(callback, timeout || defaultTimeout);
    };

    _self.delay = function(timeout) {
        timer && clearTimeout(timer);
        timer = setTimeout(callback, timeout || defaultTimeout);
    };
    _self.schedule = _self;

    _self.call = function() {
        this.cancel();
        fcn();
    };

    _self.cancel = function() {
        timer && clearTimeout(timer);
        timer = null;
    };

    _self.isPending = function() {
        return timer;
    };

    return _self;
};
});

define("ace/worker/mirror",["require","exports","module","ace/document","ace/lib/lang"], function(require, exports, module) {
"use strict";

var Document = require("../document").Document;
var lang = require("../lib/lang");
    
var Mirror = exports.Mirror = function(sender) {
    this.sender = sender;
    var doc = this.doc = new Document("");
    
    var deferredUpdate = this.deferredUpdate = lang.delayedCall(this.onUpdate.bind(this));
    
    var _self = this;
    sender.on("change", function(e) {
        doc.applyDeltas(e.data);
        if (_self.$timeout)
            return deferredUpdate.schedule(_self.$timeout);
        _self.onUpdate();
    });
};

(function() {
    
    this.$timeout = 500;
    
    this.setTimeout = function(timeout) {
        this.$timeout = timeout;
    };
    
    this.setValue = function(value) {
        this.doc.setValue(value);
        this.deferredUpdate.schedule(this.$timeout);
    };
    
    this.getValue = function(callbackId) {
        this.sender.callback(this.doc.getValue(), callbackId);
    };
    
    this.onUpdate = function() {
    };
    
    this.isPending = function() {
        return this.deferredUpdate.isPending();
    };
    
}).call(Mirror.prototype);

});

define("ace/mode/xquery/xqlint",["require","exports","module","ace/mode/tree_ops","ace/mode/xquery/errors","ace/mode/tree_ops","ace/mode/xquery/errors","ace/mode/xquery/schema_built-in_types","ace/mode/xquery/errors","ace/mode/tree_ops","ace/mode/xquery/static_context","ace/mode/xquery/handlers","ace/mode/tree_ops","ace/mode/xquery/parsers/JSONiqParser","ace/mode/xquery/parsers/XQueryParser","ace/mode/xquery/parsers/JSONParseTreeHandler","ace/mode/xquery/compiler/translator","ace/mode/xquery/formatter/style_checker","ace/mode/lib/completion/completer","ace/mode/xquery/compiler/static_context"], function(require, exports, module) {
module.exports = (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({
1:[function(require,module,exports){
'use strict';

var init = function(that, code, message, pos, type){
    if(!code) {
        throw new Error(type + ' code is missing.');
    }
    
    if(!message) {
        throw new Error(type + ' message is missing.');
    }
    
    if(!pos) {
        throw new Error(type + ' position is missing.');
    }

    that.getCode = function(){
        return code;
    };
    
    that.getMessage = function(){
        return message;
    };

    that.getPos = function(){
        return pos;
    };
};

var StaticError = {};
var StaticWarning = {};
StaticError.prototype = new Error();
StaticWarning.prototype = new Error();

exports.StaticError = StaticError.prototype.constructor = function(code, message, pos) {
    init(this, code, message, pos, 'Error');
};

exports.StaticWarning = StaticWarning.prototype.constructor = function(code, message, pos) {
    init(this, code, message, pos, 'Warning');
};
},
{}],
2:[function(require,module,exports){
'use strict';

var TreeOps = require('../tree_ops').TreeOps;
var Errors = require('./errors');
var StaticWarning = Errors.StaticWarning;
exports.ModuleDecl = function(translator, rootSctx, node){
    var prefix = '';
    return {
        NCName: function(ncname){
            prefix = TreeOps.flatten(ncname);
        },

        URILiteral: function(uri) {
            uri = TreeOps.flatten(uri);
            uri = uri.substring(1, uri.length - 1);
            translator.apply(function(){
                rootSctx.moduleNamespace = uri;
                rootSctx.addNamespace(uri, prefix, node.pos, 'moduleDecl');
            });
        }
    };
};

exports.ModuleImport = function(translator, rootSctx, node) {
    var prefix = '';
    var moduleURI;

    return {
        NCName: function(ncname){
            prefix = TreeOps.flatten(ncname);
        },

        URILiteral: function(uri) {
            if(moduleURI !== undefined) {
                return;
            }
            uri = TreeOps.flatten(uri);
            uri = uri.substring(1, uri.length - 1);
            moduleURI = uri;
            translator.apply(function(){
                rootSctx.importModule(uri, prefix, node.pos);
            });
        }
    };
};

exports.SchemaImport = function(translator, rootSctx, node) {
    var prefix = '';
    var schemaURI;
    
    return {
        SchemaPrefix: function(schemaPrefix) {
            var SchemaPrefixHandler = function () {
                this.NCName = function (ncname) {
                    prefix = TreeOps.flatten(ncname);
                };
            };
            translator.visitChildren(schemaPrefix, new SchemaPrefixHandler());
        },

        URILiteral: function(uri) {
            if(schemaURI !== undefined) {
                return;
            }
            uri = TreeOps.flatten(uri);
            uri = uri.substring(1, uri.length - 1);
            schemaURI = uri;
            translator.apply(function(){
                rootSctx.addNamespace(uri, prefix, node.pos, 'schema');
            });
        }
    };
};

exports.DefaultNamespaceDecl = function(translator, rootSctx, node) {
    var fn = false;
    var ns = '';

    return {
        TOKEN: function(token){
            fn = fn ? true : (token.value === 'function');
        },
        URILiteral: function(uri){
            ns = TreeOps.flatten(uri);
            ns = ns.substring(1, ns.length - 1);
            if(!fn) {
                translator.apply(function(){
                    throw new StaticWarning('W06', 'Avoid default element namespace declarations.', node.pos);
                });
                rootSctx.defaultElementNamespace = ns;
            } else {
                rootSctx.defaultFunctionNamespace = ns;
            }
        }
    };
};

exports.NamespaceDecl = function(translator, rootSctx, node) {
    var prefix = '';
    return {
        NCName: function(ncname) {
            prefix = TreeOps.flatten(ncname);
        },
        URILiteral: function(uri) {
            uri = TreeOps.flatten(uri);
            uri = uri.substring(1, uri.length - 1);
            translator.apply(function(){
                rootSctx.addNamespace(uri, prefix, node.pos, 'declare');
            });
        }
    };
};
exports.VarHandler = function(translator, sctx, node){
    var EQNameHandler = function(eqname){
        var value = TreeOps.flatten(eqname);
        translator.apply(function(){
            var qname = sctx.resolveQName(value, eqname.pos);
            sctx.addVariable(qname, node.name, eqname.pos);
        });
    };
    return {
        ExprSingle: function(){ return true; },
        VarValue: function(){ return true; },
        VarDefaultValue: function(){ return true; },
        VarName: EQNameHandler,
        EQName: EQNameHandler
    };
};

exports.VarRefHandler = function(translator, sctx, node){
    return {
        VarName: function(eqname){
            var value = TreeOps.flatten(eqname);
            translator.apply(function(){
                var qname = sctx.resolveQName(value, node.pos);
                if(qname.uri !== '') {
                    sctx.root.namespaces[qname.uri].used = true;
                }
                sctx.addVarRef(qname, eqname.pos);
            });
        }
    };
};
},
{"../tree_ops":11,"./errors":1}],
3:[function(require,module,exports){
'use strict';
exports.getSchemaBuiltinTypes = function(){
    var ns = 'http://www.w3.org/2001/XMLSchema';
    var SchemaBuiltinTypes = {};
    SchemaBuiltinTypes[ns] = {
        variables: {},
        functions: {}
    };
    SchemaBuiltinTypes[ns].functions[ns + '#string#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'string', arity: 1, eqname: { uri: ns, name: 'string' } };
    SchemaBuiltinTypes[ns].functions[ns + '#boolean#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'boolean', arity: 1, eqname: { uri: ns, name: 'boolean' } };
    SchemaBuiltinTypes[ns].functions[ns + '#decimal#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'decimal', arity: 1, eqname: { uri: ns, name: 'decimal' } };
    SchemaBuiltinTypes[ns].functions[ns + '#float#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'float', arity: 1, eqname: { uri: ns, name: 'float' } };
    SchemaBuiltinTypes[ns].functions[ns + '#double#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'double', arity: 1, eqname: { uri: ns, name: 'double' } };
    SchemaBuiltinTypes[ns].functions[ns + '#duration#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'duration', arity: 1, eqname: { uri: ns, name: 'duration' } };
    SchemaBuiltinTypes[ns].functions[ns + '#dateTime#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'dateTime', arity: 1, eqname: { uri: ns, name: 'dateTime' } };
    SchemaBuiltinTypes[ns].functions[ns + '#time#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'time', arity: 1, eqname: { uri: ns, name: 'time' } };
    SchemaBuiltinTypes[ns].functions[ns + '#date#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'date', arity: 1, eqname: { uri: ns, name: 'date' } };
    SchemaBuiltinTypes[ns].functions[ns + '#gYearMonth#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'gYearMonth', arity: 1, eqname: { uri: ns, name: 'gYearMonth' } };
    SchemaBuiltinTypes[ns].functions[ns + '#gYear#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'gYear', arity: 1, eqname: { uri: ns, name: 'gYear' } };
    SchemaBuiltinTypes[ns].functions[ns + '#gMonthDay#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'gMonthDay', arity: 1, eqname: { uri: ns, name: 'gMonthDay' } };
    SchemaBuiltinTypes[ns].functions[ns + '#gDay#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'gDay', arity: 1, eqname: { uri: ns, name: 'gDay' } };
    SchemaBuiltinTypes[ns].functions[ns + '#gMonth#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'gMonth', arity: 1, eqname: { uri: ns, name: 'gMonth' } };
    SchemaBuiltinTypes[ns].functions[ns + '#hexBinary#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'hexBinary', arity: 1, eqname: { uri: ns, name: 'hexBinary' } };
    SchemaBuiltinTypes[ns].functions[ns + '#base64Binary#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'base64Binary', arity: 1, eqname: { uri: ns, name: 'base64Binary' } };
    SchemaBuiltinTypes[ns].functions[ns + '#anyURI#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'anyURI', arity: 1, eqname: { uri: ns, name: 'anyURI' } };
    SchemaBuiltinTypes[ns].functions[ns + '#QName#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'QName', arity: 1, eqname: { uri: ns, name: 'QName' } };
    SchemaBuiltinTypes[ns].functions[ns + '#normalizedString#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'normalizedString', arity: 1, eqname: { uri: ns, name: 'normalizedString' } };
    SchemaBuiltinTypes[ns].functions[ns + '#token#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'token', arity: 1, eqname: { uri: ns, name: 'token' } };
    SchemaBuiltinTypes[ns].functions[ns + '#language#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'language', arity: 1, eqname: { uri: ns, name: 'language' } };
    SchemaBuiltinTypes[ns].functions[ns + '#NMTOKEN#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'NMTOKEN', arity: 1, eqname: { uri: ns, name: 'NMTOKEN' } };
    SchemaBuiltinTypes[ns].functions[ns + '#Name#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'Name', arity: 1, eqname: { uri: ns, name: 'Name' } };
    SchemaBuiltinTypes[ns].functions[ns + '#NCName#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'NCName', arity: 1, eqname: { uri: ns, name: 'NCName' } };
    SchemaBuiltinTypes[ns].functions[ns + '#ID#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'ID', arity: 1, eqname: { uri: ns, name: 'ID' } };
    SchemaBuiltinTypes[ns].functions[ns + '#IDREF#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'IDREF', arity: 1, eqname: { uri: ns, name: 'IDREF' } };
    SchemaBuiltinTypes[ns].functions[ns + '#ENTITY#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'ENTITY', arity: 1, eqname: { uri: ns, name: 'ENTITY' } };
    SchemaBuiltinTypes[ns].functions[ns + '#integer#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'integer', arity: 1, eqname: { uri: ns, name: 'integer' } };
    SchemaBuiltinTypes[ns].functions[ns + '#nonPositiveInteger#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'nonPositiveInteger', arity: 1, eqname: { uri: ns, name: 'nonPositiveInteger' } };
    SchemaBuiltinTypes[ns].functions[ns + '#negativeInteger#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'negativeInteger', arity: 1, eqname: { uri: ns, name: 'negativeInteger' } };
    SchemaBuiltinTypes[ns].functions[ns + '#long#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'long', arity: 1, eqname: { uri: ns, name: 'long' } };
    SchemaBuiltinTypes[ns].functions[ns + '#int#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'int', arity: 1, eqname: { uri: ns, name: 'int' } };
    SchemaBuiltinTypes[ns].functions[ns + '#short#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'short', arity: 1, eqname: { uri: ns, name: 'short' } };
    SchemaBuiltinTypes[ns].functions[ns + '#byte#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'byte', arity: 1, eqname: { uri: ns, name: 'byte' } };
    SchemaBuiltinTypes[ns].functions[ns + '#nonNegativeInteger#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'nonNegativeInteger', arity: 1, eqname: { uri: ns, name: 'nonNegativeInteger' } };
    SchemaBuiltinTypes[ns].functions[ns + '#unsignedLong#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'unsignedLong', arity: 1, eqname: { uri: ns, name: 'unsignedLong' } };
    SchemaBuiltinTypes[ns].functions[ns + '#unsignedInt#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'unsignedInt', arity: 1, eqname: { uri: ns, name: 'unsignedInt' } };
    SchemaBuiltinTypes[ns].functions[ns + '#unsignedShort#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'unsignedShort', arity: 1, eqname: { uri: ns, name: 'unsignedShort' } };
    SchemaBuiltinTypes[ns].functions[ns + '#unsignedByte#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'unsignedByte', arity: 1, eqname: { uri: ns, name: 'unsignedByte' } };
    SchemaBuiltinTypes[ns].functions[ns + '#positiveInteger#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'positiveInteger', arity: 1, eqname: { uri: ns, name: 'positiveInteger' } };
    SchemaBuiltinTypes[ns].functions[ns + '#yearMonthDuration#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'yearMonthDuration', arity: 1, eqname: { uri: ns, name: 'yearMonthDuration' } };
    SchemaBuiltinTypes[ns].functions[ns + '#dayTimeDuration#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'dayTimeDuration', arity: 1, eqname: { uri: ns, name: 'dayTimeDuration' } };
    SchemaBuiltinTypes[ns].functions[ns + '#untypedAtomic#1'] = { params: ['$arg as xs:anyAtomicType?'], annotations: [], name: 'untypedAtomic', arity: 1, eqname: { uri: ns, name: 'untypedAtomic' } };
    return SchemaBuiltinTypes;
};
},
{}],
4:[function(require,module,exports){
exports.StaticContext = function (parent, pos) {
    'use strict';
    
    var TreeOps = require('../tree_ops').TreeOps;
    
    var Errors = require('./errors');
    var StaticError = Errors.StaticError;
    var StaticWarning = Errors.StaticWarning;
    
    var getSchemaBuiltinTypes = require('./schema_built-in_types').getSchemaBuiltinTypes;
    
    var emptyPos = { sl:0, sc: 0, el: 0, ec: 0 };
    var namespaces = {};
    
    var getVarKey = function(qname) {
        return qname.uri + '#' + qname.name;
    };

    var getFnKey = function(qname, arity) {
        return getVarKey(qname) + '#' + arity;
    };

    if(!parent) {
        namespaces['http://jsoniq.org/functions'] = {
            prefix: 'jn',
            pos: emptyPos,
            type: 'module',
            override: true
        };
        namespaces['http://www.28msec.com/modules/collections'] = {
            prefix: 'db',
            pos: emptyPos,
            type: 'module',
            override: true
        };
        namespaces['http://www.28msec.com/modules/store'] = {
            prefix: 'store',
            pos: emptyPos,
            type: 'module',
            override: true
        };
        namespaces['http://jsoniq.org/function-library'] = {
            prefix: 'libjn',
            pos: emptyPos,
            type: 'module',
            override: true
        };
        namespaces['http://www.w3.org/2005/xpath-functions'] = {
            prefix: 'fn',
            pos: emptyPos,
            type: 'module',
            override: true
        };
        namespaces['http://www.w3.org/2005/xquery-local-functions'] = {
            prefix: 'local',
            pos: emptyPos,
            type: 'declare',
            override: true
        };
        namespaces['http://www.w3.org/2001/XMLSchema-instance'] = {
            prefix: 'xsi',
            pos: emptyPos,
            type: 'declare'
        };
        namespaces['http://www.w3.org/2001/XMLSchema'] = {
            prefix: 'xs',
            pos: emptyPos,
            type: 'declare'
        };
        namespaces['http://www.w3.org/XML/1998/namespace'] = {
            prefix: 'xml',
            pos: emptyPos,
            type: 'declare'
        };
        namespaces['http://zorba.io/annotations'] = {
            prefix: 'an',
            pos: emptyPos,
            type: 'declare',
            override: true
        };
        namespaces['http://www.28msec.com/annotations/rest'] = {
            prefix: 'rest',
            pos: emptyPos,
            type: 'declare',
            override: true
        };
        namespaces['http://www.w3.org/2005/xqt-errors'] = {
            prefix: 'err',
            pos: emptyPos,
            type: 'declare',
            override: true
        };
        namespaces['http://zorba.io/errors'] = {
            prefix: 'zerr',
            pos: emptyPos,
            type: 'declare',
            override: true
        };
    }

    var s = {
        parent: parent,
        children: [],
        pos: pos,
        setModuleResolver: function(resolver){
            this.root.moduleResolver = resolver;
            return this;
        },
        setModules: function(index){
            if(this !== this.root){
                throw new Error('setModules() not invoked from the root static context.');
            }
            this.moduleResolver = function(uri){
                return index[uri];
            };
            var that = this;
            Object.keys(this.namespaces).forEach(function(uri){
                var ns = that.namespaces[uri];
                if(ns.type === 'module') {
                    var mod = that.moduleResolver(uri);
                    if(mod.variables) {
                        TreeOps.concat(that.variables, mod.variables);
                    }
                    if(mod.functions) {
                        TreeOps.concat(that.functions, mod.functions);
                    }
                }
            });
            return this;
        },
        setModulesFromXQDoc: function(xqdoc){
            if(this !== this.root){
                throw new Error('setModulesFromXQDoc() not invoked from the root static context.');
            }
            var index = {};
            Object.keys(xqdoc).forEach(function(uri) {
                var mod = xqdoc[uri];
                var variables = {};
                var functions = {};
                mod.functions.forEach(function(fn){
                    functions[uri + '#' + fn.name + '#' + fn.arity] = {
                        params: [],
                        annotations: [],
                        name: fn.name,
                        arity: fn.arity,
                        eqname: { uri: uri, name: fn.name }
                    };
                    fn.parameters.forEach(function(param){
                        functions[uri + '#' + fn.name + '#' + fn.arity].params.push('$' + param.name);
                    });
                });
                mod.variables.forEach(function(variable){
                    var name = variable.name.substring(variable.name.indexOf(':') + 1);
                    variables[uri + '#' + name] = { type: 'VarDecl', annotations: [], eqname: { uri: uri, name: name } };
                });
                index[uri] = {
                    variables: variables,
                    functions: functions
                };
            });
            this.root.moduleResolver = function(uri){
                return index[uri];
            };
            var that = this;
            Object.keys(this.namespaces).forEach(function(uri){
                var ns = that.namespaces[uri];
                if(ns.type === 'module') {
                    var mod = that.moduleResolver(uri);
                    if(mod.variables) {
                        TreeOps.concat(that.variables, mod.variables);
                    }
                    if(mod.functions) {
                        TreeOps.concat(that.functions, mod.functions);
                    }
                }
            });
            return this;
        },
        moduleNamespace: '',
        defaultFunctionNamespace: 'http://www.w3.org/2005/xpath-functions',
        defaultFunctionNamespaces: [
            'http://www.28msec.com/modules/collections',
            'http://www.28msec.com/modules/store',
            'http://jsoniq.org/functions',
            'http://jsoniq.org/function-library',
            'http://www.w3.org/2001/XMLSchema' //Built-in type constructors
        ],
        defaultElementNamespace: '',
        namespaces: namespaces,
        availableModuleNamespaces: [],
        importModule: function(uri, prefix, pos) {
            if(this !== this.root){
                throw new Error('Function not invoked from the root static context.');
            }
            this.addNamespace(uri, prefix, pos, 'module');
            if(this.moduleResolver) {
                try {
                    var mod = this.moduleResolver(uri, []);
                    if(mod.variables) {
                        TreeOps.concat(this.variables, mod.variables);
                    }
                    if(mod.functions) {
                        TreeOps.concat(this.functions, mod.functions);
                    }
                } catch(e) {
                    throw new StaticError('XQST0059', 'module "' + uri + '" not found', pos);
                }
            }
            return this;
        },
        getAvailableModuleNamespaces: function(){
            return this.root.availableModuleNamespaces;
        },
        getPrefixByNamespace: function(uri){
            return this.root.namespaces[uri].prefix;
        },
        addNamespace: function (uri, prefix, pos, type) {
            if(prefix === '' && type === 'module') {
                throw new StaticWarning('W01', 'Avoid this type of import. Use import module namespace instead', pos);
            }
            if (uri === '') {
                throw new StaticError('XQST0088', 'empty target namespace in module import or module declaration', pos);
            }
            var namespace = this.getNamespace(uri);
            if (namespace && namespace.type === type && type !== 'declare' && !namespace.override) {
                throw new StaticError('XQST0047', '"' + uri + '": duplicate target namespace', pos);
            }
            namespace = this.getNamespaceByPrefix(prefix);
            if (namespace && !namespace.override) {
                throw new StaticError('XQST0033', '"' + prefix + '": namespace prefix already bound to "' + namespace.uri + '"', pos);
            }

            namespace = this.namespaces[uri];
            this.namespaces[uri] = {
                prefix: prefix,
                pos: pos,
                type: type
            };

            if (namespace) {
                throw new StaticWarning('W02', '"' + uri + '" already bound to the "' + namespace.prefix + '" prefix', pos);
            }

        },

        getNamespaces: function(){
            return this.root.namespaces;
        },
        
        getNamespace: function (uri) {
            var that = this;
            while (that) {
                var namespace = that.namespaces[uri];
                if (namespace) {
                    return namespace;
                }
                that = that.parent;
            }

        },

        getNamespaceByPrefix: function (prefix) {
            var handler = function (uri) {
                var namespace = that.namespaces[uri];
                if (namespace.prefix === prefix) {
                    namespace.uri = uri;
                    throw namespace;
                }
            };
            var that = this;
            while (that) {
                try {
                    Object.keys(that.namespaces).forEach(handler);
                } catch (e) {
                    return e;
                }
                that = that.parent;
            }

        },
        
        resolveQName: function(value, pos){
            var qname = {
                uri: '',
                prefix: '',
                name: ''
            };
            var idx;
            if (value.substring(0, 2) === 'Q{') {
                idx = value.indexOf('}');
                qname.uri = value.substring(2, idx);
                qname.name = value.substring(idx + 1);
            } else {
                idx = value.indexOf(':');
                qname.prefix = value.substring(0, idx);
                var namespace = this.getNamespaceByPrefix(qname.prefix);
                if(!namespace && qname.prefix !== '' && ['fn', 'jn'].indexOf(qname.prefix) === -1) {
                    throw new StaticError('XPST0081', '"' + qname.prefix + '": can not expand prefix of lexical QName to namespace URI', pos);
                }
                if(namespace) {
                    qname.uri = namespace.uri;
                }
                qname.name = value.substring(idx + 1);
            }
            return qname;
        },
        
        variables: {},
        varRefs: {},
        functionCalls: {},
    
        addVariable: function(qname, type, pos){
            if(
                type === 'VarDecl' && this.moduleNamespace !== '' &&
                !(this.moduleNamespace === qname.uri || (qname.uri === '' && this.defaultFunctionNamespace === this.moduleNamespace))
            ) {
                throw new StaticError('XQST0048', '"' + qname.prefix + ':' + qname.name + '": Qname not library namespace', pos);
            }
            var key = getVarKey(qname);
            if(type === 'VarDecl' && this.variables[key]) {
                throw new StaticError('XQST0049', '"' + qname.name + '": duplicate variable declaration', pos);
            }
            this.variables[key] = {
                type: type,
                pos: pos,
                qname: qname,
                annotations: {}
            };
            return this;
        },
        
        getVariables: function(){
            var variables = {};
            var that = this;
            var handler = function(key){
                if(!variables[key]){
                    variables[key] = that.variables[key];
                }
            };
            while(that){
                Object.keys(that.variables).forEach(handler);
                that = that.parent;
            }
            return variables;
        },
        
        getVariable: function(qname) {
            var key = getVarKey(qname);
            var that = this;
            while(that) {
                if(that.variables[key]) {
                    return that.variables[key];
                }
                that = that.parent;
            }
        },
        
        addVarRef: function(qname, pos){
            var varDecl = this.getVariable(qname);
            if(!varDecl && (qname.uri === '' || this.root.moduleResolver)) {
                throw new StaticError('XPST0008', '"' + qname.name + '": undeclared variable', pos);
            }
            var key = getVarKey(qname);
            this.varRefs[key] = true;
        },
        
        addFunctionCall: function(qname, arity, pos){
            var fn = this.getFunction(qname, arity);
            if(!fn && (qname.uri === 'http://www.w3.org/2005/xquery-local-functions' || this.root.moduleResolver)){
                if((qname.uri === 'http://www.w3.org/2005/xpath-functions' ||
                    (qname.uri === '' && this.root.defaultFunctionNamespaces.concat(this.root.defaultFunctionNamespace).indexOf('http://www.w3.org/2005/xpath-functions') !== -1)) && qname.name === 'concat') {
                } else if(!fn){
                    throw new StaticError('XPST0008', '"' + qname.name + '#' + arity + '": undeclared function', pos);
                }
            }
            var key = getFnKey(qname, arity);
            this.functionCalls[key] = true;
        },
        
        functions: getSchemaBuiltinTypes()['http://www.w3.org/2001/XMLSchema'].functions,

        getFunctions: function(){
            return this.root.functions;
        },
        
        getFunction: function(qname, arity){
            var key = getFnKey(qname, arity);
            var fn;
            if(qname.uri === '') {
                var that = this;
                this.root.defaultFunctionNamespaces.concat([this.root.defaultFunctionNamespace]).forEach(function(defaultFunctionNamespace){
                    if(!fn){
                        fn = that.getFunction({ uri: defaultFunctionNamespace, prefix: qname.prefix, name: qname.name }, arity);
                    } else {
                        return false;
                    }
                });
                return fn;
            } else {
                return this.root.functions[key];
            }
        },
        
        addFunction: function(qname, pos, params) {
            if(this !== this.root){
                throw new Error('addFunction() not invoked from the root static context.');
            }
            var arity = params.length;
            if(
                this.moduleNamespace !== '' &&
                !(this.moduleNamespace === qname.uri || (qname.uri === '' && this.defaultFunctionNamespace === this.moduleNamespace))
            ) {
                throw new StaticError('XQST0048', '"' + qname.prefix + ':' + qname.name + '": Qname not library namespace', pos);
            }
            var key = getFnKey(qname, arity);
            if(this.functions[key]) {
                throw new StaticError('XQST0034', '"' + qname.name + '": duplicate function declaration', pos);
            }
            this.functions[key] = {
                pos: pos,
                params: params
            };
            return this;
        }
        
    };
    s.root = parent ? parent.root : s;
    return s;
};

},
{"../tree_ops":11,"./errors":1,"./schema_built-in_types":3}],
5:[function(require,module,exports){
exports.Translator = function(rootStcx, ast){
    'use strict';

    var Errors = require('./errors');
    var StaticError = Errors.StaticError;
    var StaticWarning = Errors.StaticWarning;
    
    var TreeOps = require('../tree_ops').TreeOps;
    var StaticContext = require('./static_context').StaticContext;
    var Handlers = require('./handlers');
    
    var get = function(node, path){
        var result = [];
        if(path.length === 0){
            return node;
        }
        node.children.forEach(function(child){
            if(child.name === path[0] && path.length > 1) {
                result = get(child, path.slice(1));
            } else if(child.name === path[0]) {
                result.push(child);
            }
        });
        return result;
    };
    
    var markers = [];
    this.apply = function(fn) {
        try {
            fn();
        } catch(e) {
            if(e instanceof StaticError) {
                addStaticError(e);
            } else if(e instanceof StaticWarning) {
                addWarning(e.getCode(), e.getMessage(), e.getPos());
            } else {
                throw e;
            }
        }
    };

    var addStaticError = function(e){
        markers.push({
            pos: e.getPos(),
            type: 'error',
            level: 'error',
            message: '[' + e.getCode() + '] ' + e.getMessage()
        });
    };
    
    var addWarning = function(code, message, pos) {
        markers.push({
            pos: pos,
            type: 'warning',
            level: 'warning',
            message: '[' + code + '] ' + message
        });
    };
    
    this.getMarkers = function(){
        return markers;
    };

    var translator = this;

    rootStcx.pos = ast.pos;
    var sctx = rootStcx;
    var pushSctx = function(pos){
        sctx = new StaticContext(sctx, pos);
        sctx.parent.children.push(sctx);
    };
    
    var popSctx = function(pos){
        if (pos !== undefined) {
            sctx.pos.el = pos.el;
            sctx.pos.ec = pos.ec;
        }

        Object.keys(sctx.varRefs).forEach(function(key){
            if(!sctx.variables[key]) {
                sctx.parent.varRefs[key] = true;
            }
        });
        Object.keys(sctx.variables).forEach(function(key){
            if(!sctx.varRefs[key] && sctx.variables[key].type !== 'GroupingVariable' && sctx.variables[key].type !== 'CatchVar') {
                addWarning('W03', 'Unused variable "$' + sctx.variables[key].qname.name + '"', sctx.variables[key].pos);
            }
        });
        
        sctx = sctx.parent;
    };
    
    this.visitOnly = function(node, names) {
        node.children.forEach(function(child){
            if (names.indexOf(child.name) !== -1){
                translator.visit(child);
            }
        });
    };
    
    this.getFirstChild = function(node, name) {
        var result;
        node.children.forEach(function(child){
            if(child.name === name && result === undefined){
                result = child;
            }
        });
        return result;
    };
    
    this.ModuleDecl = function(node){
        this.visitChildren(node, Handlers.ModuleDecl(translator, rootStcx, node));
        return true;
    };
    
    this.Prolog = function(node){
        this.visitOnly(node, ['DefaultNamespaceDecl', 'Setter', 'NamespaceDecl', 'Import']);
        ast.index.forEach(function(node){
            if(node.name === 'VarDecl') {
                node.children.forEach(function(child){
                    if(child.name === 'VarName') {
                        translator.apply(function(){
                            var value = TreeOps.flatten(child);
                            var qname = rootStcx.resolveQName(value, child.pos);
                            rootStcx.addVariable(qname, node.name, child.pos);
                        });
                    }
                });
            } else if(node.name === 'FunctionDecl') {
                var qname, pos, params = [];
                node.children.forEach(function(child){
                    if(child.name === 'EQName') {
                        qname = child;
                        pos = child.pos;
                    } else if(child.name === 'ParamList'){
                        child.children.forEach(function(c){
                            if(c.name === 'Param') {
                                params.push(TreeOps.flatten(c));
                            }
                        });
                    }
                });
                translator.apply(function(){
                    qname = TreeOps.flatten(qname);
                    qname = rootStcx.resolveQName(qname, pos);
                    rootStcx.addFunction(qname, pos, params);
                });
            }
        });
        this.visitOnly(node, ['ContextItemDecl', 'AnnotatedDecl', 'OptionDecl']);
        return true;
    };
    
    this.ModuleImport = function (node) {
        this.visitChildren(node, Handlers.ModuleImport(translator, rootStcx, node));
        return true;
    };
    
    this.SchemaImport = function (node) {
        this.visitChildren(node, Handlers.SchemaImport(translator, rootStcx, node));
        return true;
    };
    
    this.DefaultNamespaceDecl = function(node){
        this.visitChildren(node, Handlers.DefaultNamespaceDecl(translator, rootStcx, node));
        return true;
    };
    
    this.NamespaceDecl = function (node) {
        this.visitChildren(node, Handlers.NamespaceDecl(translator, rootStcx, node));
        return true;
    };
    
    var annotations = {};
    this.AnnotatedDecl = function(node) {
        annotations = {};
        this.visitChildren(node, Handlers.NamespaceDecl(translator, rootStcx, node));
        return true;
    };
    
    this.CompatibilityAnnotation = function(){
        annotations['http://www.w3.org/2012/xquery#updating'] = [];
        return true;
    };
    
    this.Annotation = function(node){
        this.visitChildren(node, {
            EQName: function(eqname){
                var value = TreeOps.flatten(eqname);
                translator.apply(function(){
                    var qname = sctx.resolveQName(value, eqname.pos);
                    annotations[qname.uri + '#' + qname.name] = [];
                });
            }
        });
        return true;
    };
    
    this.VarDecl = function(node){
        try {
            var varname = translator.getFirstChild(node, 'VarName');
            var value = TreeOps.flatten(varname);
            var qname = sctx.resolveQName(value, varname.pos);
            var variable = rootStcx.getVariable(qname);
            if(variable) {
                variable.annotations = annotations;
            }
        } catch(e) {
        }
        this.visitOnly(node, ['ExprSingle', 'VarValue', 'VarDefaultValue']);
        return true;
    };
    
    this.FunctionDecl = function(node) {
        var isUpdating = annotations['http://www.w3.org/2012/xquery#updating'] !== undefined;
        var typeDecl = get(node, ['ReturnType'])[0];
        var name = get(node, ['EQName'])[0];
        if(!typeDecl && !isUpdating){
            addWarning('W05', 'Untyped return value', name.pos);
        }
        var isExternal = false;
        node.children.forEach(function(child){
            if(child.name === 'TOKEN' && child.value === 'external') {
                isExternal = true;
                return false;
            }
        });
        if(!isExternal) {
            pushSctx(node.pos);
            this.visitChildren(node);
            popSctx();
        }
        return true;
    };
    
    this.VarRef = function(node) {
        this.visitChildren(node, Handlers.VarRefHandler(translator, sctx, node));
        return true;
    };
    
    this.Param = function(node){
        var typeDecl = get(node, ['TypeDeclaration'])[0];
        if(!typeDecl){
            addWarning('W05', 'Untyped function parameter', node.pos);
        }
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        return true;
    };
    
    this.InlineFunctionExpr	= function(node) {
        pushSctx(node.pos);
        this.visitChildren(node);
        popSctx();
        return true;
    };
    var statementCount = [];
    var handleStatements = function(node) {
        pushSctx(node.pos);
        statementCount.push(0);
        translator.visitChildren(node);
        for (var i = 1; i <= statementCount[statementCount.length - 1]; i++) {
            popSctx(node.pos);
        }
        statementCount.pop();
        popSctx();
    };

    this.StatementsAndOptionalExpr = function (node) {
        handleStatements(node);
        return true;
    };

    this.StatementsAndExpr = function (node) {
        handleStatements(node);
        return true;
    };

    this.BlockStatement = function (node) {
        handleStatements(node);
        return true;
    };
    
    this.VarDeclStatement = function(node){
        pushSctx(node.pos);
        statementCount[statementCount.length - 1]++;
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
    };
    var clauses = [];
    this.FLWORExpr = this.FLWORStatement = function (node) {
        pushSctx(node.pos);
        clauses.push(0);
        this.visitChildren(node);
        for(var i=1; i <= clauses[clauses.length - 1]; i++) {
            popSctx(node.pos);
        }
        clauses.pop();
        popSctx();
        return true;
    };
    
    this.ForBinding = function (node) {
        this.visitOnly(node, ['ExprSingle', 'VarValue', 'VarDefaultValue']);
        pushSctx(node.pos);
        clauses[clauses.length - 1]++;
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        return true;
    };
    
    this.LetBinding = function(node){
        this.visitOnly(node, ['ExprSingle', 'VarValue', 'VarDefaultValue']);
        pushSctx(node.pos);
        clauses[clauses.length - 1]++;
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        return true;
    };

    this.GroupingSpec = function(node){
        var isVarDecl = false;
        node.children.forEach(function(child){
            if(child.value === ':=') {
                isVarDecl = true;
                return false;
            }
        });
        if(isVarDecl) {
            var groupingVariable = node.children[0];
            this.visitOnly(node, ['ExprSingle', 'VarValue', 'VarDefaultValue']);
            pushSctx(node.pos);
            clauses[clauses.length - 1]++;
            this.visitChildren(groupingVariable, Handlers.VarHandler(translator, sctx, groupingVariable));
            return true;
        } else {
            
        }
    };
    
    this.TumblingWindowClause = function (node) {
        this.visitOnly(node, ['ExprSingle']);
        pushSctx(node.pos);
        clauses[clauses.length - 1]++;
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        this.visitOnly(node, ['WindowStartCondition', 'WindowEndCondition']);
        return true;
    };

    this.WindowVars = function (node) {
        pushSctx(node.pos);
        clauses[clauses.length - 1]++;
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        return true;
    };

    this.SlidingWindowClause = function (node) {
        this.visitOnly(node, ['ExprSingle', 'VarValue', 'VarDefaultValue']);
        pushSctx(node.pos);
        clauses[clauses.length - 1]++;
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        this.visitOnly(node, ['WindowStartCondition', 'WindowEndCondition']);
        return true;
    };

    this.PositionalVar = function (node) {
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        return true;
    };

    this.PositionalVar = function (node) {
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        return true;
    };

    this.CurrentItem = function (node) {
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        return true;
    };

    this.PreviousItem = function (node) {
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        return true;
    };

    this.NextItem = function (node) {
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        return true;
    };

    this.CountClause = function (node) {
        pushSctx(node.pos);
        clauses[clauses.length - 1]++;
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        return true;
    };
    
    this.CaseClause = function(node) {
        pushSctx(node.pos);
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        this.visitOnly(node, ['ExprSingle']);
        popSctx();
        return true;
    };
    
    this.TransformExpr = function (node) {
        pushSctx(node.pos);
        this.visitChildren(node);
        popSctx();
        return true;
    };
    
    this.TransformSpec = function(node) {
        this.visitOnly(node, ['ExprSingle', 'VarValue', 'VarDefaultValue']);
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        return true;
    };
    var quantifiedDecls = [];
    this.QuantifiedExpr = function (node) {
        pushSctx(node.pos);
        quantifiedDecls.push(0);
        this.visitChildren(node);
        for(var i=1; i <= quantifiedDecls[quantifiedDecls.length - 1]; i++) {
            popSctx(node.pos);
        }
        quantifiedDecls.pop();
        popSctx();
        return true;
    };
    
    this.QuantifiedVarDecl = function(node) {
        this.visitOnly(node, ['ExprSingle']);
        pushSctx(node.pos);
        quantifiedDecls[quantifiedDecls.length - 1]++;
        this.visitChildren(node, Handlers.VarHandler(translator, sctx, node));
        return true;
    };
    
    this.FunctionCall = function(node){
        this.visitOnly(node, ['ArgumentList']);
        var name = translator.getFirstChild(node, 'EQName');
        var eqname = TreeOps.flatten(name);
        var arity = get(node, ['ArgumentList', 'Argument']).length;
        translator.apply(function(){
            var qname = sctx.resolveQName(eqname, node.pos);
            try {
                if(qname.uri !== '') {
                    sctx.root.namespaces[qname.uri].used = true;
                }
            } catch(e){
            }
            sctx.addFunctionCall(qname, arity, name.pos);
        });
        return true;
    };
    
    this.TryClause = function(node){
        pushSctx(node.pos);
        this.visitChildren(node);
        popSctx();
        return true;
    };
    
    this.CatchClause = function(node){
        pushSctx(node.pos);
        var prefix = 'err';
        var uri = 'http://www.w3.org/2005/xqt-errors';
        var emptyPos = { sl: 0, sc: 0, el: 0, ec: 0 };
        sctx.addVariable({ prefix: prefix, uri: uri, name: 'code' }, 'CatchVar', emptyPos);
        sctx.addVariable({ prefix: prefix, uri: uri, name: 'description' }, 'CatchVar', emptyPos);
        sctx.addVariable({ prefix: prefix, uri: uri, name: 'value' }, 'CatchVar', emptyPos);
        sctx.addVariable({ prefix: prefix, uri: uri, name: 'module' }, 'CatchVar', emptyPos);
        sctx.addVariable({ prefix: prefix, uri: uri, name: 'line-number' }, 'CatchVar', emptyPos);
        sctx.addVariable({ prefix: prefix, uri: uri, name: 'column-number' }, 'CatchVar', emptyPos);
        sctx.addVariable({ prefix: prefix, uri: uri, name: 'additional' }, 'CatchVar', emptyPos);
        this.visitChildren(node);
        popSctx();
        return true;
    };

    this.Pragma = function(node){
        var qname = TreeOps.flatten(get(node, ['EQName'])[0]);
        qname = rootStcx.resolveQName(qname, node);
        var value = TreeOps.flatten(get(node, ['PragmaContents'])[0]);
        if (qname.name === 'xqlint' && qname.uri === 'http://xqlint.io') {
            pushSctx(node.pos);
            var commands = value.match(/[a-zA-Z]+\(([^)]+)\)/g);
            commands.forEach(function (command) {
                var name = command.substring(0, command.indexOf('('));
                var args = command.substring(0, command.length - 1).substring(command.indexOf('(') + 1).split(',').map(function (val) {
                    return val.trim();
                });
                if (name === 'varrefs') {
                    args.forEach(function (arg) {
                        var qname = sctx.resolveQName(arg.substring(1), node.pos);
                        if (qname.uri !== '') {
                            sctx.root.namespaces[qname.uri].used = true;
                        }
                        sctx.addVarRef(qname, node.pos);
                    });
                }
            });
            this.visitChildren(node);
            popSctx();
            return true;
        }
    };

    this.visit = function (node) {
        var name = node.name;
        var skip = false;

        if (typeof this[name] === 'function') {
            skip = this[name](node) === true;
        }

        if (!skip) {
            this.visitChildren(node);
        }
    };

    this.visitChildren = function (node, handler) {
        for (var i = 0; i < node.children.length; i++) {
            var child = node.children[i];
            if (handler !== undefined && typeof handler[child.name] === 'function') {
                handler[child.name](child);
            } else {
                this.visit(child);
            }
        }
    };

    this.visit(ast);
    Object.keys(rootStcx.variables).forEach(function(key){
        if(!rootStcx.varRefs[key] && (rootStcx.variables[key].annotations['http://www.w3.org/2005/xpath-functions#private'] || rootStcx.moduleNamespace === '') && rootStcx.variables[key].pos) {
            addWarning('W03', 'Unused variable "' + rootStcx.variables[key].qname.name + '"', rootStcx.variables[key].pos);
        }
    });
    Object.keys(rootStcx.namespaces).forEach(function(uri){
        var namespace = rootStcx.namespaces[uri];
        if(namespace.used === undefined && !namespace.override && namespace.type === 'module') {
            addWarning('W04', 'Unused module "' + uri + '"', namespace.pos);
        }
    });
};

},
{"../tree_ops":11,"./errors":1,"./handlers":2,"./static_context":4}],
6:[function(require,module,exports){
'use strict';

var TreeOps = require('../tree_ops').TreeOps;

var ID_REGEX = /[a-zA-Z_0-9\$]/;

function retrievePrecedingIdentifier(text, pos, regex) {
    regex = regex || ID_REGEX;
    var buf = [];
    for (var i = pos-1; i >= 0; i--) {
        if (regex.test(text[i])) {
            buf.push(text[i]);
        } else {
            break;
        }
    }
    return buf.reverse().join('');
}

function prefixBinarySearch(items, prefix) {
    var startIndex = 0;
    var stopIndex = items.length - 1;
    var middle = Math.floor((stopIndex + startIndex) / 2);
    
    while (stopIndex > startIndex && middle >= 0 && items[middle].indexOf(prefix) !== 0) {
        if (prefix < items[middle]) {
            stopIndex = middle - 1;
        } else if (prefix > items[middle]) {
            startIndex = middle + 1;
        }
        middle = Math.floor((stopIndex + startIndex) / 2);
    }
    while (middle > 0 && items[middle-1].indexOf(prefix) === 0) {
        middle--;
    }
    return middle >= 0 ? middle : 0; // ensure we're not returning a negative index
}

var uriRegex = /[a-zA-Z_0-9\/\.:\-#]/;
var char = '-._A-Za-z0-9:\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02ff\u0300-\u037D\u037F-\u1FFF\u200C\u200D\u203f\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD';
var nameChar = '[' + char + ']';
var varChar = '[' + char + '\\$]';
var nameCharRegExp = new RegExp(nameChar);
var varCharRegExp = new RegExp(varChar);

var varDeclLabels = {
    'LetBinding': 'Let binding',
    'Param': 'Function parameter',
    'QuantifiedExpr': 'Quantified expression binding',
    'VarDeclStatement': 'Local variable',
    'ForBinding': 'For binding',
    'TumblingWindowClause': 'Tumbling window binding',
    'WindowVars': 'Window variable',
    'SlidingWindowClause': 'Sliding window binding',
    'PositionalVar': 'Positional variable',
    'CurrentItem': 'Current item',
    'PreviousItem': 'Previous item',
    'NextItem': 'Next item',
    'CountClause': 'Count binding',
    'GroupingVariable': 'Grouping variable',
    'VarDecl': 'Module variable'
};

var findCompletions = function(prefix, allIdentifiers) {
    allIdentifiers.sort();
    var startIdx = prefixBinarySearch(allIdentifiers, prefix);
    var matches = [];
    for (var i = startIdx; i < allIdentifiers.length && allIdentifiers[i].indexOf(prefix) === 0; i++) {
        matches.push(allIdentifiers[i]);
    }
    return matches;
};


var completePrefix = function(identifier, pos, sctx){
    var idx = identifier.indexOf(':');
    if(idx === -1) {
        var prefixes = [];
        var namespaces = sctx.getNamespaces();
        Object.keys(namespaces).forEach(function(key){
            if(namespaces[key].type === 'module' || key === 'http://www.w3.org/2005/xquery-local-functions') {
                prefixes.push(namespaces[key].prefix);
            }
        });
        var matches = findCompletions(identifier, prefixes);
        var match = function(name) {
            return {
                name: name + ':',
                value: name + ':',
                meta: 'prefix'
            };
        };
        return matches.map(match);
    } else {
        return [];
    }
};

var completeFunction = function(identifier, pos, sctx){
    var names = [];
    var snippets = {};
    var functions = sctx.getFunctions();
    var uri = '';
    var prefix = '';
    var name = identifier;
    var idx = identifier.indexOf(':');
    var defaultNamespace = false;
    if(idx !== -1){
        prefix = identifier.substring(0, idx);
        name = identifier.substring(idx + 1);
        var ns = sctx.getNamespaceByPrefix(prefix);
        if(ns){
            uri = sctx.getNamespaceByPrefix(prefix).uri;
        }
    } else {
        defaultNamespace = true;
        uri = sctx.root.defaultFunctionNamespace;
    }
    Object.keys(functions).forEach(function(key){
        var fn = functions[key];
        var ns = key.substring(0, key.indexOf('#'));
        var name = key.substring(key.indexOf('#') + 1);
        name = name.substring(0, name.indexOf('#'));
        if(ns !== uri) {
            return;
        }
        if(!defaultNamespace){
            name = sctx.getNamespaces()[ns].prefix + ':' + name;
        }
        name += '(';
        var snippet = name;
        snippet += fn.params.map(function(param, index){
            return '${' + (index + 1) + ':\\' + param.split(' ')[0] + '}';
        }).join(', ');
        name += fn.params.join(', ');
        name += ')';
        snippet += ')';
        names.push(name);
        snippets[name] = snippet;
    });
    var matches = findCompletions(identifier, names);
    var match = function(name) {
        return {
            name: name,
            value: name,
            meta: 'function',
            priority: 4,
            identifierRegex: nameCharRegExp,
            snippet: snippets[name]
        };
    };
    return matches.map(match);
};

var completeVariable = function(identifier, pos, sctx){
    var uri = '';
    var prefix = '';
    var idx = identifier.indexOf(':');
    if(idx !== -1){
        prefix = identifier.substring(0, idx);
        uri = sctx.getNamespaceByPrefix(prefix).uri;
    }
    var decls = sctx.getVariables();
    var names = [];
    var types = {};
    Object.keys(decls).forEach(function(key){
        var i = key.indexOf('#');
        var ns = key.substring(0, i);
        var name = key.substring(i+1);
        if(ns !== ''){
            names.push(sctx.getPrefixByNamespace(ns) + ':' + name);
            types[sctx.getPrefixByNamespace(ns) + ':' + name] = decls[key].type;
        } else {
            names.push(name);
            types[name] = decls[key].type;
        }
    });
    
    var matches = findCompletions(identifier, names);
    var match = function(name) {
        return {
            name: '$' + name,
            value: '$' + name,
            meta: varDeclLabels[types[name]],
            priority: 4,
            identifierRegex: varCharRegExp
        };
    };
    return matches.map(match);
};

var completeExpr = function(line, pos, sctx){
    var identifier = retrievePrecedingIdentifier(line, pos.col, nameCharRegExp);
    var before = line.substring(0, pos.col - (identifier.length === 0 ? 0 : identifier.length));
    var isVar = before[before.length - 1] === '$';
    if(isVar) {
        return completeVariable(identifier, pos, sctx);
    } else if(identifier !== '') {
        return completeFunction(identifier, pos, sctx).concat(completePrefix(identifier, pos, sctx));
    } else {
        return completeVariable(identifier, pos, sctx).concat(completeFunction(identifier, pos, sctx)).concat(completePrefix(identifier, pos, sctx));
    }
};

var completeModuleUri = function(line, pos, sctx){
    var identifier = retrievePrecedingIdentifier(line, pos.col, uriRegex);
    var matches = findCompletions(identifier, sctx.getAvailableModuleNamespaces());
    var match = function(uri) {
        return {
            name: uri,
            value: uri,
            meta: 'module',
            priority: 4,
            identifierRegex: uriRegex
        };
    };
    return matches.map(match);
};

exports.complete = function(source, ast, rootSctx, pos){
    var line = source.split('\n')[pos.line];
    var node = TreeOps.findNode(ast, pos);
    var sctx = TreeOps.findNode(rootSctx, pos);
    sctx = sctx ? sctx : rootSctx;
    if(node && node.name === 'URILiteral' && node.getParent && node.getParent.name === 'ModuleImport'){
        return completeModuleUri(line, pos, sctx);
    } else {
        return completeExpr(line, pos, sctx);
    }
};

},
{"../tree_ops":11}],
7:[function(require,module,exports){
exports.StyleChecker = function (ast, source) {
    'use strict';

    var tab = '    ';
    var markers = [];
    
    this.getMarkers = function(){
        return markers;
    };

    this.WS = function(node) {
        var lines = node.value.split('\n');
        lines.forEach(function(line, index){
            var isFirst = index === 0;
            var isLast  = index === (lines.length - 1);

            if(/\r$/.test(line)) {
                markers.push({
                    pos: {
                        sl: node.pos.sl + index,
                        el: node.pos.sl + index,
                        sc: line.length - 1,
                        ec: line.length
                    },
                    type: 'warning',
                    level: 'warning',
                    message: '[SW01] Detected CRLF'
                });
            }
            
            var match = line.match(/\t+/);
            if(match !== null){
                markers.push({
                    pos: {
                        sl: node.pos.sl + index,
                        el: node.pos.sl + index,
                        sc: match.index,
                        ec: match.index + match[0].length
                    },
                    type: 'warning',
                    level: 'warning',
                    message: '[SW02] Tabs detected'
                });
            }

            if((!isFirst) && isLast){
                match = line.match(/^\ +/);
                if(match !== null) {
                    var mod = match[0].length % tab.length;
                    if(mod !== 0) {
                        markers.push({
                            pos: {
                                sl: node.pos.sl + index,
                                el: node.pos.sl + index,
                                sc: match.index,
                                ec: match.index + match[0].length
                            },
                            type: 'warning',
                            level: 'warning',
                            message: '[SW03] Unexcepted indentation of ' + match[0].length
                        });
                    }
                }
            }
        });
        return true;
    };
    
    this.visit = function (node, index) {
        var name = node.name;
        var skip = false;

        if (typeof this[name] === 'function') {
            skip = this[name](node, index) === true;
        }

        if (!skip) {
            this.visitChildren(node);
        }
    };

    this.visitChildren = function (node, handler) {
        for (var i = 0; i < node.children.length; i++) {
            var child = node.children[i];
            if (handler !== undefined && typeof handler[child.name] === 'function') {
                handler[child.name](child);
            } else {
                this.visit(child);
            }
        }
    };

    source.split('\n').forEach(function(line, index){
        var match = line.match(/\ +$/);
        if(match){
            markers.push({
                pos: {
                    sl: index,
                    el: index,
                    sc: match.index,
                    ec: match.index + match[0].length
                },
                type: 'warning',
                level: 'warning',
                message: '[SW04] Trailing whitespace'
            });
        }
    });
    this.visit(ast);
};
},
{}],
8:[function(require,module,exports){
exports.JSONParseTreeHandler = function (code) {
	'use strict';
    var toBeIndex = ['VarDecl', 'FunctionDecl'];
    var list = [
        'OrExpr', 'AndExpr', 'ComparisonExpr', 'StringConcatExpr', 'RangeExpr',
        'UnionExpr', 'IntersectExceptExpr', 'InstanceofExpr', 'TreatExpr', 'CastableExpr', 'CastExpr', 'UnaryExpr', 'ValueExpr',
        'FTContainsExpr', 'SimpleMapExpr', 'PathExpr', 'RelativePathExpr', 'PostfixExpr', 'StepExpr'
    ];

    var ast = null;
    var ptr = null;
    var remains = code;
    var cursor = 0;
    var lineCursor = 0;
    var line = 0;

    function createNode(name) {
        return {
            name: name,
            children: [],
            getParent: null,
            pos: {
                sl: 0,
                sc: 0,
                el: 0,
                ec: 0
            }
        };
    }

    function pushNode(name) { //begin
        var node = createNode(name);
        if (ast === null) {
            ast = node;
            ast.index = [];
            ptr = node;
        } else {
            node.getParent = ptr;
            ptr.children.push(node);
            ptr = ptr.children[ptr.children.length - 1];
        }
    }

    function popNode() {

        if (ptr.children.length > 0) {
            var s = ptr.children[0];
            var e = null;
            for (var i = ptr.children.length - 1; i >= 0; i--) {
                e = ptr.children[i];
                if (e.pos.el !== 0 || e.pos.ec !== 0) {
                    break;
                }
            }
            ptr.pos.sl = s.pos.sl;
            ptr.pos.sc = s.pos.sc;
            ptr.pos.el = e.pos.el;
            ptr.pos.ec = e.pos.ec;
        }
        if (ptr.name === 'FunctionName') {
            ptr.name = 'EQName';
        }
        if (ptr.name === 'EQName' && ptr.value === undefined) {
            ptr.value = ptr.children[0].value;
            ptr.children.pop();
        }
    
        if(toBeIndex.indexOf(ptr.name) !== -1) {
            ast.index.push(ptr);
        }
    
        if (ptr.getParent !== null) {
            ptr = ptr.getParent;
        } else {
        }
        if (ptr.children.length > 0) {
            var lastChild = ptr.children[ptr.children.length - 1];
            if (lastChild.children.length === 1 && list.indexOf(lastChild.name) !== -1) {
                ptr.children[ptr.children.length - 1] = lastChild.children[0];
            }
        }
    }

    this.closeParseTree = function () {
        while (ptr.getParent !== null) {
            popNode();
        }
        popNode();
    };

    this.peek = function () {
        return ptr;
    };

    this.getParseTree = function () {
        return ast;
    };

    this.reset = function () {}; //input

    this.startNonterminal = function (name, begin) {
        pushNode(name, begin);
    };

    this.endNonterminal = function () {//name, end
        popNode();
    };

    this.terminal = function (name, begin, end) {
        name = (name.substring(0, 1) === '\'' && name.substring(name.length - 1) === '\'') ? 'TOKEN' : name;
        pushNode(name, begin);
        setValue(ptr, begin, end);
        popNode();
    };

    this.whitespace = function (begin, end) {
        var name = 'WS';
        pushNode(name, begin);
        setValue(ptr, begin, end);
        popNode();
    };

    function setValue(node, begin, end) {

        var e = end - cursor;
        ptr.value = remains.substring(0, e);
        remains = remains.substring(e);
        cursor = end;

        var sl = line;
        var sc = lineCursor;
        var el = sl + ptr.value.split('\n').length - 1;
        var lastIdx = ptr.value.lastIndexOf('\n');
        var ec = lastIdx === -1 ? sc + ptr.value.length : ptr.value.substring(lastIdx + 1).length;

        line = el;
        lineCursor = ec;

        ptr.pos.sl = sl;
        ptr.pos.sc = sc;
        ptr.pos.el = el;
        ptr.pos.ec = ec;
    }
};
},
{}],
9:[function(require,module,exports){
                                                            var JSONiqParser = exports.JSONiqParser = function JSONiqParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
  var self = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var
      begin = b,
      end = e,
      state = s,
      offending = o,
      expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};

    this.getMessage = function()
    {
      return offending < 0 ? "lexical analysis failed" : "syntax error";
    };
  };

  function init(string, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = string;
    size = string.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? JSONiqParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = JSONiqParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [JSONiqParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var tokenSet = this.getExpectedTokenSet(e);
    var found = this.getOffendingToken(e);
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    var size = e.getEnd() - e.getBegin();
    return e.getMessage()
         + (found == null ? "" : ", found " + found)
         + "\nwhile expecting "
         + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
         + "\n"
         + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(278);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Module();
    shift(25);                      // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 170:                       // 'jsoniq'
      lookahead2W(168);             // S^WS | '#' | '(' | '(:' | 'encoding' | 'version'
      break;
    default:
      lk = l1;
    }
    if (lk == 64682                 // 'jsoniq' 'encoding'
     || lk == 137898)               // 'jsoniq' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(278);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    switch (l1)
    {
    case 185:                       // 'module'
      lookahead2W(146);             // S^WS | '#' | '(' | '(:' | 'namespace'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 95929:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    shift(170);                     // 'jsoniq'
    lookahead1W(120);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 126:                       // 'encoding'
      shift(126);                   // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      break;
    default:
      shift(269);                   // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      lookahead1W(113);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 126)                // 'encoding'
      {
        shift(126);                 // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(11);                  // StringLiteral
      }
    }
    lookahead1W(29);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(142);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    shift(185);                     // 'module'
    lookahead1W(64);                // S^WS | '(:' | 'namespace'
    shift(187);                     // 'namespace'
    lookahead1W(240);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_NCName();
    lookahead1W(30);                // S^WS | '(:' | '='
    shift(61);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(29);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(278);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(207);           // S^WS | '#' | '%' | '(' | '(:' | 'base-uri' | 'boundary-space' | 'collection' |
        break;
      case 155:                     // 'import'
        lookahead2W(169);           // S^WS | '#' | '(' | '(:' | 'module' | 'schema'
        break;
      default:
        lk = l1;
      }
      if (lk != 43117               // 'declare' 'base-uri'
       && lk != 44141               // 'declare' 'boundary-space'
       && lk != 50797               // 'declare' 'construction'
       && lk != 53869               // 'declare' 'copy-namespaces'
       && lk != 54893               // 'declare' 'decimal-format'
       && lk != 56429               // 'declare' 'default'
       && lk != 73325               // 'declare' 'ft-option'
       && lk != 94875               // 'import' 'module'
       && lk != 95853               // 'declare' 'namespace'
       && lk != 106093              // 'declare' 'ordering'
       && lk != 115821              // 'declare' 'revalidation'
       && lk != 117403)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(201);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
        break;
      default:
        lk = l1;
      }
      if (lk == 56429)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 95853:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 155:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 73325:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(29);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(278);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(202);           // S^WS | '#' | '%' | '(' | '(:' | 'collection' | 'context' | 'function' | 'index' |
        break;
      default:
        lk = l1;
      }
      if (lk != 17005               // 'declare' '%'
       && lk != 49261               // 'declare' 'collection'
       && lk != 52333               // 'declare' 'context'
       && lk != 75373               // 'declare' 'function'
       && lk != 80493               // 'declare' 'index'
       && lk != 83565               // 'declare' 'integrity'
       && lk != 104045              // 'declare' 'option'
       && lk != 134765              // 'declare' 'updating'
       && lk != 137325)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 109:                     // 'declare'
        lookahead2W(197);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 52333:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 104045:                  // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(29);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    shift(54);                      // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 109:                       // 'declare'
      lookahead2W(194);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
      break;
    default:
      lk = l1;
    }
    if (lk == 56429)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 44141:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 43117:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50797:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 106093:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 115821:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 53869:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(36);                // S^WS | '(:' | 'boundary-space'
    shift(86);                      // 'boundary-space'
    lookahead1W(137);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 218:                       // 'preserve'
      shift(218);                   // 'preserve'
      break;
    default:
      shift(246);                   // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shift(110);                     // 'default'
    lookahead1W(41);                // S^WS | '(:' | 'collation'
    shift(95);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    shiftT(109);                    // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shiftT(110);                    // 'default'
    lookahead1W(41);                // S^WS | '(:' | 'collation'
    shiftT(95);                     // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'base-uri'
    shift(84);                      // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'construction'
    shift(99);                      // 'construction'
    lookahead1W(137);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 246:                       // 'strip'
      shift(246);                   // 'strip'
      break;
    default:
      shift(218);                   // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(71);                // S^WS | '(:' | 'ordering'
    shift(207);                     // 'ordering'
    lookahead1W(135);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 206:                       // 'ordered'
      shift(206);                   // 'ordered'
      break;
    default:
      shift(262);                   // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shift(110);                     // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'order'
    shift(205);                     // 'order'
    lookahead1W(52);                // S^WS | '(:' | 'empty'
    shift(124);                     // 'empty'
    lookahead1W(125);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 149:                       // 'greatest'
      shift(149);                   // 'greatest'
      break;
    default:
      shift(176);                   // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    shiftT(109);                    // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shiftT(110);                    // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'order'
    shiftT(205);                    // 'order'
    lookahead1W(52);                // S^WS | '(:' | 'empty'
    shiftT(124);                    // 'empty'
    lookahead1W(125);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 149:                       // 'greatest'
      shiftT(149);                  // 'greatest'
      break;
    default:
      shiftT(176);                  // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(47);                // S^WS | '(:' | 'copy-namespaces'
    shift(105);                     // 'copy-namespaces'
    lookahead1W(132);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    shift(42);                      // ','
    lookahead1W(127);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 218:                       // 'preserve'
      shift(218);                   // 'preserve'
      break;
    default:
      shift(193);                   // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 159:                       // 'inherit'
      shift(159);                   // 'inherit'
      break;
    default:
      shift(192);                   // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(118);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 107:                       // 'decimal-format'
      shift(107);                   // 'decimal-format'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_EQName();
      break;
    default:
      shift(110);                   // 'default'
      lookahead1W(48);              // S^WS | '(:' | 'decimal-format'
      shift(107);                   // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(204);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
      if (l1 == 54)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(30);              // S^WS | '(:' | '='
      shift(61);                    // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 108:                       // 'decimal-separator'
      shift(108);                   // 'decimal-separator'
      break;
    case 151:                       // 'grouping-separator'
      shift(151);                   // 'grouping-separator'
      break;
    case 158:                       // 'infinity'
      shift(158);                   // 'infinity'
      break;
    case 182:                       // 'minus-sign'
      shift(182);                   // 'minus-sign'
      break;
    case 68:                        // 'NaN'
      shift(68);                    // 'NaN'
      break;
    case 213:                       // 'percent'
      shift(213);                   // 'percent'
      break;
    case 212:                       // 'per-mille'
      shift(212);                   // 'per-mille'
      break;
    case 280:                       // 'zero-digit'
      shift(280);                   // 'zero-digit'
      break;
    case 117:                       // 'digit'
      shift(117);                   // 'digit'
      break;
    default:
      shift(211);                   // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 155:                       // 'import'
      lookahead2W(130);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 117403:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    shift(155);                     // 'import'
    lookahead1W(76);                // S^WS | '(:' | 'schema'
    shift(229);                     // 'schema'
    lookahead1W(141);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 7)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(112);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 82)                   // 'at'
    {
      shift(82);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      for (;;)
      {
        lookahead1W(107);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 187:                       // 'namespace'
      shift(187);                   // 'namespace'
      lookahead1W(240);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_NCName();
      lookahead1W(30);              // S^WS | '(:' | '='
      shift(61);                    // '='
      break;
    default:
      shift(110);                   // 'default'
      lookahead1W(50);              // S^WS | '(:' | 'element'
      shift(122);                   // 'element'
      lookahead1W(64);              // S^WS | '(:' | 'namespace'
      shift(187);                   // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    shift(155);                     // 'import'
    lookahead1W(63);                // S^WS | '(:' | 'module'
    shift(185);                     // 'module'
    lookahead1W(93);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 187)                  // 'namespace'
    {
      shift(187);                   // 'namespace'
      lookahead1W(240);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_NCName();
      lookahead1W(30);              // S^WS | '(:' | '='
      shift(61);                    // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(112);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 82)                   // 'at'
    {
      shift(82);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      for (;;)
      {
        lookahead1W(107);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(64);                // S^WS | '(:' | 'namespace'
    shift(187);                     // 'namespace'
    lookahead1W(240);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_NCName();
    lookahead1W(30);                // S^WS | '(:' | '='
    shift(61);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shift(110);                     // 'default'
    lookahead1W(119);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 122:                       // 'element'
      shift(122);                   // 'element'
      break;
    default:
      shift(147);                   // 'function'
    }
    lookahead1W(64);                // S^WS | '(:' | 'namespace'
    shift(187);                     // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    shiftT(109);                    // 'declare'
    lookahead1W(49);                // S^WS | '(:' | 'default'
    shiftT(110);                    // 'default'
    lookahead1W(119);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 122:                       // 'element'
      shiftT(122);                  // 'element'
      break;
    default:
      shiftT(147);                  // 'function'
    }
    lookahead1W(64);                // S^WS | '(:' | 'namespace'
    shiftT(187);                    // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(55);                // S^WS | '(:' | 'ft-option'
    shift(143);                     // 'ft-option'
    lookahead1W(84);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    shift(109);                     // 'declare'
    for (;;)
    {
      lookahead1W(192);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
      if (l1 != 33                  // '%'
       && l1 != 263)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 263:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 268:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 147:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 96:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 157:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    shift(263);                     // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    shift(33);                      // '%'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(193);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(190);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(190);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
        whitespace();
        parse_Literal();
      }
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    shiftT(33);                     // '%'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_EQName();
    lookahead1W(193);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(190);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
      try_Literal();
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(190);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:' |
        try_Literal();
      }
      shiftT(38);                   // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    shift(268);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(157);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(110);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 53:                        // ':='
      shift(53);                    // ':='
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(134);                   // 'external'
      lookahead1W(108);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        shift(53);                  // ':='
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'context'
    shift(102);                     // 'context'
    lookahead1W(58);                // S^WS | '(:' | 'item'
    shift(167);                     // 'item'
    lookahead1W(157);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 80)                   // 'as'
    {
      shift(80);                    // 'as'
      lookahead1W(254);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_ItemType();
    }
    lookahead1W(110);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 53:                        // ':='
      shift(53);                    // ':='
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(134);                   // 'external'
      lookahead1W(108);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        shift(53);                  // ':='
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(105);             // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(105);             // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(153);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    shiftT(31);                     // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_EQName();
    lookahead1W(153);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    shift(281);                     // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    shiftT(281);                    // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(69);                // S^WS | '(:' | 'option'
    shift(203);                     // 'option'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(195);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
      if (l1 == 224)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(195);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
      if (l1 == 224)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 139:                       // 'for'
      lookahead2W(151);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16011:                     // 'for' '$'
      parse_ForClause();
      break;
    case 177:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 139:                       // 'for'
      lookahead2W(151);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16011:                     // 'for' '$'
      try_ForClause();
      break;
    case 177:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 139:                       // 'for'
    case 177:                       // 'let'
      parse_InitialClause();
      break;
    case 272:                       // 'where'
      parse_WhereClause();
      break;
    case 150:                       // 'group'
      parse_GroupByClause();
      break;
    case 106:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 139:                       // 'for'
    case 177:                       // 'let'
      try_InitialClause();
      break;
    case 272:                       // 'where'
      try_WhereClause();
      break;
    case 150:                       // 'group'
      try_GroupByClause();
      break;
    case 106:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    shift(139);                     // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    shiftT(139);                    // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(182);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(173);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 73)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(160);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 82)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(126);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 232)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shift(156);                     // 'in'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    shiftT(31);                     // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(182);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(173);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 73)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(160);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 82)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(126);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 232)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shiftT(156);                    // 'in'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    shift(73);                      // 'allowing'
    lookahead1W(52);                // S^WS | '(:' | 'empty'
    shift(124);                     // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    shiftT(73);                     // 'allowing'
    lookahead1W(52);                // S^WS | '(:' | 'empty'
    shiftT(124);                    // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    shift(82);                      // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    shiftT(82);                     // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    shift(232);                     // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    shiftT(232);                    // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    shift(177);                     // 'let'
    lookahead1W(100);               // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(100);             // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    shiftT(177);                    // 'let'
    lookahead1W(100);               // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(100);             // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      shift(31);                    // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_VarName();
      lookahead1W(109);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 80)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(28);                // S^WS | '(:' | ':='
    shift(53);                      // ':='
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      shiftT(31);                   // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_VarName();
      lookahead1W(109);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 80)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(28);                // S^WS | '(:' | ':='
    shiftT(53);                     // ':='
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    shift(139);                     // 'for'
    lookahead1W(139);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 257:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    shiftT(139);                    // 'for'
    lookahead1W(139);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 257:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    shift(257);                     // 'tumbling'
    lookahead1W(88);                // S^WS | '(:' | 'window'
    shift(275);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(114);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shift(156);                     // 'in'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 127                   // 'end'
     || l1 == 202)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    shiftT(257);                    // 'tumbling'
    lookahead1W(88);                // S^WS | '(:' | 'window'
    shiftT(275);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(114);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shiftT(156);                    // 'in'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 127                   // 'end'
     || l1 == 202)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    shift(239);                     // 'sliding'
    lookahead1W(88);                // S^WS | '(:' | 'window'
    shift(275);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(114);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shift(156);                     // 'in'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    shiftT(239);                    // 'sliding'
    lookahead1W(88);                // S^WS | '(:' | 'window'
    shiftT(275);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(114);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shiftT(156);                    // 'in'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    shift(242);                     // 'start'
    lookahead1W(181);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(86);                // S^WS | '(:' | 'when'
    shift(271);                     // 'when'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    shiftT(242);                    // 'start'
    lookahead1W(181);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(86);                // S^WS | '(:' | 'when'
    shiftT(271);                    // 'when'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 202)                  // 'only'
    {
      shift(202);                   // 'only'
    }
    lookahead1W(53);                // S^WS | '(:' | 'end'
    shift(127);                     // 'end'
    lookahead1W(181);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(86);                // S^WS | '(:' | 'when'
    shift(271);                     // 'when'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 202)                  // 'only'
    {
      shiftT(202);                  // 'only'
    }
    lookahead1W(53);                // S^WS | '(:' | 'end'
    shiftT(127);                    // 'end'
    lookahead1W(181);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(86);                // S^WS | '(:' | 'when'
    shiftT(271);                    // 'when'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(174);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 82)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(163);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 219)                  // 'previous'
    {
      shift(219);                   // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(131);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 190)                  // 'next'
    {
      shift(190);                   // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_CurrentItem();
    }
    lookahead1W(174);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 82)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(163);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 219)                  // 'previous'
    {
      shiftT(219);                  // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_PreviousItem();
    }
    lookahead1W(131);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 190)                  // 'next'
    {
      shiftT(190);                  // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    shift(106);                     // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    shiftT(106);                    // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    shift(272);                     // 'where'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    shiftT(272);                    // 'where'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    shift(150);                     // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    shift(88);                      // 'by'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    shiftT(150);                    // 'group'
    lookahead1W(37);                // S^WS | '(:' | 'by'
    shiftT(88);                     // 'by'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(198);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(198);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    default:
      lk = l1;
    }
    if (lk == 3103                  // '$' EQName^Token
     || lk == 36383                 // '$' 'after'
     || lk == 37407                 // '$' 'allowing'
     || lk == 37919                 // '$' 'ancestor'
     || lk == 38431                 // '$' 'ancestor-or-self'
     || lk == 38943                 // '$' 'and'
     || lk == 39967                 // '$' 'append'
     || lk == 40479                 // '$' 'array'
     || lk == 40991                 // '$' 'as'
     || lk == 41503                 // '$' 'ascending'
     || lk == 42015                 // '$' 'at'
     || lk == 42527                 // '$' 'attribute'
     || lk == 43039                 // '$' 'base-uri'
     || lk == 43551                 // '$' 'before'
     || lk == 44063                 // '$' 'boundary-space'
     || lk == 44575                 // '$' 'break'
     || lk == 45599                 // '$' 'case'
     || lk == 46111                 // '$' 'cast'
     || lk == 46623                 // '$' 'castable'
     || lk == 47135                 // '$' 'catch'
     || lk == 48159                 // '$' 'child'
     || lk == 48671                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 50207                 // '$' 'constraint'
     || lk == 50719                 // '$' 'construction'
     || lk == 52255                 // '$' 'context'
     || lk == 52767                 // '$' 'continue'
     || lk == 53279                 // '$' 'copy'
     || lk == 53791                 // '$' 'copy-namespaces'
     || lk == 54303                 // '$' 'count'
     || lk == 54815                 // '$' 'decimal-format'
     || lk == 55839                 // '$' 'declare'
     || lk == 56351                 // '$' 'default'
     || lk == 56863                 // '$' 'delete'
     || lk == 57375                 // '$' 'descendant'
     || lk == 57887                 // '$' 'descendant-or-self'
     || lk == 58399                 // '$' 'descending'
     || lk == 60959                 // '$' 'div'
     || lk == 61471                 // '$' 'document'
     || lk == 61983                 // '$' 'document-node'
     || lk == 62495                 // '$' 'element'
     || lk == 63007                 // '$' 'else'
     || lk == 63519                 // '$' 'empty'
     || lk == 64031                 // '$' 'empty-sequence'
     || lk == 64543                 // '$' 'encoding'
     || lk == 65055                 // '$' 'end'
     || lk == 66079                 // '$' 'eq'
     || lk == 66591                 // '$' 'every'
     || lk == 67615                 // '$' 'except'
     || lk == 68127                 // '$' 'exit'
     || lk == 68639                 // '$' 'external'
     || lk == 69151                 // '$' 'false'
     || lk == 69663                 // '$' 'first'
     || lk == 70175                 // '$' 'following'
     || lk == 70687                 // '$' 'following-sibling'
     || lk == 71199                 // '$' 'for'
     || lk == 72735                 // '$' 'from'
     || lk == 73247                 // '$' 'ft-option'
     || lk == 75295                 // '$' 'function'
     || lk == 75807                 // '$' 'ge'
     || lk == 76831                 // '$' 'group'
     || lk == 77855                 // '$' 'gt'
     || lk == 78367                 // '$' 'idiv'
     || lk == 78879                 // '$' 'if'
     || lk == 79391                 // '$' 'import'
     || lk == 79903                 // '$' 'in'
     || lk == 80415                 // '$' 'index'
     || lk == 82463                 // '$' 'insert'
     || lk == 82975                 // '$' 'instance'
     || lk == 83487                 // '$' 'integrity'
     || lk == 83999                 // '$' 'intersect'
     || lk == 84511                 // '$' 'into'
     || lk == 85023                 // '$' 'is'
     || lk == 85535                 // '$' 'item'
     || lk == 86047                 // '$' 'json'
     || lk == 86559                 // '$' 'json-item'
     || lk == 87071                 // '$' 'jsoniq'
     || lk == 88607                 // '$' 'last'
     || lk == 89119                 // '$' 'lax'
     || lk == 89631                 // '$' 'le'
     || lk == 90655                 // '$' 'let'
     || lk == 91679                 // '$' 'loop'
     || lk == 92703                 // '$' 'lt'
     || lk == 93727                 // '$' 'mod'
     || lk == 94239                 // '$' 'modify'
     || lk == 94751                 // '$' 'module'
     || lk == 95775                 // '$' 'namespace'
     || lk == 96287                 // '$' 'namespace-node'
     || lk == 96799                 // '$' 'ne'
     || lk == 99359                 // '$' 'node'
     || lk == 99871                 // '$' 'nodes'
     || lk == 100895                // '$' 'null'
     || lk == 101407                // '$' 'object'
     || lk == 103455                // '$' 'only'
     || lk == 103967                // '$' 'option'
     || lk == 104479                // '$' 'or'
     || lk == 104991                // '$' 'order'
     || lk == 105503                // '$' 'ordered'
     || lk == 106015                // '$' 'ordering'
     || lk == 107551                // '$' 'parent'
     || lk == 110623                // '$' 'preceding'
     || lk == 111135                // '$' 'preceding-sibling'
     || lk == 112671                // '$' 'processing-instruction'
     || lk == 113695                // '$' 'rename'
     || lk == 114207                // '$' 'replace'
     || lk == 114719                // '$' 'return'
     || lk == 115231                // '$' 'returning'
     || lk == 115743                // '$' 'revalidation'
     || lk == 116767                // '$' 'satisfies'
     || lk == 117279                // '$' 'schema'
     || lk == 117791                // '$' 'schema-attribute'
     || lk == 118303                // '$' 'schema-element'
     || lk == 118815                // '$' 'score'
     || lk == 119327                // '$' 'select'
     || lk == 119839                // '$' 'self'
     || lk == 122399                // '$' 'sliding'
     || lk == 122911                // '$' 'some'
     || lk == 123423                // '$' 'stable'
     || lk == 123935                // '$' 'start'
     || lk == 125471                // '$' 'strict'
     || lk == 126495                // '$' 'structured-item'
     || lk == 127007                // '$' 'switch'
     || lk == 127519                // '$' 'text'
     || lk == 129567                // '$' 'to'
     || lk == 130079                // '$' 'treat'
     || lk == 130591                // '$' 'true'
     || lk == 131103                // '$' 'try'
     || lk == 131615                // '$' 'tumbling'
     || lk == 132127                // '$' 'type'
     || lk == 132639                // '$' 'typeswitch'
     || lk == 133151                // '$' 'union'
     || lk == 134175                // '$' 'unordered'
     || lk == 134687                // '$' 'updating'
     || lk == 136223                // '$' 'validate'
     || lk == 136735                // '$' 'value'
     || lk == 137247                // '$' 'variable'
     || lk == 137759                // '$' 'version'
     || lk == 139295                // '$' 'where'
     || lk == 139807                // '$' 'while'
     || lk == 141343)               // '$' 'with'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(206);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
          if (l1 == 53              // ':='
           || l1 == 80)             // 'as'
          {
            if (l1 == 80)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(28);        // S^WS | '(:' | ':='
            shiftT(53);             // ':='
            lookahead1W(267);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
            try_ExprSingle();
          }
          if (l1 == 95)             // 'collation'
          {
            shiftT(95);             // 'collation'
            lookahead1W(15);        // URILiteral | S^WS | '(:'
            shiftT(7);              // URILiteral
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_GroupingVariable();
      lookahead1W(206);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
      if (l1 == 53                  // ':='
       || l1 == 80)                 // 'as'
      {
        if (l1 == 80)               // 'as'
        {
          whitespace();
          parse_TypeDeclaration();
        }
        lookahead1W(28);            // S^WS | '(:' | ':='
        shift(53);                  // ':='
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        whitespace();
        parse_ExprSingle();
      }
      if (l1 == 95)                 // 'collation'
      {
        shift(95);                  // 'collation'
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    default:
      lk = l1;
    }
    if (lk == 3103                  // '$' EQName^Token
     || lk == 36383                 // '$' 'after'
     || lk == 37407                 // '$' 'allowing'
     || lk == 37919                 // '$' 'ancestor'
     || lk == 38431                 // '$' 'ancestor-or-self'
     || lk == 38943                 // '$' 'and'
     || lk == 39967                 // '$' 'append'
     || lk == 40479                 // '$' 'array'
     || lk == 40991                 // '$' 'as'
     || lk == 41503                 // '$' 'ascending'
     || lk == 42015                 // '$' 'at'
     || lk == 42527                 // '$' 'attribute'
     || lk == 43039                 // '$' 'base-uri'
     || lk == 43551                 // '$' 'before'
     || lk == 44063                 // '$' 'boundary-space'
     || lk == 44575                 // '$' 'break'
     || lk == 45599                 // '$' 'case'
     || lk == 46111                 // '$' 'cast'
     || lk == 46623                 // '$' 'castable'
     || lk == 47135                 // '$' 'catch'
     || lk == 48159                 // '$' 'child'
     || lk == 48671                 // '$' 'collation'
     || lk == 49695                 // '$' 'comment'
     || lk == 50207                 // '$' 'constraint'
     || lk == 50719                 // '$' 'construction'
     || lk == 52255                 // '$' 'context'
     || lk == 52767                 // '$' 'continue'
     || lk == 53279                 // '$' 'copy'
     || lk == 53791                 // '$' 'copy-namespaces'
     || lk == 54303                 // '$' 'count'
     || lk == 54815                 // '$' 'decimal-format'
     || lk == 55839                 // '$' 'declare'
     || lk == 56351                 // '$' 'default'
     || lk == 56863                 // '$' 'delete'
     || lk == 57375                 // '$' 'descendant'
     || lk == 57887                 // '$' 'descendant-or-self'
     || lk == 58399                 // '$' 'descending'
     || lk == 60959                 // '$' 'div'
     || lk == 61471                 // '$' 'document'
     || lk == 61983                 // '$' 'document-node'
     || lk == 62495                 // '$' 'element'
     || lk == 63007                 // '$' 'else'
     || lk == 63519                 // '$' 'empty'
     || lk == 64031                 // '$' 'empty-sequence'
     || lk == 64543                 // '$' 'encoding'
     || lk == 65055                 // '$' 'end'
     || lk == 66079                 // '$' 'eq'
     || lk == 66591                 // '$' 'every'
     || lk == 67615                 // '$' 'except'
     || lk == 68127                 // '$' 'exit'
     || lk == 68639                 // '$' 'external'
     || lk == 69151                 // '$' 'false'
     || lk == 69663                 // '$' 'first'
     || lk == 70175                 // '$' 'following'
     || lk == 70687                 // '$' 'following-sibling'
     || lk == 71199                 // '$' 'for'
     || lk == 72735                 // '$' 'from'
     || lk == 73247                 // '$' 'ft-option'
     || lk == 75295                 // '$' 'function'
     || lk == 75807                 // '$' 'ge'
     || lk == 76831                 // '$' 'group'
     || lk == 77855                 // '$' 'gt'
     || lk == 78367                 // '$' 'idiv'
     || lk == 78879                 // '$' 'if'
     || lk == 79391                 // '$' 'import'
     || lk == 79903                 // '$' 'in'
     || lk == 80415                 // '$' 'index'
     || lk == 82463                 // '$' 'insert'
     || lk == 82975                 // '$' 'instance'
     || lk == 83487                 // '$' 'integrity'
     || lk == 83999                 // '$' 'intersect'
     || lk == 84511                 // '$' 'into'
     || lk == 85023                 // '$' 'is'
     || lk == 85535                 // '$' 'item'
     || lk == 86047                 // '$' 'json'
     || lk == 86559                 // '$' 'json-item'
     || lk == 87071                 // '$' 'jsoniq'
     || lk == 88607                 // '$' 'last'
     || lk == 89119                 // '$' 'lax'
     || lk == 89631                 // '$' 'le'
     || lk == 90655                 // '$' 'let'
     || lk == 91679                 // '$' 'loop'
     || lk == 92703                 // '$' 'lt'
     || lk == 93727                 // '$' 'mod'
     || lk == 94239                 // '$' 'modify'
     || lk == 94751                 // '$' 'module'
     || lk == 95775                 // '$' 'namespace'
     || lk == 96287                 // '$' 'namespace-node'
     || lk == 96799                 // '$' 'ne'
     || lk == 99359                 // '$' 'node'
     || lk == 99871                 // '$' 'nodes'
     || lk == 100895                // '$' 'null'
     || lk == 101407                // '$' 'object'
     || lk == 103455                // '$' 'only'
     || lk == 103967                // '$' 'option'
     || lk == 104479                // '$' 'or'
     || lk == 104991                // '$' 'order'
     || lk == 105503                // '$' 'ordered'
     || lk == 106015                // '$' 'ordering'
     || lk == 107551                // '$' 'parent'
     || lk == 110623                // '$' 'preceding'
     || lk == 111135                // '$' 'preceding-sibling'
     || lk == 112671                // '$' 'processing-instruction'
     || lk == 113695                // '$' 'rename'
     || lk == 114207                // '$' 'replace'
     || lk == 114719                // '$' 'return'
     || lk == 115231                // '$' 'returning'
     || lk == 115743                // '$' 'revalidation'
     || lk == 116767                // '$' 'satisfies'
     || lk == 117279                // '$' 'schema'
     || lk == 117791                // '$' 'schema-attribute'
     || lk == 118303                // '$' 'schema-element'
     || lk == 118815                // '$' 'score'
     || lk == 119327                // '$' 'select'
     || lk == 119839                // '$' 'self'
     || lk == 122399                // '$' 'sliding'
     || lk == 122911                // '$' 'some'
     || lk == 123423                // '$' 'stable'
     || lk == 123935                // '$' 'start'
     || lk == 125471                // '$' 'strict'
     || lk == 126495                // '$' 'structured-item'
     || lk == 127007                // '$' 'switch'
     || lk == 127519                // '$' 'text'
     || lk == 129567                // '$' 'to'
     || lk == 130079                // '$' 'treat'
     || lk == 130591                // '$' 'true'
     || lk == 131103                // '$' 'try'
     || lk == 131615                // '$' 'tumbling'
     || lk == 132127                // '$' 'type'
     || lk == 132639                // '$' 'typeswitch'
     || lk == 133151                // '$' 'union'
     || lk == 134175                // '$' 'unordered'
     || lk == 134687                // '$' 'updating'
     || lk == 136223                // '$' 'validate'
     || lk == 136735                // '$' 'value'
     || lk == 137247                // '$' 'variable'
     || lk == 137759                // '$' 'version'
     || lk == 139295                // '$' 'where'
     || lk == 139807                // '$' 'while'
     || lk == 141343)               // '$' 'with'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(206);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
          if (l1 == 53              // ':='
           || l1 == 80)             // 'as'
          {
            if (l1 == 80)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(28);        // S^WS | '(:' | ':='
            shiftT(53);             // ':='
            lookahead1W(267);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
            try_ExprSingle();
          }
          if (l1 == 95)             // 'collation'
          {
            shiftT(95);             // 'collation'
            lookahead1W(15);        // URILiteral | S^WS | '(:'
            shiftT(7);              // URILiteral
          }
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_GroupingVariable();
      lookahead1W(206);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
      if (l1 == 53                  // ':='
       || l1 == 80)                 // 'as'
      {
        if (l1 == 80)               // 'as'
        {
          try_TypeDeclaration();
        }
        lookahead1W(28);            // S^WS | '(:' | ':='
        shiftT(53);                 // ':='
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        try_ExprSingle();
      }
      if (l1 == 95)                 // 'collation'
      {
        shiftT(95);                 // 'collation'
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shiftT(7);                  // URILiteral
      }
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    shiftT(31);                     // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 205:                       // 'order'
      shift(205);                   // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      shift(88);                    // 'by'
      break;
    default:
      shift(241);                   // 'stable'
      lookahead1W(70);              // S^WS | '(:' | 'order'
      shift(205);                   // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      shift(88);                    // 'by'
    }
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 205:                       // 'order'
      shiftT(205);                  // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      shiftT(88);                   // 'by'
      break;
    default:
      shiftT(241);                  // 'stable'
      lookahead1W(70);              // S^WS | '(:' | 'order'
      shiftT(205);                  // 'order'
      lookahead1W(37);              // S^WS | '(:' | 'by'
      shiftT(88);                   // 'by'
    }
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(198);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(198);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 81                    // 'ascending'
     || l1 == 114)                  // 'descending'
    {
      switch (l1)
      {
      case 81:                      // 'ascending'
        shift(81);                  // 'ascending'
        break;
      default:
        shift(114);                 // 'descending'
      }
    }
    lookahead1W(203);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
    if (l1 == 124)                  // 'empty'
    {
      shift(124);                   // 'empty'
      lookahead1W(125);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 149:                     // 'greatest'
        shift(149);                 // 'greatest'
        break;
      default:
        shift(176);                 // 'least'
      }
    }
    lookahead1W(199);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
    if (l1 == 95)                   // 'collation'
    {
      shift(95);                    // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 81                    // 'ascending'
     || l1 == 114)                  // 'descending'
    {
      switch (l1)
      {
      case 81:                      // 'ascending'
        shiftT(81);                 // 'ascending'
        break;
      default:
        shiftT(114);                // 'descending'
      }
    }
    lookahead1W(203);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
    if (l1 == 124)                  // 'empty'
    {
      shiftT(124);                  // 'empty'
      lookahead1W(125);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 149:                     // 'greatest'
        shiftT(149);                // 'greatest'
        break;
      default:
        shiftT(176);                // 'least'
      }
    }
    lookahead1W(199);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
    if (l1 == 95)                   // 'collation'
    {
      shiftT(95);                   // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    shift(224);                     // 'return'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    shiftT(224);                    // 'return'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 240:                       // 'some'
      shift(240);                   // 'some'
      break;
    default:
      shift(130);                   // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_QuantifiedVarDecl();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_QuantifiedVarDecl();
    }
    shift(228);                     // 'satisfies'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 240:                       // 'some'
      shiftT(240);                  // 'some'
      break;
    default:
      shiftT(130);                  // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_QuantifiedVarDecl();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_QuantifiedVarDecl();
    }
    shiftT(228);                    // 'satisfies'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_QuantifiedVarDecl()
  {
    eventHandler.startNonterminal("QuantifiedVarDecl", e0);
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(114);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shift(156);                     // 'in'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedVarDecl", e0);
  }

  function try_QuantifiedVarDecl()
  {
    shiftT(31);                     // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(114);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(56);                // S^WS | '(:' | 'in'
    shiftT(156);                    // 'in'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    shift(248);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(110);                     // 'default'
    lookahead1W(73);                // S^WS | '(:' | 'return'
    shift(224);                     // 'return'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    shiftT(248);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(110);                    // 'default'
    lookahead1W(73);                // S^WS | '(:' | 'return'
    shiftT(224);                    // 'return'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      shift(89);                    // 'case'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(224);                     // 'return'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      shiftT(89);                   // 'case'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(224);                    // 'return'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    shift(259);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(110);                     // 'default'
    lookahead1W(99);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_VarName();
    }
    lookahead1W(73);                // S^WS | '(:' | 'return'
    shift(224);                     // 'return'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    shiftT(259);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(110);                    // 'default'
    lookahead1W(99);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_VarName();
    }
    lookahead1W(73);                // S^WS | '(:' | 'return'
    shiftT(224);                    // 'return'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    shift(89);                      // 'case'
    lookahead1W(258);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
    }
    lookahead1W(254);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_SequenceTypeUnion();
    shift(224);                     // 'return'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    shiftT(89);                     // 'case'
    lookahead1W(258);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
    }
    lookahead1W(254);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_SequenceTypeUnion();
    shiftT(224);                    // 'return'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(138);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 284)                // '|'
      {
        break;
      }
      shift(284);                   // '|'
      lookahead1W(254);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(138);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 284)                // '|'
      {
        break;
      }
      shiftT(284);                  // '|'
      lookahead1W(254);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    shift(154);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(80);                // S^WS | '(:' | 'then'
    shift(250);                     // 'then'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    shift(123);                     // 'else'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    shiftT(154);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(80);                // S^WS | '(:' | 'then'
    shiftT(250);                    // 'then'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
    shiftT(123);                    // 'else'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(208);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
      if (l1 != 92)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(208);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
      if (l1 != 92)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    shift(256);                     // 'try'
    lookahead1W(90);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_TryTargetExpr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    shiftT(256);                    // 'try'
    lookahead1W(90);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_TryTargetExpr();
    shiftT(287);                    // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    shift(92);                      // 'catch'
    lookahead1W(249);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_CatchErrorList();
    shift(281);                     // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    shiftT(92);                     // 'catch'
    lookahead1W(249);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_CatchErrorList();
    shiftT(281);                    // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(140);             // S^WS | '(:' | '{' | '|'
      if (l1 != 284)                // '|'
      {
        break;
      }
      shift(284);                   // '|'
      lookahead1W(249);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(140);             // S^WS | '(:' | '{' | '|'
      if (l1 != 284)                // '|'
      {
        break;
      }
      shiftT(284);                  // '|'
      lookahead1W(249);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 204)                // 'or'
      {
        break;
      }
      shift(204);                   // 'or'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 204)                // 'or'
      {
        break;
      }
      shiftT(204);                  // 'or'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_NotExpr();
    for (;;)
    {
      if (l1 != 76)                 // 'and'
      {
        break;
      }
      shift(76);                    // 'and'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_NotExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_NotExpr();
    for (;;)
    {
      if (l1 != 76)                 // 'and'
      {
        break;
      }
      shiftT(76);                   // 'and'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_NotExpr();
    }
  }

  function parse_NotExpr()
  {
    eventHandler.startNonterminal("NotExpr", e0);
    if (l1 == 196)                  // 'not'
    {
      shift(196);                   // 'not'
    }
    lookahead1W(266);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ComparisonExpr();
    eventHandler.endNonterminal("NotExpr", e0);
  }

  function try_NotExpr()
  {
    if (l1 == 196)                  // 'not'
    {
      shiftT(196);                  // 'not'
    }
    lookahead1W(266);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ComparisonExpr();
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 55                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 62                    // '>'
     || l1 == 63                    // '>='
     || l1 == 64                    // '>>'
     || l1 == 129                   // 'eq'
     || l1 == 148                   // 'ge'
     || l1 == 152                   // 'gt'
     || l1 == 166                   // 'is'
     || l1 == 175                   // 'le'
     || l1 == 181                   // 'lt'
     || l1 == 189)                  // 'ne'
    {
      switch (l1)
      {
      case 129:                     // 'eq'
      case 148:                     // 'ge'
      case 152:                     // 'gt'
      case 175:                     // 'le'
      case 181:                     // 'lt'
      case 189:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 58:                      // '<<'
      case 64:                      // '>>'
      case 166:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 55                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 62                    // '>'
     || l1 == 63                    // '>='
     || l1 == 64                    // '>>'
     || l1 == 129                   // 'eq'
     || l1 == 148                   // 'ge'
     || l1 == 152                   // 'gt'
     || l1 == 166                   // 'is'
     || l1 == 175                   // 'le'
     || l1 == 181                   // 'lt'
     || l1 == 189)                  // 'ne'
    {
      switch (l1)
      {
      case 129:                     // 'eq'
      case 148:                     // 'ge'
      case 152:                     // 'gt'
      case 175:                     // 'le'
      case 181:                     // 'lt'
      case 189:                     // 'ne'
        try_ValueComp();
        break;
      case 58:                      // '<<'
      case 64:                      // '>>'
      case 166:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 100)                  // 'contains'
    {
      shift(100);                   // 'contains'
      lookahead1W(79);              // S^WS | '(:' | 'text'
      shift(249);                   // 'text'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 277)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 100)                  // 'contains'
    {
      shiftT(100);                  // 'contains'
      lookahead1W(79);              // S^WS | '(:' | 'text'
      shiftT(249);                  // 'text'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 277)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 285)                // '||'
      {
        break;
      }
      shift(285);                   // '||'
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 285)                // '||'
      {
        break;
      }
      shiftT(285);                  // '||'
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 253)                  // 'to'
    {
      shift(253);                   // 'to'
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 253)                  // 'to'
    {
      shiftT(253);                  // 'to'
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        shift(41);                  // '+'
        break;
      default:
        shift(43);                  // '-'
      }
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        shiftT(41);                 // '+'
        break;
      default:
        shiftT(43);                 // '-'
      }
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 119                 // 'div'
       && l1 != 153                 // 'idiv'
       && l1 != 183)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        shift(39);                  // '*'
        break;
      case 119:                     // 'div'
        shift(119);                 // 'div'
        break;
      case 153:                     // 'idiv'
        shift(153);                 // 'idiv'
        break;
      default:
        shift(183);                 // 'mod'
      }
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 119                 // 'div'
       && l1 != 153                 // 'idiv'
       && l1 != 183)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        shiftT(39);                 // '*'
        break;
      case 119:                     // 'div'
        shiftT(119);                // 'div'
        break;
      case 153:                     // 'idiv'
        shiftT(153);                // 'idiv'
        break;
      default:
        shiftT(183);                // 'mod'
      }
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 260                 // 'union'
       && l1 != 284)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 260:                     // 'union'
        shift(260);                 // 'union'
        break;
      default:
        shift(284);                 // '|'
      }
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 260                 // 'union'
       && l1 != 284)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 260:                     // 'union'
        shiftT(260);                // 'union'
        break;
      default:
        shiftT(284);                // '|'
      }
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
      if (l1 != 132                 // 'except'
       && l1 != 164)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 164:                     // 'intersect'
        shift(164);                 // 'intersect'
        break;
      default:
        shift(132);                 // 'except'
      }
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
      if (l1 != 132                 // 'except'
       && l1 != 164)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 164:                     // 'intersect'
        shiftT(164);                // 'intersect'
        break;
      default:
        shiftT(132);                // 'except'
      }
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 162)                  // 'instance'
    {
      shift(162);                   // 'instance'
      lookahead1W(67);              // S^WS | '(:' | 'of'
      shift(200);                   // 'of'
      lookahead1W(254);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 162)                  // 'instance'
    {
      shiftT(162);                  // 'instance'
      lookahead1W(67);              // S^WS | '(:' | 'of'
      shiftT(200);                  // 'of'
      lookahead1W(254);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 254)                  // 'treat'
    {
      shift(254);                   // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
      lookahead1W(254);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 254)                  // 'treat'
    {
      shiftT(254);                  // 'treat'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
      lookahead1W(254);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 91)                   // 'castable'
    {
      shift(91);                    // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 91)                   // 'castable'
    {
      shiftT(91);                   // 'castable'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 90)                   // 'cast'
    {
      shift(90);                    // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 90)                   // 'cast'
    {
      shiftT(90);                   // 'cast'
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        shift(43);                  // '-'
        break;
      default:
        shift(41);                  // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        shiftT(43);                 // '-'
        break;
      default:
        shiftT(41);                 // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 266:                       // 'validate'
      lookahead2W(188);             // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 89354:                     // 'validate' 'lax'
    case 125706:                    // 'validate' 'strict'
    case 132362:                    // 'validate' 'type'
    case 144138:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 36:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 266:                       // 'validate'
      lookahead2W(188);             // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 89354:                     // 'validate' 'lax'
    case 125706:                    // 'validate' 'strict'
    case 132362:                    // 'validate' 'type'
    case 144138:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 36:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      shift(26);                    // '!'
      lookahead1W(263);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      shiftT(26);                   // '!'
      lookahead1W(263);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 61:                        // '='
      shift(61);                    // '='
      break;
    case 27:                        // '!='
      shift(27);                    // '!='
      break;
    case 55:                        // '<'
      shift(55);                    // '<'
      break;
    case 59:                        // '<='
      shift(59);                    // '<='
      break;
    case 62:                        // '>'
      shift(62);                    // '>'
      break;
    default:
      shift(63);                    // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 61:                        // '='
      shiftT(61);                   // '='
      break;
    case 27:                        // '!='
      shiftT(27);                   // '!='
      break;
    case 55:                        // '<'
      shiftT(55);                   // '<'
      break;
    case 59:                        // '<='
      shiftT(59);                   // '<='
      break;
    case 62:                        // '>'
      shiftT(62);                   // '>'
      break;
    default:
      shiftT(63);                   // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 129:                       // 'eq'
      shift(129);                   // 'eq'
      break;
    case 189:                       // 'ne'
      shift(189);                   // 'ne'
      break;
    case 181:                       // 'lt'
      shift(181);                   // 'lt'
      break;
    case 175:                       // 'le'
      shift(175);                   // 'le'
      break;
    case 152:                       // 'gt'
      shift(152);                   // 'gt'
      break;
    default:
      shift(148);                   // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 129:                       // 'eq'
      shiftT(129);                  // 'eq'
      break;
    case 189:                       // 'ne'
      shiftT(189);                  // 'ne'
      break;
    case 181:                       // 'lt'
      shiftT(181);                  // 'lt'
      break;
    case 175:                       // 'le'
      shiftT(175);                  // 'le'
      break;
    case 152:                       // 'gt'
      shiftT(152);                  // 'gt'
      break;
    default:
      shiftT(148);                  // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 166:                       // 'is'
      shift(166);                   // 'is'
      break;
    case 58:                        // '<<'
      shift(58);                    // '<<'
      break;
    default:
      shift(64);                    // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 166:                       // 'is'
      shiftT(166);                  // 'is'
      break;
    case 58:                        // '<<'
      shiftT(58);                   // '<<'
      break;
    default:
      shiftT(64);                   // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    shift(266);                     // 'validate'
    lookahead1W(175);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 281)                  // '{'
    {
      switch (l1)
      {
      case 258:                     // 'type'
        shift(258);                 // 'type'
        lookahead1W(246);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(90);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    shiftT(266);                    // 'validate'
    lookahead1W(175);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 281)                  // '{'
    {
      switch (l1)
      {
      case 258:                     // 'type'
        shiftT(258);                // 'type'
        lookahead1W(246);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(90);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 174:                       // 'lax'
      shift(174);                   // 'lax'
      break;
    default:
      shift(245);                   // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 174:                       // 'lax'
      shiftT(174);                  // 'lax'
      break;
    default:
      shiftT(245);                  // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(104);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shift(281);                     // '{'
    lookahead1W(275);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 287)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    shift(287);                     // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(104);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shiftT(281);                    // '{'
    lookahead1W(275);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 287)                  // '}'
    {
      try_Expr();
    }
    shiftT(287);                    // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    shift(36);                      // '(#'
    lookahead1(243);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
      lookahead1(0);                // PragmaContents
      shift(1);                     // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shift(30);                      // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    shiftT(36);                     // '(#'
    lookahead1(243);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
      lookahead1(0);                // PragmaContents
      shiftT(1);                    // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shiftT(30);                     // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 47:                        // '/'
      shift(47);                    // '/'
      lookahead1W(289);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 41:                      // '+'
      case 42:                      // ','
      case 43:                      // '-'
      case 50:                      // ':'
      case 54:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 88:                      // 'by'
      case 100:                     // 'contains'
      case 209:                     // 'paragraphs'
      case 237:                     // 'sentences'
      case 252:                     // 'times'
      case 279:                     // 'words'
      case 284:                     // '|'
      case 285:                     // '||'
      case 286:                     // '|}'
      case 287:                     // '}'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 48:                        // '//'
      shift(48);                    // '//'
      lookahead1W(260);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 47:                        // '/'
      shiftT(47);                   // '/'
      lookahead1W(289);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 41:                      // '+'
      case 42:                      // ','
      case 43:                      // '-'
      case 50:                      // ':'
      case 54:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '>'
      case 63:                      // '>='
      case 64:                      // '>>'
      case 70:                      // ']'
      case 88:                      // 'by'
      case 100:                     // 'contains'
      case 209:                     // 'paragraphs'
      case 237:                     // 'sentences'
      case 252:                     // 'times'
      case 279:                     // 'words'
      case 284:                     // '|'
      case 285:                     // '||'
      case 286:                     // '|}'
      case 287:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 48:                        // '//'
      shiftT(48);                   // '//'
      lookahead1W(260);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_PostfixExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(265);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 38                  // ')'
       && lk != 39                  // '*'
       && lk != 41                  // '+'
       && lk != 42                  // ','
       && lk != 43                  // '-'
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 50                  // ':'
       && lk != 54                  // ';'
       && lk != 55                  // '<'
       && lk != 58                  // '<<'
       && lk != 59                  // '<='
       && lk != 61                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 71                  // 'after'
       && lk != 76                  // 'and'
       && lk != 80                  // 'as'
       && lk != 81                  // 'ascending'
       && lk != 82                  // 'at'
       && lk != 85                  // 'before'
       && lk != 88                  // 'by'
       && lk != 89                  // 'case'
       && lk != 90                  // 'cast'
       && lk != 91                  // 'castable'
       && lk != 95                  // 'collation'
       && lk != 100                 // 'contains'
       && lk != 106                 // 'count'
       && lk != 110                 // 'default'
       && lk != 114                 // 'descending'
       && lk != 119                 // 'div'
       && lk != 123                 // 'else'
       && lk != 124                 // 'empty'
       && lk != 127                 // 'end'
       && lk != 129                 // 'eq'
       && lk != 132                 // 'except'
       && lk != 139                 // 'for'
       && lk != 148                 // 'ge'
       && lk != 150                 // 'group'
       && lk != 152                 // 'gt'
       && lk != 153                 // 'idiv'
       && lk != 162                 // 'instance'
       && lk != 164                 // 'intersect'
       && lk != 165                 // 'into'
       && lk != 166                 // 'is'
       && lk != 175                 // 'le'
       && lk != 177                 // 'let'
       && lk != 181                 // 'lt'
       && lk != 183                 // 'mod'
       && lk != 184                 // 'modify'
       && lk != 189                 // 'ne'
       && lk != 202                 // 'only'
       && lk != 204                 // 'or'
       && lk != 205                 // 'order'
       && lk != 209                 // 'paragraphs'
       && lk != 224                 // 'return'
       && lk != 228                 // 'satisfies'
       && lk != 237                 // 'sentences'
       && lk != 241                 // 'stable'
       && lk != 242                 // 'start'
       && lk != 252                 // 'times'
       && lk != 253                 // 'to'
       && lk != 254                 // 'treat'
       && lk != 260                 // 'union'
       && lk != 272                 // 'where'
       && lk != 276                 // 'with'
       && lk != 279                 // 'words'
       && lk != 284                 // '|'
       && lk != 285                 // '||'
       && lk != 286                 // '|}'
       && lk != 287                 // '}'
       && lk != 2586                // '!' Wildcard
       && lk != 23578               // '!' '..'
       && lk != 24090               // '!' '/'
       && lk != 24602               // '!' '//'
       && lk != 34330)              // '!' '@'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 47:                // '/'
              shiftT(47);           // '/'
              break;
            case 48:                // '//'
              shiftT(48);           // '//'
              break;
            default:
              shiftT(26);           // '!'
            }
            lookahead1W(264);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 2586                // '!' Wildcard
       && lk != 23578               // '!' '..'
       && lk != 34330)              // '!' '@'
      {
        break;
      }
      switch (l1)
      {
      case 47:                      // '/'
        shift(47);                  // '/'
        break;
      case 48:                      // '//'
        shift(48);                  // '//'
        break;
      default:
        shift(26);                  // '!'
      }
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_PostfixExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(265);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 38                  // ')'
       && lk != 39                  // '*'
       && lk != 41                  // '+'
       && lk != 42                  // ','
       && lk != 43                  // '-'
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 50                  // ':'
       && lk != 54                  // ';'
       && lk != 55                  // '<'
       && lk != 58                  // '<<'
       && lk != 59                  // '<='
       && lk != 61                  // '='
       && lk != 62                  // '>'
       && lk != 63                  // '>='
       && lk != 64                  // '>>'
       && lk != 70                  // ']'
       && lk != 71                  // 'after'
       && lk != 76                  // 'and'
       && lk != 80                  // 'as'
       && lk != 81                  // 'ascending'
       && lk != 82                  // 'at'
       && lk != 85                  // 'before'
       && lk != 88                  // 'by'
       && lk != 89                  // 'case'
       && lk != 90                  // 'cast'
       && lk != 91                  // 'castable'
       && lk != 95                  // 'collation'
       && lk != 100                 // 'contains'
       && lk != 106                 // 'count'
       && lk != 110                 // 'default'
       && lk != 114                 // 'descending'
       && lk != 119                 // 'div'
       && lk != 123                 // 'else'
       && lk != 124                 // 'empty'
       && lk != 127                 // 'end'
       && lk != 129                 // 'eq'
       && lk != 132                 // 'except'
       && lk != 139                 // 'for'
       && lk != 148                 // 'ge'
       && lk != 150                 // 'group'
       && lk != 152                 // 'gt'
       && lk != 153                 // 'idiv'
       && lk != 162                 // 'instance'
       && lk != 164                 // 'intersect'
       && lk != 165                 // 'into'
       && lk != 166                 // 'is'
       && lk != 175                 // 'le'
       && lk != 177                 // 'let'
       && lk != 181                 // 'lt'
       && lk != 183                 // 'mod'
       && lk != 184                 // 'modify'
       && lk != 189                 // 'ne'
       && lk != 202                 // 'only'
       && lk != 204                 // 'or'
       && lk != 205                 // 'order'
       && lk != 209                 // 'paragraphs'
       && lk != 224                 // 'return'
       && lk != 228                 // 'satisfies'
       && lk != 237                 // 'sentences'
       && lk != 241                 // 'stable'
       && lk != 242                 // 'start'
       && lk != 252                 // 'times'
       && lk != 253                 // 'to'
       && lk != 254                 // 'treat'
       && lk != 260                 // 'union'
       && lk != 272                 // 'where'
       && lk != 276                 // 'with'
       && lk != 279                 // 'words'
       && lk != 284                 // '|'
       && lk != 285                 // '||'
       && lk != 286                 // '|}'
       && lk != 287                 // '}'
       && lk != 2586                // '!' Wildcard
       && lk != 23578               // '!' '..'
       && lk != 24090               // '!' '/'
       && lk != 24602               // '!' '//'
       && lk != 34330)              // '!' '@'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 47:                // '/'
              shiftT(47);           // '/'
              break;
            case 48:                // '//'
              shiftT(48);           // '//'
              break;
            default:
              shiftT(26);           // '!'
            }
            lookahead1W(264);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
            try_StepExpr();
            memoize(3, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 2586                // '!' Wildcard
       && lk != 23578               // '!' '..'
       && lk != 34330)              // '!' '@'
      {
        break;
      }
      switch (l1)
      {
      case 47:                      // '/'
        shiftT(47);                 // '/'
        break;
      case 48:                      // '//'
        shiftT(48);                 // '//'
        break;
      default:
        shiftT(26);                 // '!'
      }
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(288);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
      break;
    case 122:                       // 'element'
      lookahead2W(287);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
      break;
    case 187:                       // 'namespace'
    case 220:                       // 'processing-instruction'
      lookahead2W(285);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
      break;
    case 97:                        // 'comment'
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 249:                       // 'text'
    case 262:                       // 'unordered'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 79:                        // 'array'
    case 125:                       // 'empty-sequence'
    case 154:                       // 'if'
    case 167:                       // 'item'
    case 169:                       // 'json-item'
    case 247:                       // 'structured-item'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 234:                       // 'self'
      lookahead2W(238);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 121:                       // 'document-node'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 147:                       // 'function'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 161:                       // 'insert'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 188:                       // 'namespace-node'
    case 189:                       // 'ne'
    case 194:                       // 'node'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 222:                       // 'rename'
    case 223:                       // 'replace'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 239:                       // 'sliding'
    case 240:                       // 'some'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    default:
      lk = l1;
    }
    if (lk == 12935                 // 'false' EOF
     || lk == 12997                 // 'null' EOF
     || lk == 13055                 // 'true' EOF
     || lk == 13447                 // 'false' '!'
     || lk == 13509                 // 'null' '!'
     || lk == 13567                 // 'true' '!'
     || lk == 13959                 // 'false' '!='
     || lk == 14021                 // 'null' '!='
     || lk == 14079                 // 'true' '!='
     || lk == 19591                 // 'false' ')'
     || lk == 19653                 // 'null' ')'
     || lk == 19711                 // 'true' ')'
     || lk == 20103                 // 'false' '*'
     || lk == 20165                 // 'null' '*'
     || lk == 20223                 // 'true' '*'
     || lk == 21127                 // 'false' '+'
     || lk == 21189                 // 'null' '+'
     || lk == 21247                 // 'true' '+'
     || lk == 21639                 // 'false' ','
     || lk == 21701                 // 'null' ','
     || lk == 21759                 // 'true' ','
     || lk == 22151                 // 'false' '-'
     || lk == 22213                 // 'null' '-'
     || lk == 22271                 // 'true' '-'
     || lk == 24199                 // 'false' '/'
     || lk == 24261                 // 'null' '/'
     || lk == 24319                 // 'true' '/'
     || lk == 24711                 // 'false' '//'
     || lk == 24773                 // 'null' '//'
     || lk == 24831                 // 'true' '//'
     || lk == 25735                 // 'false' ':'
     || lk == 25797                 // 'null' ':'
     || lk == 25855                 // 'true' ':'
     || lk == 27783                 // 'false' ';'
     || lk == 27845                 // 'null' ';'
     || lk == 27903                 // 'true' ';'
     || lk == 28295                 // 'false' '<'
     || lk == 28357                 // 'null' '<'
     || lk == 28415                 // 'true' '<'
     || lk == 29831                 // 'false' '<<'
     || lk == 29893                 // 'null' '<<'
     || lk == 29951                 // 'true' '<<'
     || lk == 30343                 // 'false' '<='
     || lk == 30405                 // 'null' '<='
     || lk == 30463                 // 'true' '<='
     || lk == 31367                 // 'false' '='
     || lk == 31429                 // 'null' '='
     || lk == 31487                 // 'true' '='
     || lk == 31879                 // 'false' '>'
     || lk == 31941                 // 'null' '>'
     || lk == 31999                 // 'true' '>'
     || lk == 32391                 // 'false' '>='
     || lk == 32453                 // 'null' '>='
     || lk == 32511                 // 'true' '>='
     || lk == 32903                 // 'false' '>>'
     || lk == 32965                 // 'null' '>>'
     || lk == 33023                 // 'true' '>>'
     || lk == 35463                 // 'false' '['
     || lk == 35525                 // 'null' '['
     || lk == 35583                 // 'true' '['
     || lk == 35975                 // 'false' ']'
     || lk == 36037                 // 'null' ']'
     || lk == 36095                 // 'true' ']'
     || lk == 36435                 // 'attribute' 'after'
     || lk == 36474                 // 'element' 'after'
     || lk == 36487                 // 'false' 'after'
     || lk == 36539                 // 'namespace' 'after'
     || lk == 36549                 // 'null' 'after'
     || lk == 36572                 // 'processing-instruction' 'after'
     || lk == 36607                 // 'true' 'after'
     || lk == 38995                 // 'attribute' 'and'
     || lk == 39034                 // 'element' 'and'
     || lk == 39047                 // 'false' 'and'
     || lk == 39099                 // 'namespace' 'and'
     || lk == 39109                 // 'null' 'and'
     || lk == 39132                 // 'processing-instruction' 'and'
     || lk == 39167                 // 'true' 'and'
     || lk == 41043                 // 'attribute' 'as'
     || lk == 41082                 // 'element' 'as'
     || lk == 41095                 // 'false' 'as'
     || lk == 41147                 // 'namespace' 'as'
     || lk == 41157                 // 'null' 'as'
     || lk == 41180                 // 'processing-instruction' 'as'
     || lk == 41215                 // 'true' 'as'
     || lk == 41555                 // 'attribute' 'ascending'
     || lk == 41594                 // 'element' 'ascending'
     || lk == 41607                 // 'false' 'ascending'
     || lk == 41659                 // 'namespace' 'ascending'
     || lk == 41669                 // 'null' 'ascending'
     || lk == 41692                 // 'processing-instruction' 'ascending'
     || lk == 41727                 // 'true' 'ascending'
     || lk == 42067                 // 'attribute' 'at'
     || lk == 42106                 // 'element' 'at'
     || lk == 42119                 // 'false' 'at'
     || lk == 42171                 // 'namespace' 'at'
     || lk == 42181                 // 'null' 'at'
     || lk == 42204                 // 'processing-instruction' 'at'
     || lk == 42239                 // 'true' 'at'
     || lk == 43603                 // 'attribute' 'before'
     || lk == 43642                 // 'element' 'before'
     || lk == 43655                 // 'false' 'before'
     || lk == 43707                 // 'namespace' 'before'
     || lk == 43717                 // 'null' 'before'
     || lk == 43740                 // 'processing-instruction' 'before'
     || lk == 43775                 // 'true' 'before'
     || lk == 45191                 // 'false' 'by'
     || lk == 45253                 // 'null' 'by'
     || lk == 45311                 // 'true' 'by'
     || lk == 45651                 // 'attribute' 'case'
     || lk == 45690                 // 'element' 'case'
     || lk == 45703                 // 'false' 'case'
     || lk == 45755                 // 'namespace' 'case'
     || lk == 45765                 // 'null' 'case'
     || lk == 45788                 // 'processing-instruction' 'case'
     || lk == 45823                 // 'true' 'case'
     || lk == 46163                 // 'attribute' 'cast'
     || lk == 46202                 // 'element' 'cast'
     || lk == 46215                 // 'false' 'cast'
     || lk == 46267                 // 'namespace' 'cast'
     || lk == 46277                 // 'null' 'cast'
     || lk == 46300                 // 'processing-instruction' 'cast'
     || lk == 46335                 // 'true' 'cast'
     || lk == 46675                 // 'attribute' 'castable'
     || lk == 46714                 // 'element' 'castable'
     || lk == 46727                 // 'false' 'castable'
     || lk == 46779                 // 'namespace' 'castable'
     || lk == 46789                 // 'null' 'castable'
     || lk == 46812                 // 'processing-instruction' 'castable'
     || lk == 46847                 // 'true' 'castable'
     || lk == 48723                 // 'attribute' 'collation'
     || lk == 48762                 // 'element' 'collation'
     || lk == 48775                 // 'false' 'collation'
     || lk == 48827                 // 'namespace' 'collation'
     || lk == 48837                 // 'null' 'collation'
     || lk == 48860                 // 'processing-instruction' 'collation'
     || lk == 48895                 // 'true' 'collation'
     || lk == 51335                 // 'false' 'contains'
     || lk == 51397                 // 'null' 'contains'
     || lk == 51455                 // 'true' 'contains'
     || lk == 54355                 // 'attribute' 'count'
     || lk == 54394                 // 'element' 'count'
     || lk == 54407                 // 'false' 'count'
     || lk == 54459                 // 'namespace' 'count'
     || lk == 54469                 // 'null' 'count'
     || lk == 54492                 // 'processing-instruction' 'count'
     || lk == 54527                 // 'true' 'count'
     || lk == 56403                 // 'attribute' 'default'
     || lk == 56442                 // 'element' 'default'
     || lk == 56455                 // 'false' 'default'
     || lk == 56507                 // 'namespace' 'default'
     || lk == 56517                 // 'null' 'default'
     || lk == 56540                 // 'processing-instruction' 'default'
     || lk == 56575                 // 'true' 'default'
     || lk == 58451                 // 'attribute' 'descending'
     || lk == 58490                 // 'element' 'descending'
     || lk == 58503                 // 'false' 'descending'
     || lk == 58555                 // 'namespace' 'descending'
     || lk == 58565                 // 'null' 'descending'
     || lk == 58588                 // 'processing-instruction' 'descending'
     || lk == 58623                 // 'true' 'descending'
     || lk == 61011                 // 'attribute' 'div'
     || lk == 61050                 // 'element' 'div'
     || lk == 61063                 // 'false' 'div'
     || lk == 61115                 // 'namespace' 'div'
     || lk == 61125                 // 'null' 'div'
     || lk == 61148                 // 'processing-instruction' 'div'
     || lk == 61183                 // 'true' 'div'
     || lk == 63059                 // 'attribute' 'else'
     || lk == 63098                 // 'element' 'else'
     || lk == 63111                 // 'false' 'else'
     || lk == 63163                 // 'namespace' 'else'
     || lk == 63173                 // 'null' 'else'
     || lk == 63196                 // 'processing-instruction' 'else'
     || lk == 63231                 // 'true' 'else'
     || lk == 63571                 // 'attribute' 'empty'
     || lk == 63610                 // 'element' 'empty'
     || lk == 63623                 // 'false' 'empty'
     || lk == 63675                 // 'namespace' 'empty'
     || lk == 63685                 // 'null' 'empty'
     || lk == 63708                 // 'processing-instruction' 'empty'
     || lk == 63743                 // 'true' 'empty'
     || lk == 65107                 // 'attribute' 'end'
     || lk == 65146                 // 'element' 'end'
     || lk == 65159                 // 'false' 'end'
     || lk == 65211                 // 'namespace' 'end'
     || lk == 65221                 // 'null' 'end'
     || lk == 65244                 // 'processing-instruction' 'end'
     || lk == 65279                 // 'true' 'end'
     || lk == 66131                 // 'attribute' 'eq'
     || lk == 66170                 // 'element' 'eq'
     || lk == 66183                 // 'false' 'eq'
     || lk == 66235                 // 'namespace' 'eq'
     || lk == 66245                 // 'null' 'eq'
     || lk == 66268                 // 'processing-instruction' 'eq'
     || lk == 66303                 // 'true' 'eq'
     || lk == 67667                 // 'attribute' 'except'
     || lk == 67706                 // 'element' 'except'
     || lk == 67719                 // 'false' 'except'
     || lk == 67771                 // 'namespace' 'except'
     || lk == 67781                 // 'null' 'except'
     || lk == 67804                 // 'processing-instruction' 'except'
     || lk == 67839                 // 'true' 'except'
     || lk == 71251                 // 'attribute' 'for'
     || lk == 71290                 // 'element' 'for'
     || lk == 71303                 // 'false' 'for'
     || lk == 71355                 // 'namespace' 'for'
     || lk == 71365                 // 'null' 'for'
     || lk == 71388                 // 'processing-instruction' 'for'
     || lk == 71423                 // 'true' 'for'
     || lk == 75859                 // 'attribute' 'ge'
     || lk == 75898                 // 'element' 'ge'
     || lk == 75911                 // 'false' 'ge'
     || lk == 75963                 // 'namespace' 'ge'
     || lk == 75973                 // 'null' 'ge'
     || lk == 75996                 // 'processing-instruction' 'ge'
     || lk == 76031                 // 'true' 'ge'
     || lk == 76883                 // 'attribute' 'group'
     || lk == 76922                 // 'element' 'group'
     || lk == 76935                 // 'false' 'group'
     || lk == 76987                 // 'namespace' 'group'
     || lk == 76997                 // 'null' 'group'
     || lk == 77020                 // 'processing-instruction' 'group'
     || lk == 77055                 // 'true' 'group'
     || lk == 77907                 // 'attribute' 'gt'
     || lk == 77946                 // 'element' 'gt'
     || lk == 77959                 // 'false' 'gt'
     || lk == 78011                 // 'namespace' 'gt'
     || lk == 78021                 // 'null' 'gt'
     || lk == 78044                 // 'processing-instruction' 'gt'
     || lk == 78079                 // 'true' 'gt'
     || lk == 78419                 // 'attribute' 'idiv'
     || lk == 78458                 // 'element' 'idiv'
     || lk == 78471                 // 'false' 'idiv'
     || lk == 78523                 // 'namespace' 'idiv'
     || lk == 78533                 // 'null' 'idiv'
     || lk == 78556                 // 'processing-instruction' 'idiv'
     || lk == 78591                 // 'true' 'idiv'
     || lk == 83027                 // 'attribute' 'instance'
     || lk == 83066                 // 'element' 'instance'
     || lk == 83079                 // 'false' 'instance'
     || lk == 83131                 // 'namespace' 'instance'
     || lk == 83141                 // 'null' 'instance'
     || lk == 83164                 // 'processing-instruction' 'instance'
     || lk == 83199                 // 'true' 'instance'
     || lk == 84051                 // 'attribute' 'intersect'
     || lk == 84090                 // 'element' 'intersect'
     || lk == 84103                 // 'false' 'intersect'
     || lk == 84155                 // 'namespace' 'intersect'
     || lk == 84165                 // 'null' 'intersect'
     || lk == 84188                 // 'processing-instruction' 'intersect'
     || lk == 84223                 // 'true' 'intersect'
     || lk == 84563                 // 'attribute' 'into'
     || lk == 84602                 // 'element' 'into'
     || lk == 84615                 // 'false' 'into'
     || lk == 84667                 // 'namespace' 'into'
     || lk == 84677                 // 'null' 'into'
     || lk == 84700                 // 'processing-instruction' 'into'
     || lk == 84735                 // 'true' 'into'
     || lk == 85075                 // 'attribute' 'is'
     || lk == 85114                 // 'element' 'is'
     || lk == 85127                 // 'false' 'is'
     || lk == 85179                 // 'namespace' 'is'
     || lk == 85189                 // 'null' 'is'
     || lk == 85212                 // 'processing-instruction' 'is'
     || lk == 85247                 // 'true' 'is'
     || lk == 89683                 // 'attribute' 'le'
     || lk == 89722                 // 'element' 'le'
     || lk == 89735                 // 'false' 'le'
     || lk == 89787                 // 'namespace' 'le'
     || lk == 89797                 // 'null' 'le'
     || lk == 89820                 // 'processing-instruction' 'le'
     || lk == 89855                 // 'true' 'le'
     || lk == 90707                 // 'attribute' 'let'
     || lk == 90746                 // 'element' 'let'
     || lk == 90759                 // 'false' 'let'
     || lk == 90811                 // 'namespace' 'let'
     || lk == 90821                 // 'null' 'let'
     || lk == 90844                 // 'processing-instruction' 'let'
     || lk == 90879                 // 'true' 'let'
     || lk == 92755                 // 'attribute' 'lt'
     || lk == 92794                 // 'element' 'lt'
     || lk == 92807                 // 'false' 'lt'
     || lk == 92859                 // 'namespace' 'lt'
     || lk == 92869                 // 'null' 'lt'
     || lk == 92892                 // 'processing-instruction' 'lt'
     || lk == 92927                 // 'true' 'lt'
     || lk == 93779                 // 'attribute' 'mod'
     || lk == 93818                 // 'element' 'mod'
     || lk == 93831                 // 'false' 'mod'
     || lk == 93883                 // 'namespace' 'mod'
     || lk == 93893                 // 'null' 'mod'
     || lk == 93916                 // 'processing-instruction' 'mod'
     || lk == 93951                 // 'true' 'mod'
     || lk == 94291                 // 'attribute' 'modify'
     || lk == 94330                 // 'element' 'modify'
     || lk == 94343                 // 'false' 'modify'
     || lk == 94395                 // 'namespace' 'modify'
     || lk == 94405                 // 'null' 'modify'
     || lk == 94428                 // 'processing-instruction' 'modify'
     || lk == 94463                 // 'true' 'modify'
     || lk == 96851                 // 'attribute' 'ne'
     || lk == 96890                 // 'element' 'ne'
     || lk == 96903                 // 'false' 'ne'
     || lk == 96955                 // 'namespace' 'ne'
     || lk == 96965                 // 'null' 'ne'
     || lk == 96988                 // 'processing-instruction' 'ne'
     || lk == 97023                 // 'true' 'ne'
     || lk == 103507                // 'attribute' 'only'
     || lk == 103546                // 'element' 'only'
     || lk == 103559                // 'false' 'only'
     || lk == 103611                // 'namespace' 'only'
     || lk == 103621                // 'null' 'only'
     || lk == 103644                // 'processing-instruction' 'only'
     || lk == 103679                // 'true' 'only'
     || lk == 104531                // 'attribute' 'or'
     || lk == 104570                // 'element' 'or'
     || lk == 104583                // 'false' 'or'
     || lk == 104635                // 'namespace' 'or'
     || lk == 104645                // 'null' 'or'
     || lk == 104668                // 'processing-instruction' 'or'
     || lk == 104703                // 'true' 'or'
     || lk == 105043                // 'attribute' 'order'
     || lk == 105082                // 'element' 'order'
     || lk == 105095                // 'false' 'order'
     || lk == 105147                // 'namespace' 'order'
     || lk == 105157                // 'null' 'order'
     || lk == 105180                // 'processing-instruction' 'order'
     || lk == 105215                // 'true' 'order'
     || lk == 107143                // 'false' 'paragraphs'
     || lk == 107205                // 'null' 'paragraphs'
     || lk == 107263                // 'true' 'paragraphs'
     || lk == 114771                // 'attribute' 'return'
     || lk == 114810                // 'element' 'return'
     || lk == 114823                // 'false' 'return'
     || lk == 114875                // 'namespace' 'return'
     || lk == 114885                // 'null' 'return'
     || lk == 114908                // 'processing-instruction' 'return'
     || lk == 114943                // 'true' 'return'
     || lk == 116819                // 'attribute' 'satisfies'
     || lk == 116858                // 'element' 'satisfies'
     || lk == 116871                // 'false' 'satisfies'
     || lk == 116923                // 'namespace' 'satisfies'
     || lk == 116933                // 'null' 'satisfies'
     || lk == 116956                // 'processing-instruction' 'satisfies'
     || lk == 116991                // 'true' 'satisfies'
     || lk == 121479                // 'false' 'sentences'
     || lk == 121541                // 'null' 'sentences'
     || lk == 121599                // 'true' 'sentences'
     || lk == 123475                // 'attribute' 'stable'
     || lk == 123514                // 'element' 'stable'
     || lk == 123527                // 'false' 'stable'
     || lk == 123579                // 'namespace' 'stable'
     || lk == 123589                // 'null' 'stable'
     || lk == 123612                // 'processing-instruction' 'stable'
     || lk == 123647                // 'true' 'stable'
     || lk == 123987                // 'attribute' 'start'
     || lk == 124026                // 'element' 'start'
     || lk == 124039                // 'false' 'start'
     || lk == 124091                // 'namespace' 'start'
     || lk == 124101                // 'null' 'start'
     || lk == 124124                // 'processing-instruction' 'start'
     || lk == 124159                // 'true' 'start'
     || lk == 129159                // 'false' 'times'
     || lk == 129221                // 'null' 'times'
     || lk == 129279                // 'true' 'times'
     || lk == 129619                // 'attribute' 'to'
     || lk == 129658                // 'element' 'to'
     || lk == 129671                // 'false' 'to'
     || lk == 129723                // 'namespace' 'to'
     || lk == 129733                // 'null' 'to'
     || lk == 129756                // 'processing-instruction' 'to'
     || lk == 129791                // 'true' 'to'
     || lk == 130131                // 'attribute' 'treat'
     || lk == 130170                // 'element' 'treat'
     || lk == 130183                // 'false' 'treat'
     || lk == 130235                // 'namespace' 'treat'
     || lk == 130245                // 'null' 'treat'
     || lk == 130268                // 'processing-instruction' 'treat'
     || lk == 130303                // 'true' 'treat'
     || lk == 133203                // 'attribute' 'union'
     || lk == 133242                // 'element' 'union'
     || lk == 133255                // 'false' 'union'
     || lk == 133307                // 'namespace' 'union'
     || lk == 133317                // 'null' 'union'
     || lk == 133340                // 'processing-instruction' 'union'
     || lk == 133375                // 'true' 'union'
     || lk == 139347                // 'attribute' 'where'
     || lk == 139386                // 'element' 'where'
     || lk == 139399                // 'false' 'where'
     || lk == 139451                // 'namespace' 'where'
     || lk == 139461                // 'null' 'where'
     || lk == 139484                // 'processing-instruction' 'where'
     || lk == 139519                // 'true' 'where'
     || lk == 141395                // 'attribute' 'with'
     || lk == 141434                // 'element' 'with'
     || lk == 141447                // 'false' 'with'
     || lk == 141499                // 'namespace' 'with'
     || lk == 141509                // 'null' 'with'
     || lk == 141532                // 'processing-instruction' 'with'
     || lk == 141567                // 'true' 'with'
     || lk == 142983                // 'false' 'words'
     || lk == 143045                // 'null' 'words'
     || lk == 143103                // 'true' 'words'
     || lk == 145543                // 'false' '|'
     || lk == 145605                // 'null' '|'
     || lk == 145663                // 'true' '|'
     || lk == 146055                // 'false' '||'
     || lk == 146117                // 'null' '||'
     || lk == 146175                // 'true' '||'
     || lk == 146567                // 'false' '|}'
     || lk == 146629                // 'null' '|}'
     || lk == 146687                // 'true' '|}'
     || lk == 147079                // 'false' '}'
     || lk == 147141                // 'null' '}'
     || lk == 147199)               // 'true' '}'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '$$'
    case 33:                        // '%'
    case 35:                        // '('
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 69:                        // '['
    case 281:                       // '{'
    case 283:                       // '{|'
    case 3155:                      // 'attribute' EQName^Token
    case 3194:                      // 'element' EQName^Token
    case 9915:                      // 'namespace' NCName^Token
    case 9948:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14927:                     // 'array' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14931:                     // 'attribute' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14969:                     // 'document-node' '#'
    case 14970:                     // 'element' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14973:                     // 'empty-sequence' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'false' '#'
    case 14984:                     // 'first' '#'
    case 14985:                     // 'following' '#'
    case 14986:                     // 'following-sibling' '#'
    case 14987:                     // 'for' '#'
    case 14990:                     // 'from' '#'
    case 14991:                     // 'ft-option' '#'
    case 14995:                     // 'function' '#'
    case 14996:                     // 'ge' '#'
    case 14998:                     // 'group' '#'
    case 15000:                     // 'gt' '#'
    case 15001:                     // 'idiv' '#'
    case 15002:                     // 'if' '#'
    case 15003:                     // 'import' '#'
    case 15004:                     // 'in' '#'
    case 15005:                     // 'index' '#'
    case 15009:                     // 'insert' '#'
    case 15010:                     // 'instance' '#'
    case 15011:                     // 'integrity' '#'
    case 15012:                     // 'intersect' '#'
    case 15013:                     // 'into' '#'
    case 15014:                     // 'is' '#'
    case 15015:                     // 'item' '#'
    case 15016:                     // 'json' '#'
    case 15017:                     // 'json-item' '#'
    case 15018:                     // 'jsoniq' '#'
    case 15021:                     // 'last' '#'
    case 15022:                     // 'lax' '#'
    case 15023:                     // 'le' '#'
    case 15025:                     // 'let' '#'
    case 15027:                     // 'loop' '#'
    case 15029:                     // 'lt' '#'
    case 15031:                     // 'mod' '#'
    case 15032:                     // 'modify' '#'
    case 15033:                     // 'module' '#'
    case 15035:                     // 'namespace' '#'
    case 15036:                     // 'namespace-node' '#'
    case 15037:                     // 'ne' '#'
    case 15042:                     // 'node' '#'
    case 15043:                     // 'nodes' '#'
    case 15045:                     // 'null' '#'
    case 15046:                     // 'object' '#'
    case 15050:                     // 'only' '#'
    case 15051:                     // 'option' '#'
    case 15052:                     // 'or' '#'
    case 15053:                     // 'order' '#'
    case 15054:                     // 'ordered' '#'
    case 15055:                     // 'ordering' '#'
    case 15058:                     // 'parent' '#'
    case 15064:                     // 'preceding' '#'
    case 15065:                     // 'preceding-sibling' '#'
    case 15068:                     // 'processing-instruction' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15072:                     // 'return' '#'
    case 15073:                     // 'returning' '#'
    case 15074:                     // 'revalidation' '#'
    case 15076:                     // 'satisfies' '#'
    case 15077:                     // 'schema' '#'
    case 15078:                     // 'schema-attribute' '#'
    case 15079:                     // 'schema-element' '#'
    case 15080:                     // 'score' '#'
    case 15081:                     // 'select' '#'
    case 15082:                     // 'self' '#'
    case 15087:                     // 'sliding' '#'
    case 15088:                     // 'some' '#'
    case 15089:                     // 'stable' '#'
    case 15090:                     // 'start' '#'
    case 15093:                     // 'strict' '#'
    case 15095:                     // 'structured-item' '#'
    case 15096:                     // 'switch' '#'
    case 15097:                     // 'text' '#'
    case 15101:                     // 'to' '#'
    case 15102:                     // 'treat' '#'
    case 15103:                     // 'true' '#'
    case 15104:                     // 'try' '#'
    case 15105:                     // 'tumbling' '#'
    case 15106:                     // 'type' '#'
    case 15107:                     // 'typeswitch' '#'
    case 15108:                     // 'union' '#'
    case 15110:                     // 'unordered' '#'
    case 15111:                     // 'updating' '#'
    case 15114:                     // 'validate' '#'
    case 15115:                     // 'value' '#'
    case 15116:                     // 'variable' '#'
    case 15117:                     // 'version' '#'
    case 15120:                     // 'where' '#'
    case 15121:                     // 'while' '#'
    case 15124:                     // 'with' '#'
    case 17926:                     // EQName^Token '('
    case 17991:                     // 'after' '('
    case 17993:                     // 'allowing' '('
    case 17994:                     // 'ancestor' '('
    case 17995:                     // 'ancestor-or-self' '('
    case 17996:                     // 'and' '('
    case 17998:                     // 'append' '('
    case 18000:                     // 'as' '('
    case 18001:                     // 'ascending' '('
    case 18002:                     // 'at' '('
    case 18004:                     // 'base-uri' '('
    case 18005:                     // 'before' '('
    case 18006:                     // 'boundary-space' '('
    case 18007:                     // 'break' '('
    case 18009:                     // 'case' '('
    case 18010:                     // 'cast' '('
    case 18011:                     // 'castable' '('
    case 18012:                     // 'catch' '('
    case 18014:                     // 'child' '('
    case 18015:                     // 'collation' '('
    case 18018:                     // 'constraint' '('
    case 18019:                     // 'construction' '('
    case 18022:                     // 'context' '('
    case 18023:                     // 'continue' '('
    case 18024:                     // 'copy' '('
    case 18025:                     // 'copy-namespaces' '('
    case 18026:                     // 'count' '('
    case 18027:                     // 'decimal-format' '('
    case 18029:                     // 'declare' '('
    case 18030:                     // 'default' '('
    case 18031:                     // 'delete' '('
    case 18032:                     // 'descendant' '('
    case 18033:                     // 'descendant-or-self' '('
    case 18034:                     // 'descending' '('
    case 18039:                     // 'div' '('
    case 18040:                     // 'document' '('
    case 18043:                     // 'else' '('
    case 18044:                     // 'empty' '('
    case 18046:                     // 'encoding' '('
    case 18047:                     // 'end' '('
    case 18049:                     // 'eq' '('
    case 18050:                     // 'every' '('
    case 18052:                     // 'except' '('
    case 18053:                     // 'exit' '('
    case 18054:                     // 'external' '('
    case 18055:                     // 'false' '('
    case 18056:                     // 'first' '('
    case 18057:                     // 'following' '('
    case 18058:                     // 'following-sibling' '('
    case 18059:                     // 'for' '('
    case 18062:                     // 'from' '('
    case 18063:                     // 'ft-option' '('
    case 18067:                     // 'function' '('
    case 18068:                     // 'ge' '('
    case 18070:                     // 'group' '('
    case 18072:                     // 'gt' '('
    case 18073:                     // 'idiv' '('
    case 18075:                     // 'import' '('
    case 18076:                     // 'in' '('
    case 18077:                     // 'index' '('
    case 18081:                     // 'insert' '('
    case 18082:                     // 'instance' '('
    case 18083:                     // 'integrity' '('
    case 18084:                     // 'intersect' '('
    case 18085:                     // 'into' '('
    case 18086:                     // 'is' '('
    case 18088:                     // 'json' '('
    case 18090:                     // 'jsoniq' '('
    case 18093:                     // 'last' '('
    case 18094:                     // 'lax' '('
    case 18095:                     // 'le' '('
    case 18097:                     // 'let' '('
    case 18099:                     // 'loop' '('
    case 18101:                     // 'lt' '('
    case 18103:                     // 'mod' '('
    case 18104:                     // 'modify' '('
    case 18105:                     // 'module' '('
    case 18107:                     // 'namespace' '('
    case 18109:                     // 'ne' '('
    case 18115:                     // 'nodes' '('
    case 18117:                     // 'null' '('
    case 18118:                     // 'object' '('
    case 18122:                     // 'only' '('
    case 18123:                     // 'option' '('
    case 18124:                     // 'or' '('
    case 18125:                     // 'order' '('
    case 18126:                     // 'ordered' '('
    case 18127:                     // 'ordering' '('
    case 18130:                     // 'parent' '('
    case 18136:                     // 'preceding' '('
    case 18137:                     // 'preceding-sibling' '('
    case 18142:                     // 'rename' '('
    case 18143:                     // 'replace' '('
    case 18144:                     // 'return' '('
    case 18145:                     // 'returning' '('
    case 18146:                     // 'revalidation' '('
    case 18148:                     // 'satisfies' '('
    case 18149:                     // 'schema' '('
    case 18152:                     // 'score' '('
    case 18153:                     // 'select' '('
    case 18154:                     // 'self' '('
    case 18159:                     // 'sliding' '('
    case 18160:                     // 'some' '('
    case 18161:                     // 'stable' '('
    case 18162:                     // 'start' '('
    case 18165:                     // 'strict' '('
    case 18173:                     // 'to' '('
    case 18174:                     // 'treat' '('
    case 18175:                     // 'true' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 23175:                     // 'false' '.'
    case 23237:                     // 'null' '.'
    case 23295:                     // 'true' '.'
    case 37459:                     // 'attribute' 'allowing'
    case 37498:                     // 'element' 'allowing'
    case 37563:                     // 'namespace' 'allowing'
    case 37596:                     // 'processing-instruction' 'allowing'
    case 37971:                     // 'attribute' 'ancestor'
    case 38010:                     // 'element' 'ancestor'
    case 38075:                     // 'namespace' 'ancestor'
    case 38108:                     // 'processing-instruction' 'ancestor'
    case 38483:                     // 'attribute' 'ancestor-or-self'
    case 38522:                     // 'element' 'ancestor-or-self'
    case 38587:                     // 'namespace' 'ancestor-or-self'
    case 38620:                     // 'processing-instruction' 'ancestor-or-self'
    case 40019:                     // 'attribute' 'append'
    case 40058:                     // 'element' 'append'
    case 40123:                     // 'namespace' 'append'
    case 40156:                     // 'processing-instruction' 'append'
    case 40531:                     // 'attribute' 'array'
    case 40570:                     // 'element' 'array'
    case 42579:                     // 'attribute' 'attribute'
    case 42618:                     // 'element' 'attribute'
    case 42683:                     // 'namespace' 'attribute'
    case 42716:                     // 'processing-instruction' 'attribute'
    case 43091:                     // 'attribute' 'base-uri'
    case 43130:                     // 'element' 'base-uri'
    case 43195:                     // 'namespace' 'base-uri'
    case 43228:                     // 'processing-instruction' 'base-uri'
    case 44115:                     // 'attribute' 'boundary-space'
    case 44154:                     // 'element' 'boundary-space'
    case 44219:                     // 'namespace' 'boundary-space'
    case 44252:                     // 'processing-instruction' 'boundary-space'
    case 44627:                     // 'attribute' 'break'
    case 44666:                     // 'element' 'break'
    case 44731:                     // 'namespace' 'break'
    case 44764:                     // 'processing-instruction' 'break'
    case 47187:                     // 'attribute' 'catch'
    case 47226:                     // 'element' 'catch'
    case 47291:                     // 'namespace' 'catch'
    case 47324:                     // 'processing-instruction' 'catch'
    case 48211:                     // 'attribute' 'child'
    case 48250:                     // 'element' 'child'
    case 48315:                     // 'namespace' 'child'
    case 48348:                     // 'processing-instruction' 'child'
    case 49747:                     // 'attribute' 'comment'
    case 49786:                     // 'element' 'comment'
    case 49851:                     // 'namespace' 'comment'
    case 49884:                     // 'processing-instruction' 'comment'
    case 50259:                     // 'attribute' 'constraint'
    case 50298:                     // 'element' 'constraint'
    case 50363:                     // 'namespace' 'constraint'
    case 50396:                     // 'processing-instruction' 'constraint'
    case 50771:                     // 'attribute' 'construction'
    case 50810:                     // 'element' 'construction'
    case 50875:                     // 'namespace' 'construction'
    case 50908:                     // 'processing-instruction' 'construction'
    case 52307:                     // 'attribute' 'context'
    case 52346:                     // 'element' 'context'
    case 52411:                     // 'namespace' 'context'
    case 52444:                     // 'processing-instruction' 'context'
    case 52819:                     // 'attribute' 'continue'
    case 52858:                     // 'element' 'continue'
    case 52923:                     // 'namespace' 'continue'
    case 52956:                     // 'processing-instruction' 'continue'
    case 53331:                     // 'attribute' 'copy'
    case 53370:                     // 'element' 'copy'
    case 53435:                     // 'namespace' 'copy'
    case 53468:                     // 'processing-instruction' 'copy'
    case 53843:                     // 'attribute' 'copy-namespaces'
    case 53882:                     // 'element' 'copy-namespaces'
    case 53947:                     // 'namespace' 'copy-namespaces'
    case 53980:                     // 'processing-instruction' 'copy-namespaces'
    case 54867:                     // 'attribute' 'decimal-format'
    case 54906:                     // 'element' 'decimal-format'
    case 54971:                     // 'namespace' 'decimal-format'
    case 55004:                     // 'processing-instruction' 'decimal-format'
    case 55891:                     // 'attribute' 'declare'
    case 55930:                     // 'element' 'declare'
    case 55995:                     // 'namespace' 'declare'
    case 56028:                     // 'processing-instruction' 'declare'
    case 56915:                     // 'attribute' 'delete'
    case 56954:                     // 'element' 'delete'
    case 57019:                     // 'namespace' 'delete'
    case 57052:                     // 'processing-instruction' 'delete'
    case 57427:                     // 'attribute' 'descendant'
    case 57466:                     // 'element' 'descendant'
    case 57531:                     // 'namespace' 'descendant'
    case 57564:                     // 'processing-instruction' 'descendant'
    case 57939:                     // 'attribute' 'descendant-or-self'
    case 57978:                     // 'element' 'descendant-or-self'
    case 58043:                     // 'namespace' 'descendant-or-self'
    case 58076:                     // 'processing-instruction' 'descendant-or-self'
    case 61523:                     // 'attribute' 'document'
    case 61562:                     // 'element' 'document'
    case 61627:                     // 'namespace' 'document'
    case 61660:                     // 'processing-instruction' 'document'
    case 62035:                     // 'attribute' 'document-node'
    case 62074:                     // 'element' 'document-node'
    case 62139:                     // 'namespace' 'document-node'
    case 62172:                     // 'processing-instruction' 'document-node'
    case 62547:                     // 'attribute' 'element'
    case 62586:                     // 'element' 'element'
    case 62651:                     // 'namespace' 'element'
    case 62684:                     // 'processing-instruction' 'element'
    case 64083:                     // 'attribute' 'empty-sequence'
    case 64122:                     // 'element' 'empty-sequence'
    case 64187:                     // 'namespace' 'empty-sequence'
    case 64220:                     // 'processing-instruction' 'empty-sequence'
    case 64595:                     // 'attribute' 'encoding'
    case 64634:                     // 'element' 'encoding'
    case 64699:                     // 'namespace' 'encoding'
    case 64732:                     // 'processing-instruction' 'encoding'
    case 66643:                     // 'attribute' 'every'
    case 66682:                     // 'element' 'every'
    case 66747:                     // 'namespace' 'every'
    case 66780:                     // 'processing-instruction' 'every'
    case 68179:                     // 'attribute' 'exit'
    case 68218:                     // 'element' 'exit'
    case 68283:                     // 'namespace' 'exit'
    case 68316:                     // 'processing-instruction' 'exit'
    case 68691:                     // 'attribute' 'external'
    case 68730:                     // 'element' 'external'
    case 68795:                     // 'namespace' 'external'
    case 68828:                     // 'processing-instruction' 'external'
    case 69203:                     // 'attribute' 'false'
    case 69242:                     // 'element' 'false'
    case 69307:                     // 'namespace' 'false'
    case 69340:                     // 'processing-instruction' 'false'
    case 69715:                     // 'attribute' 'first'
    case 69754:                     // 'element' 'first'
    case 69819:                     // 'namespace' 'first'
    case 69852:                     // 'processing-instruction' 'first'
    case 70227:                     // 'attribute' 'following'
    case 70266:                     // 'element' 'following'
    case 70331:                     // 'namespace' 'following'
    case 70364:                     // 'processing-instruction' 'following'
    case 70739:                     // 'attribute' 'following-sibling'
    case 70778:                     // 'element' 'following-sibling'
    case 70843:                     // 'namespace' 'following-sibling'
    case 70876:                     // 'processing-instruction' 'following-sibling'
    case 72787:                     // 'attribute' 'from'
    case 72826:                     // 'element' 'from'
    case 72891:                     // 'namespace' 'from'
    case 72924:                     // 'processing-instruction' 'from'
    case 73299:                     // 'attribute' 'ft-option'
    case 73338:                     // 'element' 'ft-option'
    case 73403:                     // 'namespace' 'ft-option'
    case 73436:                     // 'processing-instruction' 'ft-option'
    case 75347:                     // 'attribute' 'function'
    case 75386:                     // 'element' 'function'
    case 75451:                     // 'namespace' 'function'
    case 75484:                     // 'processing-instruction' 'function'
    case 78931:                     // 'attribute' 'if'
    case 78970:                     // 'element' 'if'
    case 79035:                     // 'namespace' 'if'
    case 79068:                     // 'processing-instruction' 'if'
    case 79443:                     // 'attribute' 'import'
    case 79482:                     // 'element' 'import'
    case 79547:                     // 'namespace' 'import'
    case 79580:                     // 'processing-instruction' 'import'
    case 79955:                     // 'attribute' 'in'
    case 79994:                     // 'element' 'in'
    case 80059:                     // 'namespace' 'in'
    case 80092:                     // 'processing-instruction' 'in'
    case 80467:                     // 'attribute' 'index'
    case 80506:                     // 'element' 'index'
    case 80571:                     // 'namespace' 'index'
    case 80604:                     // 'processing-instruction' 'index'
    case 82515:                     // 'attribute' 'insert'
    case 82554:                     // 'element' 'insert'
    case 82619:                     // 'namespace' 'insert'
    case 82652:                     // 'processing-instruction' 'insert'
    case 83539:                     // 'attribute' 'integrity'
    case 83578:                     // 'element' 'integrity'
    case 83643:                     // 'namespace' 'integrity'
    case 83676:                     // 'processing-instruction' 'integrity'
    case 85587:                     // 'attribute' 'item'
    case 85626:                     // 'element' 'item'
    case 85691:                     // 'namespace' 'item'
    case 85724:                     // 'processing-instruction' 'item'
    case 86099:                     // 'attribute' 'json'
    case 86138:                     // 'element' 'json'
    case 86203:                     // 'namespace' 'json'
    case 86236:                     // 'processing-instruction' 'json'
    case 86611:                     // 'attribute' 'json-item'
    case 86650:                     // 'element' 'json-item'
    case 87123:                     // 'attribute' 'jsoniq'
    case 87162:                     // 'element' 'jsoniq'
    case 87227:                     // 'namespace' 'jsoniq'
    case 87260:                     // 'processing-instruction' 'jsoniq'
    case 88659:                     // 'attribute' 'last'
    case 88698:                     // 'element' 'last'
    case 88763:                     // 'namespace' 'last'
    case 88796:                     // 'processing-instruction' 'last'
    case 89171:                     // 'attribute' 'lax'
    case 89210:                     // 'element' 'lax'
    case 89275:                     // 'namespace' 'lax'
    case 89308:                     // 'processing-instruction' 'lax'
    case 91731:                     // 'attribute' 'loop'
    case 91770:                     // 'element' 'loop'
    case 91835:                     // 'namespace' 'loop'
    case 91868:                     // 'processing-instruction' 'loop'
    case 94803:                     // 'attribute' 'module'
    case 94842:                     // 'element' 'module'
    case 94907:                     // 'namespace' 'module'
    case 94940:                     // 'processing-instruction' 'module'
    case 95827:                     // 'attribute' 'namespace'
    case 95866:                     // 'element' 'namespace'
    case 95931:                     // 'namespace' 'namespace'
    case 95964:                     // 'processing-instruction' 'namespace'
    case 96339:                     // 'attribute' 'namespace-node'
    case 96378:                     // 'element' 'namespace-node'
    case 96443:                     // 'namespace' 'namespace-node'
    case 96476:                     // 'processing-instruction' 'namespace-node'
    case 99411:                     // 'attribute' 'node'
    case 99450:                     // 'element' 'node'
    case 99515:                     // 'namespace' 'node'
    case 99548:                     // 'processing-instruction' 'node'
    case 99923:                     // 'attribute' 'nodes'
    case 99962:                     // 'element' 'nodes'
    case 100027:                    // 'namespace' 'nodes'
    case 100060:                    // 'processing-instruction' 'nodes'
    case 100947:                    // 'attribute' 'null'
    case 100986:                    // 'element' 'null'
    case 101051:                    // 'namespace' 'null'
    case 101084:                    // 'processing-instruction' 'null'
    case 101459:                    // 'attribute' 'object'
    case 101498:                    // 'element' 'object'
    case 101563:                    // 'namespace' 'object'
    case 101596:                    // 'processing-instruction' 'object'
    case 104019:                    // 'attribute' 'option'
    case 104058:                    // 'element' 'option'
    case 104123:                    // 'namespace' 'option'
    case 104156:                    // 'processing-instruction' 'option'
    case 105555:                    // 'attribute' 'ordered'
    case 105594:                    // 'element' 'ordered'
    case 105659:                    // 'namespace' 'ordered'
    case 105692:                    // 'processing-instruction' 'ordered'
    case 106067:                    // 'attribute' 'ordering'
    case 106106:                    // 'element' 'ordering'
    case 106171:                    // 'namespace' 'ordering'
    case 106204:                    // 'processing-instruction' 'ordering'
    case 107603:                    // 'attribute' 'parent'
    case 107642:                    // 'element' 'parent'
    case 107707:                    // 'namespace' 'parent'
    case 107740:                    // 'processing-instruction' 'parent'
    case 110675:                    // 'attribute' 'preceding'
    case 110714:                    // 'element' 'preceding'
    case 110779:                    // 'namespace' 'preceding'
    case 110812:                    // 'processing-instruction' 'preceding'
    case 111187:                    // 'attribute' 'preceding-sibling'
    case 111226:                    // 'element' 'preceding-sibling'
    case 111291:                    // 'namespace' 'preceding-sibling'
    case 111324:                    // 'processing-instruction' 'preceding-sibling'
    case 112723:                    // 'attribute' 'processing-instruction'
    case 112762:                    // 'element' 'processing-instruction'
    case 112827:                    // 'namespace' 'processing-instruction'
    case 112860:                    // 'processing-instruction' 'processing-instruction'
    case 113747:                    // 'attribute' 'rename'
    case 113786:                    // 'element' 'rename'
    case 113851:                    // 'namespace' 'rename'
    case 113884:                    // 'processing-instruction' 'rename'
    case 114259:                    // 'attribute' 'replace'
    case 114298:                    // 'element' 'replace'
    case 114363:                    // 'namespace' 'replace'
    case 114396:                    // 'processing-instruction' 'replace'
    case 115283:                    // 'attribute' 'returning'
    case 115322:                    // 'element' 'returning'
    case 115387:                    // 'namespace' 'returning'
    case 115420:                    // 'processing-instruction' 'returning'
    case 115795:                    // 'attribute' 'revalidation'
    case 115834:                    // 'element' 'revalidation'
    case 115899:                    // 'namespace' 'revalidation'
    case 115932:                    // 'processing-instruction' 'revalidation'
    case 117331:                    // 'attribute' 'schema'
    case 117370:                    // 'element' 'schema'
    case 117435:                    // 'namespace' 'schema'
    case 117468:                    // 'processing-instruction' 'schema'
    case 117843:                    // 'attribute' 'schema-attribute'
    case 117882:                    // 'element' 'schema-attribute'
    case 117947:                    // 'namespace' 'schema-attribute'
    case 117980:                    // 'processing-instruction' 'schema-attribute'
    case 118355:                    // 'attribute' 'schema-element'
    case 118394:                    // 'element' 'schema-element'
    case 118459:                    // 'namespace' 'schema-element'
    case 118492:                    // 'processing-instruction' 'schema-element'
    case 118867:                    // 'attribute' 'score'
    case 118906:                    // 'element' 'score'
    case 118971:                    // 'namespace' 'score'
    case 119004:                    // 'processing-instruction' 'score'
    case 119379:                    // 'attribute' 'select'
    case 119418:                    // 'element' 'select'
    case 119483:                    // 'namespace' 'select'
    case 119516:                    // 'processing-instruction' 'select'
    case 119891:                    // 'attribute' 'self'
    case 119930:                    // 'element' 'self'
    case 119995:                    // 'namespace' 'self'
    case 120028:                    // 'processing-instruction' 'self'
    case 122451:                    // 'attribute' 'sliding'
    case 122490:                    // 'element' 'sliding'
    case 122555:                    // 'namespace' 'sliding'
    case 122588:                    // 'processing-instruction' 'sliding'
    case 122963:                    // 'attribute' 'some'
    case 123002:                    // 'element' 'some'
    case 123067:                    // 'namespace' 'some'
    case 123100:                    // 'processing-instruction' 'some'
    case 125523:                    // 'attribute' 'strict'
    case 125562:                    // 'element' 'strict'
    case 125627:                    // 'namespace' 'strict'
    case 125660:                    // 'processing-instruction' 'strict'
    case 126547:                    // 'attribute' 'structured-item'
    case 126586:                    // 'element' 'structured-item'
    case 127059:                    // 'attribute' 'switch'
    case 127098:                    // 'element' 'switch'
    case 127163:                    // 'namespace' 'switch'
    case 127196:                    // 'processing-instruction' 'switch'
    case 127571:                    // 'attribute' 'text'
    case 127610:                    // 'element' 'text'
    case 127675:                    // 'namespace' 'text'
    case 127708:                    // 'processing-instruction' 'text'
    case 130643:                    // 'attribute' 'true'
    case 130682:                    // 'element' 'true'
    case 130747:                    // 'namespace' 'true'
    case 130780:                    // 'processing-instruction' 'true'
    case 131155:                    // 'attribute' 'try'
    case 131194:                    // 'element' 'try'
    case 131259:                    // 'namespace' 'try'
    case 131292:                    // 'processing-instruction' 'try'
    case 131667:                    // 'attribute' 'tumbling'
    case 131706:                    // 'element' 'tumbling'
    case 131771:                    // 'namespace' 'tumbling'
    case 131804:                    // 'processing-instruction' 'tumbling'
    case 132179:                    // 'attribute' 'type'
    case 132218:                    // 'element' 'type'
    case 132283:                    // 'namespace' 'type'
    case 132316:                    // 'processing-instruction' 'type'
    case 132691:                    // 'attribute' 'typeswitch'
    case 132730:                    // 'element' 'typeswitch'
    case 132795:                    // 'namespace' 'typeswitch'
    case 132828:                    // 'processing-instruction' 'typeswitch'
    case 134227:                    // 'attribute' 'unordered'
    case 134266:                    // 'element' 'unordered'
    case 134331:                    // 'namespace' 'unordered'
    case 134364:                    // 'processing-instruction' 'unordered'
    case 134739:                    // 'attribute' 'updating'
    case 134778:                    // 'element' 'updating'
    case 134843:                    // 'namespace' 'updating'
    case 134876:                    // 'processing-instruction' 'updating'
    case 136275:                    // 'attribute' 'validate'
    case 136314:                    // 'element' 'validate'
    case 136379:                    // 'namespace' 'validate'
    case 136412:                    // 'processing-instruction' 'validate'
    case 136787:                    // 'attribute' 'value'
    case 136826:                    // 'element' 'value'
    case 136891:                    // 'namespace' 'value'
    case 136924:                    // 'processing-instruction' 'value'
    case 137299:                    // 'attribute' 'variable'
    case 137338:                    // 'element' 'variable'
    case 137403:                    // 'namespace' 'variable'
    case 137436:                    // 'processing-instruction' 'variable'
    case 137811:                    // 'attribute' 'version'
    case 137850:                    // 'element' 'version'
    case 137915:                    // 'namespace' 'version'
    case 137948:                    // 'processing-instruction' 'version'
    case 139859:                    // 'attribute' 'while'
    case 139898:                    // 'element' 'while'
    case 139963:                    // 'namespace' 'while'
    case 139996:                    // 'processing-instruction' 'while'
    case 143955:                    // 'attribute' '{'
    case 143969:                    // 'comment' '{'
    case 143992:                    // 'document' '{'
    case 143994:                    // 'element' '{'
    case 144059:                    // 'namespace' '{'
    case 144078:                    // 'ordered' '{'
    case 144092:                    // 'processing-instruction' '{'
    case 144121:                    // 'text' '{'
    case 144134:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(288);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
      break;
    case 122:                       // 'element'
      lookahead2W(287);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
      break;
    case 187:                       // 'namespace'
    case 220:                       // 'processing-instruction'
      lookahead2W(285);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
      break;
    case 97:                        // 'comment'
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 249:                       // 'text'
    case 262:                       // 'unordered'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 79:                        // 'array'
    case 125:                       // 'empty-sequence'
    case 154:                       // 'if'
    case 167:                       // 'item'
    case 169:                       // 'json-item'
    case 247:                       // 'structured-item'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 234:                       // 'self'
      lookahead2W(238);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 121:                       // 'document-node'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 147:                       // 'function'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 161:                       // 'insert'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 188:                       // 'namespace-node'
    case 189:                       // 'ne'
    case 194:                       // 'node'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 222:                       // 'rename'
    case 223:                       // 'replace'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 239:                       // 'sliding'
    case 240:                       // 'some'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    default:
      lk = l1;
    }
    if (lk == 12935                 // 'false' EOF
     || lk == 12997                 // 'null' EOF
     || lk == 13055                 // 'true' EOF
     || lk == 13447                 // 'false' '!'
     || lk == 13509                 // 'null' '!'
     || lk == 13567                 // 'true' '!'
     || lk == 13959                 // 'false' '!='
     || lk == 14021                 // 'null' '!='
     || lk == 14079                 // 'true' '!='
     || lk == 19591                 // 'false' ')'
     || lk == 19653                 // 'null' ')'
     || lk == 19711                 // 'true' ')'
     || lk == 20103                 // 'false' '*'
     || lk == 20165                 // 'null' '*'
     || lk == 20223                 // 'true' '*'
     || lk == 21127                 // 'false' '+'
     || lk == 21189                 // 'null' '+'
     || lk == 21247                 // 'true' '+'
     || lk == 21639                 // 'false' ','
     || lk == 21701                 // 'null' ','
     || lk == 21759                 // 'true' ','
     || lk == 22151                 // 'false' '-'
     || lk == 22213                 // 'null' '-'
     || lk == 22271                 // 'true' '-'
     || lk == 24199                 // 'false' '/'
     || lk == 24261                 // 'null' '/'
     || lk == 24319                 // 'true' '/'
     || lk == 24711                 // 'false' '//'
     || lk == 24773                 // 'null' '//'
     || lk == 24831                 // 'true' '//'
     || lk == 25735                 // 'false' ':'
     || lk == 25797                 // 'null' ':'
     || lk == 25855                 // 'true' ':'
     || lk == 27783                 // 'false' ';'
     || lk == 27845                 // 'null' ';'
     || lk == 27903                 // 'true' ';'
     || lk == 28295                 // 'false' '<'
     || lk == 28357                 // 'null' '<'
     || lk == 28415                 // 'true' '<'
     || lk == 29831                 // 'false' '<<'
     || lk == 29893                 // 'null' '<<'
     || lk == 29951                 // 'true' '<<'
     || lk == 30343                 // 'false' '<='
     || lk == 30405                 // 'null' '<='
     || lk == 30463                 // 'true' '<='
     || lk == 31367                 // 'false' '='
     || lk == 31429                 // 'null' '='
     || lk == 31487                 // 'true' '='
     || lk == 31879                 // 'false' '>'
     || lk == 31941                 // 'null' '>'
     || lk == 31999                 // 'true' '>'
     || lk == 32391                 // 'false' '>='
     || lk == 32453                 // 'null' '>='
     || lk == 32511                 // 'true' '>='
     || lk == 32903                 // 'false' '>>'
     || lk == 32965                 // 'null' '>>'
     || lk == 33023                 // 'true' '>>'
     || lk == 35463                 // 'false' '['
     || lk == 35525                 // 'null' '['
     || lk == 35583                 // 'true' '['
     || lk == 35975                 // 'false' ']'
     || lk == 36037                 // 'null' ']'
     || lk == 36095                 // 'true' ']'
     || lk == 36435                 // 'attribute' 'after'
     || lk == 36474                 // 'element' 'after'
     || lk == 36487                 // 'false' 'after'
     || lk == 36539                 // 'namespace' 'after'
     || lk == 36549                 // 'null' 'after'
     || lk == 36572                 // 'processing-instruction' 'after'
     || lk == 36607                 // 'true' 'after'
     || lk == 38995                 // 'attribute' 'and'
     || lk == 39034                 // 'element' 'and'
     || lk == 39047                 // 'false' 'and'
     || lk == 39099                 // 'namespace' 'and'
     || lk == 39109                 // 'null' 'and'
     || lk == 39132                 // 'processing-instruction' 'and'
     || lk == 39167                 // 'true' 'and'
     || lk == 41043                 // 'attribute' 'as'
     || lk == 41082                 // 'element' 'as'
     || lk == 41095                 // 'false' 'as'
     || lk == 41147                 // 'namespace' 'as'
     || lk == 41157                 // 'null' 'as'
     || lk == 41180                 // 'processing-instruction' 'as'
     || lk == 41215                 // 'true' 'as'
     || lk == 41555                 // 'attribute' 'ascending'
     || lk == 41594                 // 'element' 'ascending'
     || lk == 41607                 // 'false' 'ascending'
     || lk == 41659                 // 'namespace' 'ascending'
     || lk == 41669                 // 'null' 'ascending'
     || lk == 41692                 // 'processing-instruction' 'ascending'
     || lk == 41727                 // 'true' 'ascending'
     || lk == 42067                 // 'attribute' 'at'
     || lk == 42106                 // 'element' 'at'
     || lk == 42119                 // 'false' 'at'
     || lk == 42171                 // 'namespace' 'at'
     || lk == 42181                 // 'null' 'at'
     || lk == 42204                 // 'processing-instruction' 'at'
     || lk == 42239                 // 'true' 'at'
     || lk == 43603                 // 'attribute' 'before'
     || lk == 43642                 // 'element' 'before'
     || lk == 43655                 // 'false' 'before'
     || lk == 43707                 // 'namespace' 'before'
     || lk == 43717                 // 'null' 'before'
     || lk == 43740                 // 'processing-instruction' 'before'
     || lk == 43775                 // 'true' 'before'
     || lk == 45191                 // 'false' 'by'
     || lk == 45253                 // 'null' 'by'
     || lk == 45311                 // 'true' 'by'
     || lk == 45651                 // 'attribute' 'case'
     || lk == 45690                 // 'element' 'case'
     || lk == 45703                 // 'false' 'case'
     || lk == 45755                 // 'namespace' 'case'
     || lk == 45765                 // 'null' 'case'
     || lk == 45788                 // 'processing-instruction' 'case'
     || lk == 45823                 // 'true' 'case'
     || lk == 46163                 // 'attribute' 'cast'
     || lk == 46202                 // 'element' 'cast'
     || lk == 46215                 // 'false' 'cast'
     || lk == 46267                 // 'namespace' 'cast'
     || lk == 46277                 // 'null' 'cast'
     || lk == 46300                 // 'processing-instruction' 'cast'
     || lk == 46335                 // 'true' 'cast'
     || lk == 46675                 // 'attribute' 'castable'
     || lk == 46714                 // 'element' 'castable'
     || lk == 46727                 // 'false' 'castable'
     || lk == 46779                 // 'namespace' 'castable'
     || lk == 46789                 // 'null' 'castable'
     || lk == 46812                 // 'processing-instruction' 'castable'
     || lk == 46847                 // 'true' 'castable'
     || lk == 48723                 // 'attribute' 'collation'
     || lk == 48762                 // 'element' 'collation'
     || lk == 48775                 // 'false' 'collation'
     || lk == 48827                 // 'namespace' 'collation'
     || lk == 48837                 // 'null' 'collation'
     || lk == 48860                 // 'processing-instruction' 'collation'
     || lk == 48895                 // 'true' 'collation'
     || lk == 51335                 // 'false' 'contains'
     || lk == 51397                 // 'null' 'contains'
     || lk == 51455                 // 'true' 'contains'
     || lk == 54355                 // 'attribute' 'count'
     || lk == 54394                 // 'element' 'count'
     || lk == 54407                 // 'false' 'count'
     || lk == 54459                 // 'namespace' 'count'
     || lk == 54469                 // 'null' 'count'
     || lk == 54492                 // 'processing-instruction' 'count'
     || lk == 54527                 // 'true' 'count'
     || lk == 56403                 // 'attribute' 'default'
     || lk == 56442                 // 'element' 'default'
     || lk == 56455                 // 'false' 'default'
     || lk == 56507                 // 'namespace' 'default'
     || lk == 56517                 // 'null' 'default'
     || lk == 56540                 // 'processing-instruction' 'default'
     || lk == 56575                 // 'true' 'default'
     || lk == 58451                 // 'attribute' 'descending'
     || lk == 58490                 // 'element' 'descending'
     || lk == 58503                 // 'false' 'descending'
     || lk == 58555                 // 'namespace' 'descending'
     || lk == 58565                 // 'null' 'descending'
     || lk == 58588                 // 'processing-instruction' 'descending'
     || lk == 58623                 // 'true' 'descending'
     || lk == 61011                 // 'attribute' 'div'
     || lk == 61050                 // 'element' 'div'
     || lk == 61063                 // 'false' 'div'
     || lk == 61115                 // 'namespace' 'div'
     || lk == 61125                 // 'null' 'div'
     || lk == 61148                 // 'processing-instruction' 'div'
     || lk == 61183                 // 'true' 'div'
     || lk == 63059                 // 'attribute' 'else'
     || lk == 63098                 // 'element' 'else'
     || lk == 63111                 // 'false' 'else'
     || lk == 63163                 // 'namespace' 'else'
     || lk == 63173                 // 'null' 'else'
     || lk == 63196                 // 'processing-instruction' 'else'
     || lk == 63231                 // 'true' 'else'
     || lk == 63571                 // 'attribute' 'empty'
     || lk == 63610                 // 'element' 'empty'
     || lk == 63623                 // 'false' 'empty'
     || lk == 63675                 // 'namespace' 'empty'
     || lk == 63685                 // 'null' 'empty'
     || lk == 63708                 // 'processing-instruction' 'empty'
     || lk == 63743                 // 'true' 'empty'
     || lk == 65107                 // 'attribute' 'end'
     || lk == 65146                 // 'element' 'end'
     || lk == 65159                 // 'false' 'end'
     || lk == 65211                 // 'namespace' 'end'
     || lk == 65221                 // 'null' 'end'
     || lk == 65244                 // 'processing-instruction' 'end'
     || lk == 65279                 // 'true' 'end'
     || lk == 66131                 // 'attribute' 'eq'
     || lk == 66170                 // 'element' 'eq'
     || lk == 66183                 // 'false' 'eq'
     || lk == 66235                 // 'namespace' 'eq'
     || lk == 66245                 // 'null' 'eq'
     || lk == 66268                 // 'processing-instruction' 'eq'
     || lk == 66303                 // 'true' 'eq'
     || lk == 67667                 // 'attribute' 'except'
     || lk == 67706                 // 'element' 'except'
     || lk == 67719                 // 'false' 'except'
     || lk == 67771                 // 'namespace' 'except'
     || lk == 67781                 // 'null' 'except'
     || lk == 67804                 // 'processing-instruction' 'except'
     || lk == 67839                 // 'true' 'except'
     || lk == 71251                 // 'attribute' 'for'
     || lk == 71290                 // 'element' 'for'
     || lk == 71303                 // 'false' 'for'
     || lk == 71355                 // 'namespace' 'for'
     || lk == 71365                 // 'null' 'for'
     || lk == 71388                 // 'processing-instruction' 'for'
     || lk == 71423                 // 'true' 'for'
     || lk == 75859                 // 'attribute' 'ge'
     || lk == 75898                 // 'element' 'ge'
     || lk == 75911                 // 'false' 'ge'
     || lk == 75963                 // 'namespace' 'ge'
     || lk == 75973                 // 'null' 'ge'
     || lk == 75996                 // 'processing-instruction' 'ge'
     || lk == 76031                 // 'true' 'ge'
     || lk == 76883                 // 'attribute' 'group'
     || lk == 76922                 // 'element' 'group'
     || lk == 76935                 // 'false' 'group'
     || lk == 76987                 // 'namespace' 'group'
     || lk == 76997                 // 'null' 'group'
     || lk == 77020                 // 'processing-instruction' 'group'
     || lk == 77055                 // 'true' 'group'
     || lk == 77907                 // 'attribute' 'gt'
     || lk == 77946                 // 'element' 'gt'
     || lk == 77959                 // 'false' 'gt'
     || lk == 78011                 // 'namespace' 'gt'
     || lk == 78021                 // 'null' 'gt'
     || lk == 78044                 // 'processing-instruction' 'gt'
     || lk == 78079                 // 'true' 'gt'
     || lk == 78419                 // 'attribute' 'idiv'
     || lk == 78458                 // 'element' 'idiv'
     || lk == 78471                 // 'false' 'idiv'
     || lk == 78523                 // 'namespace' 'idiv'
     || lk == 78533                 // 'null' 'idiv'
     || lk == 78556                 // 'processing-instruction' 'idiv'
     || lk == 78591                 // 'true' 'idiv'
     || lk == 83027                 // 'attribute' 'instance'
     || lk == 83066                 // 'element' 'instance'
     || lk == 83079                 // 'false' 'instance'
     || lk == 83131                 // 'namespace' 'instance'
     || lk == 83141                 // 'null' 'instance'
     || lk == 83164                 // 'processing-instruction' 'instance'
     || lk == 83199                 // 'true' 'instance'
     || lk == 84051                 // 'attribute' 'intersect'
     || lk == 84090                 // 'element' 'intersect'
     || lk == 84103                 // 'false' 'intersect'
     || lk == 84155                 // 'namespace' 'intersect'
     || lk == 84165                 // 'null' 'intersect'
     || lk == 84188                 // 'processing-instruction' 'intersect'
     || lk == 84223                 // 'true' 'intersect'
     || lk == 84563                 // 'attribute' 'into'
     || lk == 84602                 // 'element' 'into'
     || lk == 84615                 // 'false' 'into'
     || lk == 84667                 // 'namespace' 'into'
     || lk == 84677                 // 'null' 'into'
     || lk == 84700                 // 'processing-instruction' 'into'
     || lk == 84735                 // 'true' 'into'
     || lk == 85075                 // 'attribute' 'is'
     || lk == 85114                 // 'element' 'is'
     || lk == 85127                 // 'false' 'is'
     || lk == 85179                 // 'namespace' 'is'
     || lk == 85189                 // 'null' 'is'
     || lk == 85212                 // 'processing-instruction' 'is'
     || lk == 85247                 // 'true' 'is'
     || lk == 89683                 // 'attribute' 'le'
     || lk == 89722                 // 'element' 'le'
     || lk == 89735                 // 'false' 'le'
     || lk == 89787                 // 'namespace' 'le'
     || lk == 89797                 // 'null' 'le'
     || lk == 89820                 // 'processing-instruction' 'le'
     || lk == 89855                 // 'true' 'le'
     || lk == 90707                 // 'attribute' 'let'
     || lk == 90746                 // 'element' 'let'
     || lk == 90759                 // 'false' 'let'
     || lk == 90811                 // 'namespace' 'let'
     || lk == 90821                 // 'null' 'let'
     || lk == 90844                 // 'processing-instruction' 'let'
     || lk == 90879                 // 'true' 'let'
     || lk == 92755                 // 'attribute' 'lt'
     || lk == 92794                 // 'element' 'lt'
     || lk == 92807                 // 'false' 'lt'
     || lk == 92859                 // 'namespace' 'lt'
     || lk == 92869                 // 'null' 'lt'
     || lk == 92892                 // 'processing-instruction' 'lt'
     || lk == 92927                 // 'true' 'lt'
     || lk == 93779                 // 'attribute' 'mod'
     || lk == 93818                 // 'element' 'mod'
     || lk == 93831                 // 'false' 'mod'
     || lk == 93883                 // 'namespace' 'mod'
     || lk == 93893                 // 'null' 'mod'
     || lk == 93916                 // 'processing-instruction' 'mod'
     || lk == 93951                 // 'true' 'mod'
     || lk == 94291                 // 'attribute' 'modify'
     || lk == 94330                 // 'element' 'modify'
     || lk == 94343                 // 'false' 'modify'
     || lk == 94395                 // 'namespace' 'modify'
     || lk == 94405                 // 'null' 'modify'
     || lk == 94428                 // 'processing-instruction' 'modify'
     || lk == 94463                 // 'true' 'modify'
     || lk == 96851                 // 'attribute' 'ne'
     || lk == 96890                 // 'element' 'ne'
     || lk == 96903                 // 'false' 'ne'
     || lk == 96955                 // 'namespace' 'ne'
     || lk == 96965                 // 'null' 'ne'
     || lk == 96988                 // 'processing-instruction' 'ne'
     || lk == 97023                 // 'true' 'ne'
     || lk == 103507                // 'attribute' 'only'
     || lk == 103546                // 'element' 'only'
     || lk == 103559                // 'false' 'only'
     || lk == 103611                // 'namespace' 'only'
     || lk == 103621                // 'null' 'only'
     || lk == 103644                // 'processing-instruction' 'only'
     || lk == 103679                // 'true' 'only'
     || lk == 104531                // 'attribute' 'or'
     || lk == 104570                // 'element' 'or'
     || lk == 104583                // 'false' 'or'
     || lk == 104635                // 'namespace' 'or'
     || lk == 104645                // 'null' 'or'
     || lk == 104668                // 'processing-instruction' 'or'
     || lk == 104703                // 'true' 'or'
     || lk == 105043                // 'attribute' 'order'
     || lk == 105082                // 'element' 'order'
     || lk == 105095                // 'false' 'order'
     || lk == 105147                // 'namespace' 'order'
     || lk == 105157                // 'null' 'order'
     || lk == 105180                // 'processing-instruction' 'order'
     || lk == 105215                // 'true' 'order'
     || lk == 107143                // 'false' 'paragraphs'
     || lk == 107205                // 'null' 'paragraphs'
     || lk == 107263                // 'true' 'paragraphs'
     || lk == 114771                // 'attribute' 'return'
     || lk == 114810                // 'element' 'return'
     || lk == 114823                // 'false' 'return'
     || lk == 114875                // 'namespace' 'return'
     || lk == 114885                // 'null' 'return'
     || lk == 114908                // 'processing-instruction' 'return'
     || lk == 114943                // 'true' 'return'
     || lk == 116819                // 'attribute' 'satisfies'
     || lk == 116858                // 'element' 'satisfies'
     || lk == 116871                // 'false' 'satisfies'
     || lk == 116923                // 'namespace' 'satisfies'
     || lk == 116933                // 'null' 'satisfies'
     || lk == 116956                // 'processing-instruction' 'satisfies'
     || lk == 116991                // 'true' 'satisfies'
     || lk == 121479                // 'false' 'sentences'
     || lk == 121541                // 'null' 'sentences'
     || lk == 121599                // 'true' 'sentences'
     || lk == 123475                // 'attribute' 'stable'
     || lk == 123514                // 'element' 'stable'
     || lk == 123527                // 'false' 'stable'
     || lk == 123579                // 'namespace' 'stable'
     || lk == 123589                // 'null' 'stable'
     || lk == 123612                // 'processing-instruction' 'stable'
     || lk == 123647                // 'true' 'stable'
     || lk == 123987                // 'attribute' 'start'
     || lk == 124026                // 'element' 'start'
     || lk == 124039                // 'false' 'start'
     || lk == 124091                // 'namespace' 'start'
     || lk == 124101                // 'null' 'start'
     || lk == 124124                // 'processing-instruction' 'start'
     || lk == 124159                // 'true' 'start'
     || lk == 129159                // 'false' 'times'
     || lk == 129221                // 'null' 'times'
     || lk == 129279                // 'true' 'times'
     || lk == 129619                // 'attribute' 'to'
     || lk == 129658                // 'element' 'to'
     || lk == 129671                // 'false' 'to'
     || lk == 129723                // 'namespace' 'to'
     || lk == 129733                // 'null' 'to'
     || lk == 129756                // 'processing-instruction' 'to'
     || lk == 129791                // 'true' 'to'
     || lk == 130131                // 'attribute' 'treat'
     || lk == 130170                // 'element' 'treat'
     || lk == 130183                // 'false' 'treat'
     || lk == 130235                // 'namespace' 'treat'
     || lk == 130245                // 'null' 'treat'
     || lk == 130268                // 'processing-instruction' 'treat'
     || lk == 130303                // 'true' 'treat'
     || lk == 133203                // 'attribute' 'union'
     || lk == 133242                // 'element' 'union'
     || lk == 133255                // 'false' 'union'
     || lk == 133307                // 'namespace' 'union'
     || lk == 133317                // 'null' 'union'
     || lk == 133340                // 'processing-instruction' 'union'
     || lk == 133375                // 'true' 'union'
     || lk == 139347                // 'attribute' 'where'
     || lk == 139386                // 'element' 'where'
     || lk == 139399                // 'false' 'where'
     || lk == 139451                // 'namespace' 'where'
     || lk == 139461                // 'null' 'where'
     || lk == 139484                // 'processing-instruction' 'where'
     || lk == 139519                // 'true' 'where'
     || lk == 141395                // 'attribute' 'with'
     || lk == 141434                // 'element' 'with'
     || lk == 141447                // 'false' 'with'
     || lk == 141499                // 'namespace' 'with'
     || lk == 141509                // 'null' 'with'
     || lk == 141532                // 'processing-instruction' 'with'
     || lk == 141567                // 'true' 'with'
     || lk == 142983                // 'false' 'words'
     || lk == 143045                // 'null' 'words'
     || lk == 143103                // 'true' 'words'
     || lk == 145543                // 'false' '|'
     || lk == 145605                // 'null' '|'
     || lk == 145663                // 'true' '|'
     || lk == 146055                // 'false' '||'
     || lk == 146117                // 'null' '||'
     || lk == 146175                // 'true' '||'
     || lk == 146567                // 'false' '|}'
     || lk == 146629                // 'null' '|}'
     || lk == 146687                // 'true' '|}'
     || lk == 147079                // 'false' '}'
     || lk == 147141                // 'null' '}'
     || lk == 147199)               // 'true' '}'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(4, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '$$'
    case 33:                        // '%'
    case 35:                        // '('
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 69:                        // '['
    case 281:                       // '{'
    case 283:                       // '{|'
    case 3155:                      // 'attribute' EQName^Token
    case 3194:                      // 'element' EQName^Token
    case 9915:                      // 'namespace' NCName^Token
    case 9948:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14927:                     // 'array' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14931:                     // 'attribute' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14969:                     // 'document-node' '#'
    case 14970:                     // 'element' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14973:                     // 'empty-sequence' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'false' '#'
    case 14984:                     // 'first' '#'
    case 14985:                     // 'following' '#'
    case 14986:                     // 'following-sibling' '#'
    case 14987:                     // 'for' '#'
    case 14990:                     // 'from' '#'
    case 14991:                     // 'ft-option' '#'
    case 14995:                     // 'function' '#'
    case 14996:                     // 'ge' '#'
    case 14998:                     // 'group' '#'
    case 15000:                     // 'gt' '#'
    case 15001:                     // 'idiv' '#'
    case 15002:                     // 'if' '#'
    case 15003:                     // 'import' '#'
    case 15004:                     // 'in' '#'
    case 15005:                     // 'index' '#'
    case 15009:                     // 'insert' '#'
    case 15010:                     // 'instance' '#'
    case 15011:                     // 'integrity' '#'
    case 15012:                     // 'intersect' '#'
    case 15013:                     // 'into' '#'
    case 15014:                     // 'is' '#'
    case 15015:                     // 'item' '#'
    case 15016:                     // 'json' '#'
    case 15017:                     // 'json-item' '#'
    case 15018:                     // 'jsoniq' '#'
    case 15021:                     // 'last' '#'
    case 15022:                     // 'lax' '#'
    case 15023:                     // 'le' '#'
    case 15025:                     // 'let' '#'
    case 15027:                     // 'loop' '#'
    case 15029:                     // 'lt' '#'
    case 15031:                     // 'mod' '#'
    case 15032:                     // 'modify' '#'
    case 15033:                     // 'module' '#'
    case 15035:                     // 'namespace' '#'
    case 15036:                     // 'namespace-node' '#'
    case 15037:                     // 'ne' '#'
    case 15042:                     // 'node' '#'
    case 15043:                     // 'nodes' '#'
    case 15045:                     // 'null' '#'
    case 15046:                     // 'object' '#'
    case 15050:                     // 'only' '#'
    case 15051:                     // 'option' '#'
    case 15052:                     // 'or' '#'
    case 15053:                     // 'order' '#'
    case 15054:                     // 'ordered' '#'
    case 15055:                     // 'ordering' '#'
    case 15058:                     // 'parent' '#'
    case 15064:                     // 'preceding' '#'
    case 15065:                     // 'preceding-sibling' '#'
    case 15068:                     // 'processing-instruction' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15072:                     // 'return' '#'
    case 15073:                     // 'returning' '#'
    case 15074:                     // 'revalidation' '#'
    case 15076:                     // 'satisfies' '#'
    case 15077:                     // 'schema' '#'
    case 15078:                     // 'schema-attribute' '#'
    case 15079:                     // 'schema-element' '#'
    case 15080:                     // 'score' '#'
    case 15081:                     // 'select' '#'
    case 15082:                     // 'self' '#'
    case 15087:                     // 'sliding' '#'
    case 15088:                     // 'some' '#'
    case 15089:                     // 'stable' '#'
    case 15090:                     // 'start' '#'
    case 15093:                     // 'strict' '#'
    case 15095:                     // 'structured-item' '#'
    case 15096:                     // 'switch' '#'
    case 15097:                     // 'text' '#'
    case 15101:                     // 'to' '#'
    case 15102:                     // 'treat' '#'
    case 15103:                     // 'true' '#'
    case 15104:                     // 'try' '#'
    case 15105:                     // 'tumbling' '#'
    case 15106:                     // 'type' '#'
    case 15107:                     // 'typeswitch' '#'
    case 15108:                     // 'union' '#'
    case 15110:                     // 'unordered' '#'
    case 15111:                     // 'updating' '#'
    case 15114:                     // 'validate' '#'
    case 15115:                     // 'value' '#'
    case 15116:                     // 'variable' '#'
    case 15117:                     // 'version' '#'
    case 15120:                     // 'where' '#'
    case 15121:                     // 'while' '#'
    case 15124:                     // 'with' '#'
    case 17926:                     // EQName^Token '('
    case 17991:                     // 'after' '('
    case 17993:                     // 'allowing' '('
    case 17994:                     // 'ancestor' '('
    case 17995:                     // 'ancestor-or-self' '('
    case 17996:                     // 'and' '('
    case 17998:                     // 'append' '('
    case 18000:                     // 'as' '('
    case 18001:                     // 'ascending' '('
    case 18002:                     // 'at' '('
    case 18004:                     // 'base-uri' '('
    case 18005:                     // 'before' '('
    case 18006:                     // 'boundary-space' '('
    case 18007:                     // 'break' '('
    case 18009:                     // 'case' '('
    case 18010:                     // 'cast' '('
    case 18011:                     // 'castable' '('
    case 18012:                     // 'catch' '('
    case 18014:                     // 'child' '('
    case 18015:                     // 'collation' '('
    case 18018:                     // 'constraint' '('
    case 18019:                     // 'construction' '('
    case 18022:                     // 'context' '('
    case 18023:                     // 'continue' '('
    case 18024:                     // 'copy' '('
    case 18025:                     // 'copy-namespaces' '('
    case 18026:                     // 'count' '('
    case 18027:                     // 'decimal-format' '('
    case 18029:                     // 'declare' '('
    case 18030:                     // 'default' '('
    case 18031:                     // 'delete' '('
    case 18032:                     // 'descendant' '('
    case 18033:                     // 'descendant-or-self' '('
    case 18034:                     // 'descending' '('
    case 18039:                     // 'div' '('
    case 18040:                     // 'document' '('
    case 18043:                     // 'else' '('
    case 18044:                     // 'empty' '('
    case 18046:                     // 'encoding' '('
    case 18047:                     // 'end' '('
    case 18049:                     // 'eq' '('
    case 18050:                     // 'every' '('
    case 18052:                     // 'except' '('
    case 18053:                     // 'exit' '('
    case 18054:                     // 'external' '('
    case 18055:                     // 'false' '('
    case 18056:                     // 'first' '('
    case 18057:                     // 'following' '('
    case 18058:                     // 'following-sibling' '('
    case 18059:                     // 'for' '('
    case 18062:                     // 'from' '('
    case 18063:                     // 'ft-option' '('
    case 18067:                     // 'function' '('
    case 18068:                     // 'ge' '('
    case 18070:                     // 'group' '('
    case 18072:                     // 'gt' '('
    case 18073:                     // 'idiv' '('
    case 18075:                     // 'import' '('
    case 18076:                     // 'in' '('
    case 18077:                     // 'index' '('
    case 18081:                     // 'insert' '('
    case 18082:                     // 'instance' '('
    case 18083:                     // 'integrity' '('
    case 18084:                     // 'intersect' '('
    case 18085:                     // 'into' '('
    case 18086:                     // 'is' '('
    case 18088:                     // 'json' '('
    case 18090:                     // 'jsoniq' '('
    case 18093:                     // 'last' '('
    case 18094:                     // 'lax' '('
    case 18095:                     // 'le' '('
    case 18097:                     // 'let' '('
    case 18099:                     // 'loop' '('
    case 18101:                     // 'lt' '('
    case 18103:                     // 'mod' '('
    case 18104:                     // 'modify' '('
    case 18105:                     // 'module' '('
    case 18107:                     // 'namespace' '('
    case 18109:                     // 'ne' '('
    case 18115:                     // 'nodes' '('
    case 18117:                     // 'null' '('
    case 18118:                     // 'object' '('
    case 18122:                     // 'only' '('
    case 18123:                     // 'option' '('
    case 18124:                     // 'or' '('
    case 18125:                     // 'order' '('
    case 18126:                     // 'ordered' '('
    case 18127:                     // 'ordering' '('
    case 18130:                     // 'parent' '('
    case 18136:                     // 'preceding' '('
    case 18137:                     // 'preceding-sibling' '('
    case 18142:                     // 'rename' '('
    case 18143:                     // 'replace' '('
    case 18144:                     // 'return' '('
    case 18145:                     // 'returning' '('
    case 18146:                     // 'revalidation' '('
    case 18148:                     // 'satisfies' '('
    case 18149:                     // 'schema' '('
    case 18152:                     // 'score' '('
    case 18153:                     // 'select' '('
    case 18154:                     // 'self' '('
    case 18159:                     // 'sliding' '('
    case 18160:                     // 'some' '('
    case 18161:                     // 'stable' '('
    case 18162:                     // 'start' '('
    case 18165:                     // 'strict' '('
    case 18173:                     // 'to' '('
    case 18174:                     // 'treat' '('
    case 18175:                     // 'true' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 23175:                     // 'false' '.'
    case 23237:                     // 'null' '.'
    case 23295:                     // 'true' '.'
    case 37459:                     // 'attribute' 'allowing'
    case 37498:                     // 'element' 'allowing'
    case 37563:                     // 'namespace' 'allowing'
    case 37596:                     // 'processing-instruction' 'allowing'
    case 37971:                     // 'attribute' 'ancestor'
    case 38010:                     // 'element' 'ancestor'
    case 38075:                     // 'namespace' 'ancestor'
    case 38108:                     // 'processing-instruction' 'ancestor'
    case 38483:                     // 'attribute' 'ancestor-or-self'
    case 38522:                     // 'element' 'ancestor-or-self'
    case 38587:                     // 'namespace' 'ancestor-or-self'
    case 38620:                     // 'processing-instruction' 'ancestor-or-self'
    case 40019:                     // 'attribute' 'append'
    case 40058:                     // 'element' 'append'
    case 40123:                     // 'namespace' 'append'
    case 40156:                     // 'processing-instruction' 'append'
    case 40531:                     // 'attribute' 'array'
    case 40570:                     // 'element' 'array'
    case 42579:                     // 'attribute' 'attribute'
    case 42618:                     // 'element' 'attribute'
    case 42683:                     // 'namespace' 'attribute'
    case 42716:                     // 'processing-instruction' 'attribute'
    case 43091:                     // 'attribute' 'base-uri'
    case 43130:                     // 'element' 'base-uri'
    case 43195:                     // 'namespace' 'base-uri'
    case 43228:                     // 'processing-instruction' 'base-uri'
    case 44115:                     // 'attribute' 'boundary-space'
    case 44154:                     // 'element' 'boundary-space'
    case 44219:                     // 'namespace' 'boundary-space'
    case 44252:                     // 'processing-instruction' 'boundary-space'
    case 44627:                     // 'attribute' 'break'
    case 44666:                     // 'element' 'break'
    case 44731:                     // 'namespace' 'break'
    case 44764:                     // 'processing-instruction' 'break'
    case 47187:                     // 'attribute' 'catch'
    case 47226:                     // 'element' 'catch'
    case 47291:                     // 'namespace' 'catch'
    case 47324:                     // 'processing-instruction' 'catch'
    case 48211:                     // 'attribute' 'child'
    case 48250:                     // 'element' 'child'
    case 48315:                     // 'namespace' 'child'
    case 48348:                     // 'processing-instruction' 'child'
    case 49747:                     // 'attribute' 'comment'
    case 49786:                     // 'element' 'comment'
    case 49851:                     // 'namespace' 'comment'
    case 49884:                     // 'processing-instruction' 'comment'
    case 50259:                     // 'attribute' 'constraint'
    case 50298:                     // 'element' 'constraint'
    case 50363:                     // 'namespace' 'constraint'
    case 50396:                     // 'processing-instruction' 'constraint'
    case 50771:                     // 'attribute' 'construction'
    case 50810:                     // 'element' 'construction'
    case 50875:                     // 'namespace' 'construction'
    case 50908:                     // 'processing-instruction' 'construction'
    case 52307:                     // 'attribute' 'context'
    case 52346:                     // 'element' 'context'
    case 52411:                     // 'namespace' 'context'
    case 52444:                     // 'processing-instruction' 'context'
    case 52819:                     // 'attribute' 'continue'
    case 52858:                     // 'element' 'continue'
    case 52923:                     // 'namespace' 'continue'
    case 52956:                     // 'processing-instruction' 'continue'
    case 53331:                     // 'attribute' 'copy'
    case 53370:                     // 'element' 'copy'
    case 53435:                     // 'namespace' 'copy'
    case 53468:                     // 'processing-instruction' 'copy'
    case 53843:                     // 'attribute' 'copy-namespaces'
    case 53882:                     // 'element' 'copy-namespaces'
    case 53947:                     // 'namespace' 'copy-namespaces'
    case 53980:                     // 'processing-instruction' 'copy-namespaces'
    case 54867:                     // 'attribute' 'decimal-format'
    case 54906:                     // 'element' 'decimal-format'
    case 54971:                     // 'namespace' 'decimal-format'
    case 55004:                     // 'processing-instruction' 'decimal-format'
    case 55891:                     // 'attribute' 'declare'
    case 55930:                     // 'element' 'declare'
    case 55995:                     // 'namespace' 'declare'
    case 56028:                     // 'processing-instruction' 'declare'
    case 56915:                     // 'attribute' 'delete'
    case 56954:                     // 'element' 'delete'
    case 57019:                     // 'namespace' 'delete'
    case 57052:                     // 'processing-instruction' 'delete'
    case 57427:                     // 'attribute' 'descendant'
    case 57466:                     // 'element' 'descendant'
    case 57531:                     // 'namespace' 'descendant'
    case 57564:                     // 'processing-instruction' 'descendant'
    case 57939:                     // 'attribute' 'descendant-or-self'
    case 57978:                     // 'element' 'descendant-or-self'
    case 58043:                     // 'namespace' 'descendant-or-self'
    case 58076:                     // 'processing-instruction' 'descendant-or-self'
    case 61523:                     // 'attribute' 'document'
    case 61562:                     // 'element' 'document'
    case 61627:                     // 'namespace' 'document'
    case 61660:                     // 'processing-instruction' 'document'
    case 62035:                     // 'attribute' 'document-node'
    case 62074:                     // 'element' 'document-node'
    case 62139:                     // 'namespace' 'document-node'
    case 62172:                     // 'processing-instruction' 'document-node'
    case 62547:                     // 'attribute' 'element'
    case 62586:                     // 'element' 'element'
    case 62651:                     // 'namespace' 'element'
    case 62684:                     // 'processing-instruction' 'element'
    case 64083:                     // 'attribute' 'empty-sequence'
    case 64122:                     // 'element' 'empty-sequence'
    case 64187:                     // 'namespace' 'empty-sequence'
    case 64220:                     // 'processing-instruction' 'empty-sequence'
    case 64595:                     // 'attribute' 'encoding'
    case 64634:                     // 'element' 'encoding'
    case 64699:                     // 'namespace' 'encoding'
    case 64732:                     // 'processing-instruction' 'encoding'
    case 66643:                     // 'attribute' 'every'
    case 66682:                     // 'element' 'every'
    case 66747:                     // 'namespace' 'every'
    case 66780:                     // 'processing-instruction' 'every'
    case 68179:                     // 'attribute' 'exit'
    case 68218:                     // 'element' 'exit'
    case 68283:                     // 'namespace' 'exit'
    case 68316:                     // 'processing-instruction' 'exit'
    case 68691:                     // 'attribute' 'external'
    case 68730:                     // 'element' 'external'
    case 68795:                     // 'namespace' 'external'
    case 68828:                     // 'processing-instruction' 'external'
    case 69203:                     // 'attribute' 'false'
    case 69242:                     // 'element' 'false'
    case 69307:                     // 'namespace' 'false'
    case 69340:                     // 'processing-instruction' 'false'
    case 69715:                     // 'attribute' 'first'
    case 69754:                     // 'element' 'first'
    case 69819:                     // 'namespace' 'first'
    case 69852:                     // 'processing-instruction' 'first'
    case 70227:                     // 'attribute' 'following'
    case 70266:                     // 'element' 'following'
    case 70331:                     // 'namespace' 'following'
    case 70364:                     // 'processing-instruction' 'following'
    case 70739:                     // 'attribute' 'following-sibling'
    case 70778:                     // 'element' 'following-sibling'
    case 70843:                     // 'namespace' 'following-sibling'
    case 70876:                     // 'processing-instruction' 'following-sibling'
    case 72787:                     // 'attribute' 'from'
    case 72826:                     // 'element' 'from'
    case 72891:                     // 'namespace' 'from'
    case 72924:                     // 'processing-instruction' 'from'
    case 73299:                     // 'attribute' 'ft-option'
    case 73338:                     // 'element' 'ft-option'
    case 73403:                     // 'namespace' 'ft-option'
    case 73436:                     // 'processing-instruction' 'ft-option'
    case 75347:                     // 'attribute' 'function'
    case 75386:                     // 'element' 'function'
    case 75451:                     // 'namespace' 'function'
    case 75484:                     // 'processing-instruction' 'function'
    case 78931:                     // 'attribute' 'if'
    case 78970:                     // 'element' 'if'
    case 79035:                     // 'namespace' 'if'
    case 79068:                     // 'processing-instruction' 'if'
    case 79443:                     // 'attribute' 'import'
    case 79482:                     // 'element' 'import'
    case 79547:                     // 'namespace' 'import'
    case 79580:                     // 'processing-instruction' 'import'
    case 79955:                     // 'attribute' 'in'
    case 79994:                     // 'element' 'in'
    case 80059:                     // 'namespace' 'in'
    case 80092:                     // 'processing-instruction' 'in'
    case 80467:                     // 'attribute' 'index'
    case 80506:                     // 'element' 'index'
    case 80571:                     // 'namespace' 'index'
    case 80604:                     // 'processing-instruction' 'index'
    case 82515:                     // 'attribute' 'insert'
    case 82554:                     // 'element' 'insert'
    case 82619:                     // 'namespace' 'insert'
    case 82652:                     // 'processing-instruction' 'insert'
    case 83539:                     // 'attribute' 'integrity'
    case 83578:                     // 'element' 'integrity'
    case 83643:                     // 'namespace' 'integrity'
    case 83676:                     // 'processing-instruction' 'integrity'
    case 85587:                     // 'attribute' 'item'
    case 85626:                     // 'element' 'item'
    case 85691:                     // 'namespace' 'item'
    case 85724:                     // 'processing-instruction' 'item'
    case 86099:                     // 'attribute' 'json'
    case 86138:                     // 'element' 'json'
    case 86203:                     // 'namespace' 'json'
    case 86236:                     // 'processing-instruction' 'json'
    case 86611:                     // 'attribute' 'json-item'
    case 86650:                     // 'element' 'json-item'
    case 87123:                     // 'attribute' 'jsoniq'
    case 87162:                     // 'element' 'jsoniq'
    case 87227:                     // 'namespace' 'jsoniq'
    case 87260:                     // 'processing-instruction' 'jsoniq'
    case 88659:                     // 'attribute' 'last'
    case 88698:                     // 'element' 'last'
    case 88763:                     // 'namespace' 'last'
    case 88796:                     // 'processing-instruction' 'last'
    case 89171:                     // 'attribute' 'lax'
    case 89210:                     // 'element' 'lax'
    case 89275:                     // 'namespace' 'lax'
    case 89308:                     // 'processing-instruction' 'lax'
    case 91731:                     // 'attribute' 'loop'
    case 91770:                     // 'element' 'loop'
    case 91835:                     // 'namespace' 'loop'
    case 91868:                     // 'processing-instruction' 'loop'
    case 94803:                     // 'attribute' 'module'
    case 94842:                     // 'element' 'module'
    case 94907:                     // 'namespace' 'module'
    case 94940:                     // 'processing-instruction' 'module'
    case 95827:                     // 'attribute' 'namespace'
    case 95866:                     // 'element' 'namespace'
    case 95931:                     // 'namespace' 'namespace'
    case 95964:                     // 'processing-instruction' 'namespace'
    case 96339:                     // 'attribute' 'namespace-node'
    case 96378:                     // 'element' 'namespace-node'
    case 96443:                     // 'namespace' 'namespace-node'
    case 96476:                     // 'processing-instruction' 'namespace-node'
    case 99411:                     // 'attribute' 'node'
    case 99450:                     // 'element' 'node'
    case 99515:                     // 'namespace' 'node'
    case 99548:                     // 'processing-instruction' 'node'
    case 99923:                     // 'attribute' 'nodes'
    case 99962:                     // 'element' 'nodes'
    case 100027:                    // 'namespace' 'nodes'
    case 100060:                    // 'processing-instruction' 'nodes'
    case 100947:                    // 'attribute' 'null'
    case 100986:                    // 'element' 'null'
    case 101051:                    // 'namespace' 'null'
    case 101084:                    // 'processing-instruction' 'null'
    case 101459:                    // 'attribute' 'object'
    case 101498:                    // 'element' 'object'
    case 101563:                    // 'namespace' 'object'
    case 101596:                    // 'processing-instruction' 'object'
    case 104019:                    // 'attribute' 'option'
    case 104058:                    // 'element' 'option'
    case 104123:                    // 'namespace' 'option'
    case 104156:                    // 'processing-instruction' 'option'
    case 105555:                    // 'attribute' 'ordered'
    case 105594:                    // 'element' 'ordered'
    case 105659:                    // 'namespace' 'ordered'
    case 105692:                    // 'processing-instruction' 'ordered'
    case 106067:                    // 'attribute' 'ordering'
    case 106106:                    // 'element' 'ordering'
    case 106171:                    // 'namespace' 'ordering'
    case 106204:                    // 'processing-instruction' 'ordering'
    case 107603:                    // 'attribute' 'parent'
    case 107642:                    // 'element' 'parent'
    case 107707:                    // 'namespace' 'parent'
    case 107740:                    // 'processing-instruction' 'parent'
    case 110675:                    // 'attribute' 'preceding'
    case 110714:                    // 'element' 'preceding'
    case 110779:                    // 'namespace' 'preceding'
    case 110812:                    // 'processing-instruction' 'preceding'
    case 111187:                    // 'attribute' 'preceding-sibling'
    case 111226:                    // 'element' 'preceding-sibling'
    case 111291:                    // 'namespace' 'preceding-sibling'
    case 111324:                    // 'processing-instruction' 'preceding-sibling'
    case 112723:                    // 'attribute' 'processing-instruction'
    case 112762:                    // 'element' 'processing-instruction'
    case 112827:                    // 'namespace' 'processing-instruction'
    case 112860:                    // 'processing-instruction' 'processing-instruction'
    case 113747:                    // 'attribute' 'rename'
    case 113786:                    // 'element' 'rename'
    case 113851:                    // 'namespace' 'rename'
    case 113884:                    // 'processing-instruction' 'rename'
    case 114259:                    // 'attribute' 'replace'
    case 114298:                    // 'element' 'replace'
    case 114363:                    // 'namespace' 'replace'
    case 114396:                    // 'processing-instruction' 'replace'
    case 115283:                    // 'attribute' 'returning'
    case 115322:                    // 'element' 'returning'
    case 115387:                    // 'namespace' 'returning'
    case 115420:                    // 'processing-instruction' 'returning'
    case 115795:                    // 'attribute' 'revalidation'
    case 115834:                    // 'element' 'revalidation'
    case 115899:                    // 'namespace' 'revalidation'
    case 115932:                    // 'processing-instruction' 'revalidation'
    case 117331:                    // 'attribute' 'schema'
    case 117370:                    // 'element' 'schema'
    case 117435:                    // 'namespace' 'schema'
    case 117468:                    // 'processing-instruction' 'schema'
    case 117843:                    // 'attribute' 'schema-attribute'
    case 117882:                    // 'element' 'schema-attribute'
    case 117947:                    // 'namespace' 'schema-attribute'
    case 117980:                    // 'processing-instruction' 'schema-attribute'
    case 118355:                    // 'attribute' 'schema-element'
    case 118394:                    // 'element' 'schema-element'
    case 118459:                    // 'namespace' 'schema-element'
    case 118492:                    // 'processing-instruction' 'schema-element'
    case 118867:                    // 'attribute' 'score'
    case 118906:                    // 'element' 'score'
    case 118971:                    // 'namespace' 'score'
    case 119004:                    // 'processing-instruction' 'score'
    case 119379:                    // 'attribute' 'select'
    case 119418:                    // 'element' 'select'
    case 119483:                    // 'namespace' 'select'
    case 119516:                    // 'processing-instruction' 'select'
    case 119891:                    // 'attribute' 'self'
    case 119930:                    // 'element' 'self'
    case 119995:                    // 'namespace' 'self'
    case 120028:                    // 'processing-instruction' 'self'
    case 122451:                    // 'attribute' 'sliding'
    case 122490:                    // 'element' 'sliding'
    case 122555:                    // 'namespace' 'sliding'
    case 122588:                    // 'processing-instruction' 'sliding'
    case 122963:                    // 'attribute' 'some'
    case 123002:                    // 'element' 'some'
    case 123067:                    // 'namespace' 'some'
    case 123100:                    // 'processing-instruction' 'some'
    case 125523:                    // 'attribute' 'strict'
    case 125562:                    // 'element' 'strict'
    case 125627:                    // 'namespace' 'strict'
    case 125660:                    // 'processing-instruction' 'strict'
    case 126547:                    // 'attribute' 'structured-item'
    case 126586:                    // 'element' 'structured-item'
    case 127059:                    // 'attribute' 'switch'
    case 127098:                    // 'element' 'switch'
    case 127163:                    // 'namespace' 'switch'
    case 127196:                    // 'processing-instruction' 'switch'
    case 127571:                    // 'attribute' 'text'
    case 127610:                    // 'element' 'text'
    case 127675:                    // 'namespace' 'text'
    case 127708:                    // 'processing-instruction' 'text'
    case 130643:                    // 'attribute' 'true'
    case 130682:                    // 'element' 'true'
    case 130747:                    // 'namespace' 'true'
    case 130780:                    // 'processing-instruction' 'true'
    case 131155:                    // 'attribute' 'try'
    case 131194:                    // 'element' 'try'
    case 131259:                    // 'namespace' 'try'
    case 131292:                    // 'processing-instruction' 'try'
    case 131667:                    // 'attribute' 'tumbling'
    case 131706:                    // 'element' 'tumbling'
    case 131771:                    // 'namespace' 'tumbling'
    case 131804:                    // 'processing-instruction' 'tumbling'
    case 132179:                    // 'attribute' 'type'
    case 132218:                    // 'element' 'type'
    case 132283:                    // 'namespace' 'type'
    case 132316:                    // 'processing-instruction' 'type'
    case 132691:                    // 'attribute' 'typeswitch'
    case 132730:                    // 'element' 'typeswitch'
    case 132795:                    // 'namespace' 'typeswitch'
    case 132828:                    // 'processing-instruction' 'typeswitch'
    case 134227:                    // 'attribute' 'unordered'
    case 134266:                    // 'element' 'unordered'
    case 134331:                    // 'namespace' 'unordered'
    case 134364:                    // 'processing-instruction' 'unordered'
    case 134739:                    // 'attribute' 'updating'
    case 134778:                    // 'element' 'updating'
    case 134843:                    // 'namespace' 'updating'
    case 134876:                    // 'processing-instruction' 'updating'
    case 136275:                    // 'attribute' 'validate'
    case 136314:                    // 'element' 'validate'
    case 136379:                    // 'namespace' 'validate'
    case 136412:                    // 'processing-instruction' 'validate'
    case 136787:                    // 'attribute' 'value'
    case 136826:                    // 'element' 'value'
    case 136891:                    // 'namespace' 'value'
    case 136924:                    // 'processing-instruction' 'value'
    case 137299:                    // 'attribute' 'variable'
    case 137338:                    // 'element' 'variable'
    case 137403:                    // 'namespace' 'variable'
    case 137436:                    // 'processing-instruction' 'variable'
    case 137811:                    // 'attribute' 'version'
    case 137850:                    // 'element' 'version'
    case 137915:                    // 'namespace' 'version'
    case 137948:                    // 'processing-instruction' 'version'
    case 139859:                    // 'attribute' 'while'
    case 139898:                    // 'element' 'while'
    case 139963:                    // 'namespace' 'while'
    case 139996:                    // 'processing-instruction' 'while'
    case 143955:                    // 'attribute' '{'
    case 143969:                    // 'comment' '{'
    case 143992:                    // 'document' '{'
    case 143994:                    // 'element' '{'
    case 144059:                    // 'namespace' '{'
    case 144078:                    // 'ordered' '{'
    case 144092:                    // 'processing-instruction' '{'
    case 144121:                    // 'text' '{'
    case 144134:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 46:                        // '..'
    case 26698:                     // 'ancestor' '::'
    case 26699:                     // 'ancestor-or-self' '::'
    case 26834:                     // 'parent' '::'
    case 26840:                     // 'preceding' '::'
    case 26841:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(228);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 46:                        // '..'
    case 26698:                     // 'ancestor' '::'
    case 26699:                     // 'ancestor-or-self' '::'
    case 26834:                     // 'parent' '::'
    case 26840:                     // 'preceding' '::'
    case 26841:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(228);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 234:                       // 'self'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26707:                     // 'attribute' '::'
    case 26718:                     // 'child' '::'
    case 26736:                     // 'descendant' '::'
    case 26737:                     // 'descendant-or-self' '::'
    case 26761:                     // 'following' '::'
    case 26762:                     // 'following-sibling' '::'
    case 26858:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(249);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 83:                        // 'attribute'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    case 94:                        // 'child'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 234:                       // 'self'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26707:                     // 'attribute' '::'
    case 26718:                     // 'child' '::'
    case 26736:                     // 'descendant' '::'
    case 26737:                     // 'descendant-or-self' '::'
    case 26761:                     // 'following' '::'
    case 26762:                     // 'following-sibling' '::'
    case 26858:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(249);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 94:                        // 'child'
      shift(94);                    // 'child'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 112:                       // 'descendant'
      shift(112);                   // 'descendant'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 83:                        // 'attribute'
      shift(83);                    // 'attribute'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 234:                       // 'self'
      shift(234);                   // 'self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 113:                       // 'descendant-or-self'
      shift(113);                   // 'descendant-or-self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 138:                       // 'following-sibling'
      shift(138);                   // 'following-sibling'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    default:
      shift(137);                   // 'following'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 94:                        // 'child'
      shiftT(94);                   // 'child'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 112:                       // 'descendant'
      shiftT(112);                  // 'descendant'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 83:                        // 'attribute'
      shiftT(83);                   // 'attribute'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 234:                       // 'self'
      shiftT(234);                  // 'self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 113:                       // 'descendant-or-self'
      shiftT(113);                  // 'descendant-or-self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 138:                       // 'following-sibling'
      shiftT(138);                  // 'following-sibling'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    default:
      shiftT(137);                  // 'following'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 67)                   // '@'
    {
      shift(67);                    // '@'
    }
    lookahead1W(249);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 67)                   // '@'
    {
      shiftT(67);                   // '@'
    }
    lookahead1W(249);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 46:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(249);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 46:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(249);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 210:                       // 'parent'
      shift(210);                   // 'parent'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 74:                        // 'ancestor'
      shift(74);                    // 'ancestor'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 217:                       // 'preceding-sibling'
      shift(217);                   // 'preceding-sibling'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    case 216:                       // 'preceding'
      shift(216);                   // 'preceding'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
      break;
    default:
      shift(75);                    // 'ancestor-or-self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shift(52);                    // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 210:                       // 'parent'
      shiftT(210);                  // 'parent'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 74:                        // 'ancestor'
      shiftT(74);                   // 'ancestor'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 217:                       // 'preceding-sibling'
      shiftT(217);                  // 'preceding-sibling'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    case 216:                       // 'preceding'
      shiftT(216);                  // 'preceding'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
      break;
    default:
      shiftT(75);                   // 'ancestor-or-self'
      lookahead1W(27);              // S^WS | '(:' | '::'
      shiftT(52);                   // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    shift(46);                      // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    shiftT(46);                     // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 220:                       // 'processing-instruction'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 249:                       // 'text'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18003:                     // 'attribute' '('
    case 18017:                     // 'comment' '('
    case 18041:                     // 'document-node' '('
    case 18042:                     // 'element' '('
    case 18108:                     // 'namespace-node' '('
    case 18114:                     // 'node' '('
    case 18140:                     // 'processing-instruction' '('
    case 18150:                     // 'schema-attribute' '('
    case 18151:                     // 'schema-element' '('
    case 18169:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 220:                       // 'processing-instruction'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 249:                       // 'text'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18003:                     // 'attribute' '('
    case 18017:                     // 'comment' '('
    case 18041:                     // 'document-node' '('
    case 18042:                     // 'element' '('
    case 18108:                     // 'namespace-node' '('
    case 18114:                     // 'node' '('
    case 18140:                     // 'processing-instruction' '('
    case 18150:                     // 'schema-attribute' '('
    case 18151:                     // 'schema-element' '('
    case 18169:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 5:                         // Wildcard
      shift(5);                     // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 5:                         // Wildcard
      shiftT(5);                    // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(235);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' |
      if (l1 != 35                  // '('
       && l1 != 45                  // '.'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        lookahead2W(273);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      default:
        lk = l1;
      }
      if (lk == 35397)              // '[' '['
      {
        lk = memoized(5, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Predicate();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -4;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0, lk);
        }
      }
      switch (lk)
      {
      case 35:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      case 45:                      // '.'
        whitespace();
        parse_ObjectLookup();
        break;
      case -4:
        whitespace();
        parse_ArrayLookup();
        break;
      case 35909:                   // '[' ']'
        whitespace();
        parse_ArrayUnboxing();
        break;
      default:
        whitespace();
        parse_Predicate();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(235);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' | '/' |
      if (l1 != 35                  // '('
       && l1 != 45                  // '.'
       && l1 != 69)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 69:                      // '['
        lookahead2W(273);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      default:
        lk = l1;
      }
      if (lk == 35397)              // '[' '['
      {
        lk = memoized(5, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Predicate();
            memoize(5, e0A, -1);
            lk = -6;
          }
          catch (p1A)
          {
            lk = -4;
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(5, e0A, -4);
          }
        }
      }
      switch (lk)
      {
      case 35:                      // '('
        try_ArgumentList();
        break;
      case 45:                      // '.'
        try_ObjectLookup();
        break;
      case -4:
        try_ArrayLookup();
        break;
      case 35909:                   // '[' ']'
        try_ArrayUnboxing();
        break;
      case -6:
        break;
      default:
        try_Predicate();
      }
    }
  }

  function parse_ObjectLookup()
  {
    eventHandler.startNonterminal("ObjectLookup", e0);
    shift(45);                      // '.'
    lookahead1W(251);               // StringLiteral | NCName^Token | S^WS | '$' | '$$' | '(' | '(:' | 'after' |
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    case 35:                        // '('
      whitespace();
      parse_ParenthesizedExpr();
      break;
    case 31:                        // '$'
      whitespace();
      parse_VarRef();
      break;
    case 32:                        // '$$'
      whitespace();
      parse_ContextItemExpr();
      break;
    default:
      whitespace();
      parse_NCName();
    }
    eventHandler.endNonterminal("ObjectLookup", e0);
  }

  function try_ObjectLookup()
  {
    shiftT(45);                     // '.'
    lookahead1W(251);               // StringLiteral | NCName^Token | S^WS | '$' | '$$' | '(' | '(:' | 'after' |
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 32:                        // '$$'
      try_ContextItemExpr();
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrayLookup()
  {
    eventHandler.startNonterminal("ArrayLookup", e0);
    shift(69);                      // '['
    lookahead1W(31);                // S^WS | '(:' | '['
    shift(69);                      // '['
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(70);                      // ']'
    lookahead1W(32);                // S^WS | '(:' | ']'
    shift(70);                      // ']'
    eventHandler.endNonterminal("ArrayLookup", e0);
  }

  function try_ArrayLookup()
  {
    shiftT(69);                     // '['
    lookahead1W(31);                // S^WS | '(:' | '['
    shiftT(69);                     // '['
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(70);                     // ']'
    lookahead1W(32);                // S^WS | '(:' | ']'
    shiftT(70);                     // ']'
  }

  function parse_ArrayUnboxing()
  {
    eventHandler.startNonterminal("ArrayUnboxing", e0);
    shift(69);                      // '['
    lookahead1W(32);                // S^WS | '(:' | ']'
    shift(70);                      // ']'
    eventHandler.endNonterminal("ArrayUnboxing", e0);
  }

  function try_ArrayUnboxing()
  {
    shiftT(69);                     // '['
    lookahead1W(32);                // S^WS | '(:' | ']'
    shiftT(70);                     // ']'
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    shift(35);                      // '('
    lookahead1W(280);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(272);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        whitespace();
        parse_Argument();
      }
    }
    shift(38);                      // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    shiftT(35);                     // '('
    lookahead1W(280);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 38)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(272);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        try_Argument();
      }
    }
    shiftT(38);                     // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(228);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
      if (l1 != 69)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(228);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
      if (l1 != 69)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    shift(69);                      // '['
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(70);                      // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    shiftT(69);                     // '['
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(70);                     // ']'
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    case 135:                       // 'false'
    case 255:                       // 'true'
      parse_BooleanLiteral();
      break;
    case 197:                       // 'null'
      parse_NullLiteral();
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    case 135:                       // 'false'
    case 255:                       // 'true'
      try_BooleanLiteral();
      break;
    case 197:                       // 'null'
      try_NullLiteral();
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_BooleanLiteral()
  {
    eventHandler.startNonterminal("BooleanLiteral", e0);
    switch (l1)
    {
    case 255:                       // 'true'
      shift(255);                   // 'true'
      break;
    default:
      shift(135);                   // 'false'
    }
    eventHandler.endNonterminal("BooleanLiteral", e0);
  }

  function try_BooleanLiteral()
  {
    switch (l1)
    {
    case 255:                       // 'true'
      shiftT(255);                  // 'true'
      break;
    default:
      shiftT(135);                  // 'false'
    }
  }

  function parse_NullLiteral()
  {
    eventHandler.startNonterminal("NullLiteral", e0);
    shift(197);                     // 'null'
    eventHandler.endNonterminal("NullLiteral", e0);
  }

  function try_NullLiteral()
  {
    shiftT(197);                    // 'null'
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      shift(8);                     // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      shift(9);                     // DecimalLiteral
      break;
    default:
      shift(10);                    // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      shiftT(8);                    // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      shiftT(9);                    // DecimalLiteral
      break;
    default:
      shiftT(10);                   // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    shiftT(31);                     // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    shift(35);                      // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    shift(38);                      // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    shiftT(35);                     // '('
    lookahead1W(270);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 38)                   // ')'
    {
      try_Expr();
    }
    shiftT(38);                     // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    shift(32);                      // '$$'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    shiftT(32);                     // '$$'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    shift(206);                     // 'ordered'
    lookahead1W(90);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    shiftT(206);                    // 'ordered'
    lookahead1W(90);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    shift(262);                     // 'unordered'
    lookahead1W(90);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    shiftT(262);                    // 'unordered'
    lookahead1W(90);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 65:                        // '?'
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 65:                        // '?'
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    shift(65);                      // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    shiftT(65);                     // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 55:                        // '<'
      parse_DirElemConstructor();
      break;
    case 56:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 55:                        // '<'
      try_DirElemConstructor();
      break;
    case 56:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    shift(55);                      // '<'
    lookahead1(4);                  // QName
    shift(20);                      // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 49:                        // '/>'
      shift(49);                    // '/>'
      break;
    default:
      shift(62);                    // '>'
      for (;;)
      {
        lookahead1(196);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
        if (l1 == 57)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      shift(57);                    // '</'
      lookahead1(4);                // QName
      shift(20);                    // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        shift(21);                  // S
      }
      lookahead1(8);                // '>'
      shift(62);                    // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    shiftT(55);                     // '<'
    lookahead1(4);                  // QName
    shiftT(20);                     // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 49:                        // '/>'
      shiftT(49);                   // '/>'
      break;
    default:
      shiftT(62);                   // '>'
      for (;;)
      {
        lookahead1(196);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
        if (l1 == 57)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      shiftT(57);                   // '</'
      lookahead1(4);                // QName
      shiftT(20);                   // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        shiftT(21);                 // S
      }
      lookahead1(8);                // '>'
      shiftT(62);                   // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      shift(21);                    // S
      lookahead1(94);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        shift(20);                  // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          shift(21);                // S
        }
        lookahead1(7);              // '='
        shift(61);                  // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          shift(21);                // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      shiftT(21);                   // S
      lookahead1(94);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        shiftT(20);                 // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          shiftT(21);               // S
        }
        lookahead1(7);              // '='
        shiftT(61);                 // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          shiftT(21);               // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      shift(28);                    // '"'
      for (;;)
      {
        lookahead1(185);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          shift(13);                // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      shift(28);                    // '"'
      break;
    default:
      shift(34);                    // "'"
      for (;;)
      {
        lookahead1(186);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          shift(14);                // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      shift(34);                    // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      shiftT(28);                   // '"'
      for (;;)
      {
        lookahead1(185);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          shiftT(13);               // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      shiftT(28);                   // '"'
      break;
    default:
      shiftT(34);                   // "'"
      for (;;)
      {
        lookahead1(186);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          shiftT(14);               // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      shiftT(34);                   // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      shift(16);                    // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      shiftT(16);                   // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      shift(17);                    // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      shiftT(17);                   // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      shift(4);                     // CDataSection
      break;
    case 15:                        // ElementContentChar
      shift(15);                    // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      shiftT(4);                    // CDataSection
      break;
    case 15:                        // ElementContentChar
      shiftT(15);                   // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    shift(56);                      // '<!--'
    lookahead1(1);                  // DirCommentContents
    shift(2);                       // DirCommentContents
    lookahead1(6);                  // '-->'
    shift(44);                      // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    shiftT(56);                     // '<!--'
    lookahead1(1);                  // DirCommentContents
    shiftT(2);                      // DirCommentContents
    lookahead1(6);                  // '-->'
    shiftT(44);                     // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    shift(60);                      // '<?'
    lookahead1(3);                  // PITarget
    shift(18);                      // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
      lookahead1(2);                // DirPIContents
      shift(3);                     // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shift(66);                      // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    shiftT(60);                     // '<?'
    lookahead1(3);                  // PITarget
    shiftT(18);                     // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
      lookahead1(2);                // DirPIContents
      shiftT(3);                    // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shiftT(66);                     // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 120:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 122:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 83:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 187:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 249:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 120:                       // 'document'
      try_CompDocConstructor();
      break;
    case 122:                       // 'element'
      try_CompElemConstructor();
      break;
    case 83:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 187:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 249:                       // 'text'
      try_CompTextConstructor();
      break;
    case 97:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    shift(122);                     // 'element'
    lookahead1W(250);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_Expr();
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(90);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(281);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 287)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    shift(287);                     // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    shiftT(122);                    // 'element'
    lookahead1W(250);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 281:                       // '{'
      shiftT(281);                  // '{'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_Expr();
      shiftT(287);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(90);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(281);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 287)                  // '}'
    {
      try_ContentExpr();
    }
    shiftT(287);                    // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    shift(187);                     // 'namespace'
    lookahead1W(242);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_PrefixExpr();
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(90);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_URIExpr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    shiftT(187);                    // 'namespace'
    lookahead1W(242);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 281:                       // '{'
      shiftT(281);                  // '{'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_PrefixExpr();
      shiftT(287);                  // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(90);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_URIExpr();
    shiftT(287);                    // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 147:                       // 'function'
      lookahead2W(95);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 18067:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 147:                       // 'function'
      lookahead2W(95);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 18067:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shift(29);                      // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shift(8);                       // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shiftT(29);                     // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shiftT(8);                      // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(101);             // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(147);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(98);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(38);                      // ')'
    lookahead1W(115);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 80)                   // 'as'
    {
      shift(80);                    // 'as'
      lookahead1W(254);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(90);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(101);             // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(147);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(98);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    shiftT(38);                     // ')'
    lookahead1W(115);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 80)                   // 'as'
    {
      shiftT(80);                   // 'as'
      lookahead1W(254);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_SequenceType();
    }
    lookahead1W(90);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 65)                   // '?'
    {
      shift(65);                    // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 65)                   // '?'
    {
      shiftT(65);                   // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    shift(80);                      // 'as'
    lookahead1W(254);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    shiftT(80);                     // 'as'
    lookahead1W(254);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 35:                        // '('
      lookahead2W(259);             // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
      break;
    case 125:                       // 'empty-sequence'
      lookahead2W(233);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18045:                     // 'empty-sequence' '('
    case 19491:                     // '(' ')'
      if (l1 == 125)                // 'empty-sequence'
      {
        shift(125);                 // 'empty-sequence'
      }
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(229);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 65:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 35:                        // '('
      lookahead2W(259);             // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
      break;
    case 125:                       // 'empty-sequence'
      lookahead2W(233);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18045:                     // 'empty-sequence' '('
    case 19491:                     // '(' ')'
      if (l1 == 125)                // 'empty-sequence'
      {
        shiftT(125);                // 'empty-sequence'
      }
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(229);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 65:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 65:                        // '?'
      shift(65);                    // '?'
      break;
    case 40:                        // '*'
      shift(40);                    // '*'
      break;
    default:
      shift(41);                    // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 65:                        // '?'
      shiftT(65);                   // '?'
      break;
    case 40:                        // '*'
      shiftT(40);                   // '*'
      break;
    default:
      shiftT(41);                   // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 79:                        // 'array'
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 147:                       // 'function'
    case 167:                       // 'item'
    case 169:                       // 'json-item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 198:                       // 'object'
    case 220:                       // 'processing-instruction'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 247:                       // 'structured-item'
    case 249:                       // 'text'
      lookahead2W(233);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
      break;
    default:
      lk = l1;
    }
    if (lk == 12879                 // 'array' EOF
     || lk == 12969                 // 'json-item' EOF
     || lk == 12998                 // 'object' EOF
     || lk == 13047                 // 'structured-item' EOF
     || lk == 13903                 // 'array' '!='
     || lk == 13993                 // 'json-item' '!='
     || lk == 14022                 // 'object' '!='
     || lk == 14071                 // 'structured-item' '!='
     || lk == 19535                 // 'array' ')'
     || lk == 19625                 // 'json-item' ')'
     || lk == 19654                 // 'object' ')'
     || lk == 19703                 // 'structured-item' ')'
     || lk == 20047                 // 'array' '*'
     || lk == 20137                 // 'json-item' '*'
     || lk == 20166                 // 'object' '*'
     || lk == 20215                 // 'structured-item' '*'
     || lk == 20559                 // 'array' '*'
     || lk == 20649                 // 'json-item' '*'
     || lk == 20678                 // 'object' '*'
     || lk == 20727                 // 'structured-item' '*'
     || lk == 21071                 // 'array' '+'
     || lk == 21161                 // 'json-item' '+'
     || lk == 21190                 // 'object' '+'
     || lk == 21239                 // 'structured-item' '+'
     || lk == 21583                 // 'array' ','
     || lk == 21673                 // 'json-item' ','
     || lk == 21702                 // 'object' ','
     || lk == 21751                 // 'structured-item' ','
     || lk == 22095                 // 'array' '-'
     || lk == 22185                 // 'json-item' '-'
     || lk == 22214                 // 'object' '-'
     || lk == 22263                 // 'structured-item' '-'
     || lk == 25679                 // 'array' ':'
     || lk == 25769                 // 'json-item' ':'
     || lk == 25798                 // 'object' ':'
     || lk == 25847                 // 'structured-item' ':'
     || lk == 27215                 // 'array' ':='
     || lk == 27305                 // 'json-item' ':='
     || lk == 27334                 // 'object' ':='
     || lk == 27383                 // 'structured-item' ':='
     || lk == 27727                 // 'array' ';'
     || lk == 27817                 // 'json-item' ';'
     || lk == 27846                 // 'object' ';'
     || lk == 27895                 // 'structured-item' ';'
     || lk == 28239                 // 'array' '<'
     || lk == 28329                 // 'json-item' '<'
     || lk == 28358                 // 'object' '<'
     || lk == 28407                 // 'structured-item' '<'
     || lk == 29775                 // 'array' '<<'
     || lk == 29865                 // 'json-item' '<<'
     || lk == 29894                 // 'object' '<<'
     || lk == 29943                 // 'structured-item' '<<'
     || lk == 30287                 // 'array' '<='
     || lk == 30377                 // 'json-item' '<='
     || lk == 30406                 // 'object' '<='
     || lk == 30455                 // 'structured-item' '<='
     || lk == 31311                 // 'array' '='
     || lk == 31401                 // 'json-item' '='
     || lk == 31430                 // 'object' '='
     || lk == 31479                 // 'structured-item' '='
     || lk == 31823                 // 'array' '>'
     || lk == 31913                 // 'json-item' '>'
     || lk == 31942                 // 'object' '>'
     || lk == 31991                 // 'structured-item' '>'
     || lk == 32335                 // 'array' '>='
     || lk == 32425                 // 'json-item' '>='
     || lk == 32454                 // 'object' '>='
     || lk == 32503                 // 'structured-item' '>='
     || lk == 32847                 // 'array' '>>'
     || lk == 32937                 // 'json-item' '>>'
     || lk == 32966                 // 'object' '>>'
     || lk == 33015                 // 'structured-item' '>>'
     || lk == 33359                 // 'array' '?'
     || lk == 33449                 // 'json-item' '?'
     || lk == 33478                 // 'object' '?'
     || lk == 33527                 // 'structured-item' '?'
     || lk == 35919                 // 'array' ']'
     || lk == 36009                 // 'json-item' ']'
     || lk == 36038                 // 'object' ']'
     || lk == 36087                 // 'structured-item' ']'
     || lk == 36431                 // 'array' 'after'
     || lk == 36521                 // 'json-item' 'after'
     || lk == 36550                 // 'object' 'after'
     || lk == 36599                 // 'structured-item' 'after'
     || lk == 37455                 // 'array' 'allowing'
     || lk == 37545                 // 'json-item' 'allowing'
     || lk == 37574                 // 'object' 'allowing'
     || lk == 37623                 // 'structured-item' 'allowing'
     || lk == 38991                 // 'array' 'and'
     || lk == 39081                 // 'json-item' 'and'
     || lk == 39110                 // 'object' 'and'
     || lk == 39159                 // 'structured-item' 'and'
     || lk == 41039                 // 'array' 'as'
     || lk == 41129                 // 'json-item' 'as'
     || lk == 41158                 // 'object' 'as'
     || lk == 41207                 // 'structured-item' 'as'
     || lk == 41551                 // 'array' 'ascending'
     || lk == 41641                 // 'json-item' 'ascending'
     || lk == 41670                 // 'object' 'ascending'
     || lk == 41719                 // 'structured-item' 'ascending'
     || lk == 42063                 // 'array' 'at'
     || lk == 42153                 // 'json-item' 'at'
     || lk == 42182                 // 'object' 'at'
     || lk == 42231                 // 'structured-item' 'at'
     || lk == 43599                 // 'array' 'before'
     || lk == 43689                 // 'json-item' 'before'
     || lk == 43718                 // 'object' 'before'
     || lk == 43767                 // 'structured-item' 'before'
     || lk == 45647                 // 'array' 'case'
     || lk == 45737                 // 'json-item' 'case'
     || lk == 45766                 // 'object' 'case'
     || lk == 45815                 // 'structured-item' 'case'
     || lk == 48719                 // 'array' 'collation'
     || lk == 48809                 // 'json-item' 'collation'
     || lk == 48838                 // 'object' 'collation'
     || lk == 48887                 // 'structured-item' 'collation'
     || lk == 51279                 // 'array' 'contains'
     || lk == 51369                 // 'json-item' 'contains'
     || lk == 51398                 // 'object' 'contains'
     || lk == 51447                 // 'structured-item' 'contains'
     || lk == 54351                 // 'array' 'count'
     || lk == 54441                 // 'json-item' 'count'
     || lk == 54470                 // 'object' 'count'
     || lk == 54519                 // 'structured-item' 'count'
     || lk == 56399                 // 'array' 'default'
     || lk == 56489                 // 'json-item' 'default'
     || lk == 56518                 // 'object' 'default'
     || lk == 56567                 // 'structured-item' 'default'
     || lk == 58447                 // 'array' 'descending'
     || lk == 58537                 // 'json-item' 'descending'
     || lk == 58566                 // 'object' 'descending'
     || lk == 58615                 // 'structured-item' 'descending'
     || lk == 61007                 // 'array' 'div'
     || lk == 61097                 // 'json-item' 'div'
     || lk == 61126                 // 'object' 'div'
     || lk == 61175                 // 'structured-item' 'div'
     || lk == 63055                 // 'array' 'else'
     || lk == 63145                 // 'json-item' 'else'
     || lk == 63174                 // 'object' 'else'
     || lk == 63223                 // 'structured-item' 'else'
     || lk == 63567                 // 'array' 'empty'
     || lk == 63657                 // 'json-item' 'empty'
     || lk == 63686                 // 'object' 'empty'
     || lk == 63735                 // 'structured-item' 'empty'
     || lk == 65103                 // 'array' 'end'
     || lk == 65193                 // 'json-item' 'end'
     || lk == 65222                 // 'object' 'end'
     || lk == 65271                 // 'structured-item' 'end'
     || lk == 66127                 // 'array' 'eq'
     || lk == 66217                 // 'json-item' 'eq'
     || lk == 66246                 // 'object' 'eq'
     || lk == 66295                 // 'structured-item' 'eq'
     || lk == 67663                 // 'array' 'except'
     || lk == 67753                 // 'json-item' 'except'
     || lk == 67782                 // 'object' 'except'
     || lk == 67831                 // 'structured-item' 'except'
     || lk == 68687                 // 'array' 'external'
     || lk == 68777                 // 'json-item' 'external'
     || lk == 68806                 // 'object' 'external'
     || lk == 68855                 // 'structured-item' 'external'
     || lk == 71247                 // 'array' 'for'
     || lk == 71337                 // 'json-item' 'for'
     || lk == 71366                 // 'object' 'for'
     || lk == 71415                 // 'structured-item' 'for'
     || lk == 75855                 // 'array' 'ge'
     || lk == 75945                 // 'json-item' 'ge'
     || lk == 75974                 // 'object' 'ge'
     || lk == 76023                 // 'structured-item' 'ge'
     || lk == 76879                 // 'array' 'group'
     || lk == 76969                 // 'json-item' 'group'
     || lk == 76998                 // 'object' 'group'
     || lk == 77047                 // 'structured-item' 'group'
     || lk == 77903                 // 'array' 'gt'
     || lk == 77993                 // 'json-item' 'gt'
     || lk == 78022                 // 'object' 'gt'
     || lk == 78071                 // 'structured-item' 'gt'
     || lk == 78415                 // 'array' 'idiv'
     || lk == 78505                 // 'json-item' 'idiv'
     || lk == 78534                 // 'object' 'idiv'
     || lk == 78583                 // 'structured-item' 'idiv'
     || lk == 79951                 // 'array' 'in'
     || lk == 80041                 // 'json-item' 'in'
     || lk == 80070                 // 'object' 'in'
     || lk == 80119                 // 'structured-item' 'in'
     || lk == 83023                 // 'array' 'instance'
     || lk == 83113                 // 'json-item' 'instance'
     || lk == 83142                 // 'object' 'instance'
     || lk == 83191                 // 'structured-item' 'instance'
     || lk == 84047                 // 'array' 'intersect'
     || lk == 84137                 // 'json-item' 'intersect'
     || lk == 84166                 // 'object' 'intersect'
     || lk == 84215                 // 'structured-item' 'intersect'
     || lk == 84559                 // 'array' 'into'
     || lk == 84649                 // 'json-item' 'into'
     || lk == 84678                 // 'object' 'into'
     || lk == 84727                 // 'structured-item' 'into'
     || lk == 85071                 // 'array' 'is'
     || lk == 85161                 // 'json-item' 'is'
     || lk == 85190                 // 'object' 'is'
     || lk == 85239                 // 'structured-item' 'is'
     || lk == 89679                 // 'array' 'le'
     || lk == 89769                 // 'json-item' 'le'
     || lk == 89798                 // 'object' 'le'
     || lk == 89847                 // 'structured-item' 'le'
     || lk == 90703                 // 'array' 'let'
     || lk == 90793                 // 'json-item' 'let'
     || lk == 90822                 // 'object' 'let'
     || lk == 90871                 // 'structured-item' 'let'
     || lk == 92751                 // 'array' 'lt'
     || lk == 92841                 // 'json-item' 'lt'
     || lk == 92870                 // 'object' 'lt'
     || lk == 92919                 // 'structured-item' 'lt'
     || lk == 93775                 // 'array' 'mod'
     || lk == 93865                 // 'json-item' 'mod'
     || lk == 93894                 // 'object' 'mod'
     || lk == 93943                 // 'structured-item' 'mod'
     || lk == 94287                 // 'array' 'modify'
     || lk == 94377                 // 'json-item' 'modify'
     || lk == 94406                 // 'object' 'modify'
     || lk == 94455                 // 'structured-item' 'modify'
     || lk == 96847                 // 'array' 'ne'
     || lk == 96937                 // 'json-item' 'ne'
     || lk == 96966                 // 'object' 'ne'
     || lk == 97015                 // 'structured-item' 'ne'
     || lk == 103503                // 'array' 'only'
     || lk == 103593                // 'json-item' 'only'
     || lk == 103622                // 'object' 'only'
     || lk == 103671                // 'structured-item' 'only'
     || lk == 104527                // 'array' 'or'
     || lk == 104617                // 'json-item' 'or'
     || lk == 104646                // 'object' 'or'
     || lk == 104695                // 'structured-item' 'or'
     || lk == 105039                // 'array' 'order'
     || lk == 105129                // 'json-item' 'order'
     || lk == 105158                // 'object' 'order'
     || lk == 105207                // 'structured-item' 'order'
     || lk == 107087                // 'array' 'paragraphs'
     || lk == 107177                // 'json-item' 'paragraphs'
     || lk == 107206                // 'object' 'paragraphs'
     || lk == 107255                // 'structured-item' 'paragraphs'
     || lk == 114767                // 'array' 'return'
     || lk == 114857                // 'json-item' 'return'
     || lk == 114886                // 'object' 'return'
     || lk == 114935                // 'structured-item' 'return'
     || lk == 116815                // 'array' 'satisfies'
     || lk == 116905                // 'json-item' 'satisfies'
     || lk == 116934                // 'object' 'satisfies'
     || lk == 116983                // 'structured-item' 'satisfies'
     || lk == 118863                // 'array' 'score'
     || lk == 118953                // 'json-item' 'score'
     || lk == 118982                // 'object' 'score'
     || lk == 119031                // 'structured-item' 'score'
     || lk == 121423                // 'array' 'sentences'
     || lk == 121513                // 'json-item' 'sentences'
     || lk == 121542                // 'object' 'sentences'
     || lk == 121591                // 'structured-item' 'sentences'
     || lk == 123471                // 'array' 'stable'
     || lk == 123561                // 'json-item' 'stable'
     || lk == 123590                // 'object' 'stable'
     || lk == 123639                // 'structured-item' 'stable'
     || lk == 123983                // 'array' 'start'
     || lk == 124073                // 'json-item' 'start'
     || lk == 124102                // 'object' 'start'
     || lk == 124151                // 'structured-item' 'start'
     || lk == 129103                // 'array' 'times'
     || lk == 129193                // 'json-item' 'times'
     || lk == 129222                // 'object' 'times'
     || lk == 129271                // 'structured-item' 'times'
     || lk == 129615                // 'array' 'to'
     || lk == 129705                // 'json-item' 'to'
     || lk == 129734                // 'object' 'to'
     || lk == 129783                // 'structured-item' 'to'
     || lk == 133199                // 'array' 'union'
     || lk == 133289                // 'json-item' 'union'
     || lk == 133318                // 'object' 'union'
     || lk == 133367                // 'structured-item' 'union'
     || lk == 139343                // 'array' 'where'
     || lk == 139433                // 'json-item' 'where'
     || lk == 139462                // 'object' 'where'
     || lk == 139511                // 'structured-item' 'where'
     || lk == 141391                // 'array' 'with'
     || lk == 141481                // 'json-item' 'with'
     || lk == 141510                // 'object' 'with'
     || lk == 141559                // 'structured-item' 'with'
     || lk == 142927                // 'array' 'words'
     || lk == 143017                // 'json-item' 'words'
     || lk == 143046                // 'object' 'words'
     || lk == 143095                // 'structured-item' 'words'
     || lk == 143951                // 'array' '{'
     || lk == 144041                // 'json-item' '{'
     || lk == 144070                // 'object' '{'
     || lk == 144119                // 'structured-item' '{'
     || lk == 145487                // 'array' '|'
     || lk == 145577                // 'json-item' '|'
     || lk == 145606                // 'object' '|'
     || lk == 145655                // 'structured-item' '|'
     || lk == 145999                // 'array' '||'
     || lk == 146089                // 'json-item' '||'
     || lk == 146118                // 'object' '||'
     || lk == 146167                // 'structured-item' '||'
     || lk == 146511                // 'array' '|}'
     || lk == 146601                // 'json-item' '|}'
     || lk == 146630                // 'object' '|}'
     || lk == 146679                // 'structured-item' '|}'
     || lk == 147023                // 'array' '}'
     || lk == 147113                // 'json-item' '}'
     || lk == 147142                // 'object' '}'
     || lk == 147191)               // 'structured-item' '}'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_AtomicOrUnionType();
          lk = -4;
        }
        catch (p4A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_JSONTest();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -7;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0, lk);
      }
    }
    switch (lk)
    {
    case 18003:                     // 'attribute' '('
    case 18017:                     // 'comment' '('
    case 18041:                     // 'document-node' '('
    case 18042:                     // 'element' '('
    case 18108:                     // 'namespace-node' '('
    case 18114:                     // 'node' '('
    case 18140:                     // 'processing-instruction' '('
    case 18150:                     // 'schema-attribute' '('
    case 18151:                     // 'schema-element' '('
    case 18169:                     // 'text' '('
      parse_KindTest();
      break;
    case 18087:                     // 'item' '('
      shift(167);                   // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
      break;
    case 33:                        // '%'
    case 18067:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 35:                        // '('
      parse_ParenthesizedItemType();
      break;
    case -6:
    case 17999:                     // 'array' '('
    case 18089:                     // 'json-item' '('
    case 18118:                     // 'object' '('
      parse_JSONTest();
      break;
    case -7:
    case 18167:                     // 'structured-item' '('
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 79:                        // 'array'
    case 83:                        // 'attribute'
    case 97:                        // 'comment'
    case 121:                       // 'document-node'
    case 122:                       // 'element'
    case 147:                       // 'function'
    case 167:                       // 'item'
    case 169:                       // 'json-item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 198:                       // 'object'
    case 220:                       // 'processing-instruction'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 247:                       // 'structured-item'
    case 249:                       // 'text'
      lookahead2W(233);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
      break;
    default:
      lk = l1;
    }
    if (lk == 12879                 // 'array' EOF
     || lk == 12969                 // 'json-item' EOF
     || lk == 12998                 // 'object' EOF
     || lk == 13047                 // 'structured-item' EOF
     || lk == 13903                 // 'array' '!='
     || lk == 13993                 // 'json-item' '!='
     || lk == 14022                 // 'object' '!='
     || lk == 14071                 // 'structured-item' '!='
     || lk == 19535                 // 'array' ')'
     || lk == 19625                 // 'json-item' ')'
     || lk == 19654                 // 'object' ')'
     || lk == 19703                 // 'structured-item' ')'
     || lk == 20047                 // 'array' '*'
     || lk == 20137                 // 'json-item' '*'
     || lk == 20166                 // 'object' '*'
     || lk == 20215                 // 'structured-item' '*'
     || lk == 20559                 // 'array' '*'
     || lk == 20649                 // 'json-item' '*'
     || lk == 20678                 // 'object' '*'
     || lk == 20727                 // 'structured-item' '*'
     || lk == 21071                 // 'array' '+'
     || lk == 21161                 // 'json-item' '+'
     || lk == 21190                 // 'object' '+'
     || lk == 21239                 // 'structured-item' '+'
     || lk == 21583                 // 'array' ','
     || lk == 21673                 // 'json-item' ','
     || lk == 21702                 // 'object' ','
     || lk == 21751                 // 'structured-item' ','
     || lk == 22095                 // 'array' '-'
     || lk == 22185                 // 'json-item' '-'
     || lk == 22214                 // 'object' '-'
     || lk == 22263                 // 'structured-item' '-'
     || lk == 25679                 // 'array' ':'
     || lk == 25769                 // 'json-item' ':'
     || lk == 25798                 // 'object' ':'
     || lk == 25847                 // 'structured-item' ':'
     || lk == 27215                 // 'array' ':='
     || lk == 27305                 // 'json-item' ':='
     || lk == 27334                 // 'object' ':='
     || lk == 27383                 // 'structured-item' ':='
     || lk == 27727                 // 'array' ';'
     || lk == 27817                 // 'json-item' ';'
     || lk == 27846                 // 'object' ';'
     || lk == 27895                 // 'structured-item' ';'
     || lk == 28239                 // 'array' '<'
     || lk == 28329                 // 'json-item' '<'
     || lk == 28358                 // 'object' '<'
     || lk == 28407                 // 'structured-item' '<'
     || lk == 29775                 // 'array' '<<'
     || lk == 29865                 // 'json-item' '<<'
     || lk == 29894                 // 'object' '<<'
     || lk == 29943                 // 'structured-item' '<<'
     || lk == 30287                 // 'array' '<='
     || lk == 30377                 // 'json-item' '<='
     || lk == 30406                 // 'object' '<='
     || lk == 30455                 // 'structured-item' '<='
     || lk == 31311                 // 'array' '='
     || lk == 31401                 // 'json-item' '='
     || lk == 31430                 // 'object' '='
     || lk == 31479                 // 'structured-item' '='
     || lk == 31823                 // 'array' '>'
     || lk == 31913                 // 'json-item' '>'
     || lk == 31942                 // 'object' '>'
     || lk == 31991                 // 'structured-item' '>'
     || lk == 32335                 // 'array' '>='
     || lk == 32425                 // 'json-item' '>='
     || lk == 32454                 // 'object' '>='
     || lk == 32503                 // 'structured-item' '>='
     || lk == 32847                 // 'array' '>>'
     || lk == 32937                 // 'json-item' '>>'
     || lk == 32966                 // 'object' '>>'
     || lk == 33015                 // 'structured-item' '>>'
     || lk == 33359                 // 'array' '?'
     || lk == 33449                 // 'json-item' '?'
     || lk == 33478                 // 'object' '?'
     || lk == 33527                 // 'structured-item' '?'
     || lk == 35919                 // 'array' ']'
     || lk == 36009                 // 'json-item' ']'
     || lk == 36038                 // 'object' ']'
     || lk == 36087                 // 'structured-item' ']'
     || lk == 36431                 // 'array' 'after'
     || lk == 36521                 // 'json-item' 'after'
     || lk == 36550                 // 'object' 'after'
     || lk == 36599                 // 'structured-item' 'after'
     || lk == 37455                 // 'array' 'allowing'
     || lk == 37545                 // 'json-item' 'allowing'
     || lk == 37574                 // 'object' 'allowing'
     || lk == 37623                 // 'structured-item' 'allowing'
     || lk == 38991                 // 'array' 'and'
     || lk == 39081                 // 'json-item' 'and'
     || lk == 39110                 // 'object' 'and'
     || lk == 39159                 // 'structured-item' 'and'
     || lk == 41039                 // 'array' 'as'
     || lk == 41129                 // 'json-item' 'as'
     || lk == 41158                 // 'object' 'as'
     || lk == 41207                 // 'structured-item' 'as'
     || lk == 41551                 // 'array' 'ascending'
     || lk == 41641                 // 'json-item' 'ascending'
     || lk == 41670                 // 'object' 'ascending'
     || lk == 41719                 // 'structured-item' 'ascending'
     || lk == 42063                 // 'array' 'at'
     || lk == 42153                 // 'json-item' 'at'
     || lk == 42182                 // 'object' 'at'
     || lk == 42231                 // 'structured-item' 'at'
     || lk == 43599                 // 'array' 'before'
     || lk == 43689                 // 'json-item' 'before'
     || lk == 43718                 // 'object' 'before'
     || lk == 43767                 // 'structured-item' 'before'
     || lk == 45647                 // 'array' 'case'
     || lk == 45737                 // 'json-item' 'case'
     || lk == 45766                 // 'object' 'case'
     || lk == 45815                 // 'structured-item' 'case'
     || lk == 48719                 // 'array' 'collation'
     || lk == 48809                 // 'json-item' 'collation'
     || lk == 48838                 // 'object' 'collation'
     || lk == 48887                 // 'structured-item' 'collation'
     || lk == 51279                 // 'array' 'contains'
     || lk == 51369                 // 'json-item' 'contains'
     || lk == 51398                 // 'object' 'contains'
     || lk == 51447                 // 'structured-item' 'contains'
     || lk == 54351                 // 'array' 'count'
     || lk == 54441                 // 'json-item' 'count'
     || lk == 54470                 // 'object' 'count'
     || lk == 54519                 // 'structured-item' 'count'
     || lk == 56399                 // 'array' 'default'
     || lk == 56489                 // 'json-item' 'default'
     || lk == 56518                 // 'object' 'default'
     || lk == 56567                 // 'structured-item' 'default'
     || lk == 58447                 // 'array' 'descending'
     || lk == 58537                 // 'json-item' 'descending'
     || lk == 58566                 // 'object' 'descending'
     || lk == 58615                 // 'structured-item' 'descending'
     || lk == 61007                 // 'array' 'div'
     || lk == 61097                 // 'json-item' 'div'
     || lk == 61126                 // 'object' 'div'
     || lk == 61175                 // 'structured-item' 'div'
     || lk == 63055                 // 'array' 'else'
     || lk == 63145                 // 'json-item' 'else'
     || lk == 63174                 // 'object' 'else'
     || lk == 63223                 // 'structured-item' 'else'
     || lk == 63567                 // 'array' 'empty'
     || lk == 63657                 // 'json-item' 'empty'
     || lk == 63686                 // 'object' 'empty'
     || lk == 63735                 // 'structured-item' 'empty'
     || lk == 65103                 // 'array' 'end'
     || lk == 65193                 // 'json-item' 'end'
     || lk == 65222                 // 'object' 'end'
     || lk == 65271                 // 'structured-item' 'end'
     || lk == 66127                 // 'array' 'eq'
     || lk == 66217                 // 'json-item' 'eq'
     || lk == 66246                 // 'object' 'eq'
     || lk == 66295                 // 'structured-item' 'eq'
     || lk == 67663                 // 'array' 'except'
     || lk == 67753                 // 'json-item' 'except'
     || lk == 67782                 // 'object' 'except'
     || lk == 67831                 // 'structured-item' 'except'
     || lk == 68687                 // 'array' 'external'
     || lk == 68777                 // 'json-item' 'external'
     || lk == 68806                 // 'object' 'external'
     || lk == 68855                 // 'structured-item' 'external'
     || lk == 71247                 // 'array' 'for'
     || lk == 71337                 // 'json-item' 'for'
     || lk == 71366                 // 'object' 'for'
     || lk == 71415                 // 'structured-item' 'for'
     || lk == 75855                 // 'array' 'ge'
     || lk == 75945                 // 'json-item' 'ge'
     || lk == 75974                 // 'object' 'ge'
     || lk == 76023                 // 'structured-item' 'ge'
     || lk == 76879                 // 'array' 'group'
     || lk == 76969                 // 'json-item' 'group'
     || lk == 76998                 // 'object' 'group'
     || lk == 77047                 // 'structured-item' 'group'
     || lk == 77903                 // 'array' 'gt'
     || lk == 77993                 // 'json-item' 'gt'
     || lk == 78022                 // 'object' 'gt'
     || lk == 78071                 // 'structured-item' 'gt'
     || lk == 78415                 // 'array' 'idiv'
     || lk == 78505                 // 'json-item' 'idiv'
     || lk == 78534                 // 'object' 'idiv'
     || lk == 78583                 // 'structured-item' 'idiv'
     || lk == 79951                 // 'array' 'in'
     || lk == 80041                 // 'json-item' 'in'
     || lk == 80070                 // 'object' 'in'
     || lk == 80119                 // 'structured-item' 'in'
     || lk == 83023                 // 'array' 'instance'
     || lk == 83113                 // 'json-item' 'instance'
     || lk == 83142                 // 'object' 'instance'
     || lk == 83191                 // 'structured-item' 'instance'
     || lk == 84047                 // 'array' 'intersect'
     || lk == 84137                 // 'json-item' 'intersect'
     || lk == 84166                 // 'object' 'intersect'
     || lk == 84215                 // 'structured-item' 'intersect'
     || lk == 84559                 // 'array' 'into'
     || lk == 84649                 // 'json-item' 'into'
     || lk == 84678                 // 'object' 'into'
     || lk == 84727                 // 'structured-item' 'into'
     || lk == 85071                 // 'array' 'is'
     || lk == 85161                 // 'json-item' 'is'
     || lk == 85190                 // 'object' 'is'
     || lk == 85239                 // 'structured-item' 'is'
     || lk == 89679                 // 'array' 'le'
     || lk == 89769                 // 'json-item' 'le'
     || lk == 89798                 // 'object' 'le'
     || lk == 89847                 // 'structured-item' 'le'
     || lk == 90703                 // 'array' 'let'
     || lk == 90793                 // 'json-item' 'let'
     || lk == 90822                 // 'object' 'let'
     || lk == 90871                 // 'structured-item' 'let'
     || lk == 92751                 // 'array' 'lt'
     || lk == 92841                 // 'json-item' 'lt'
     || lk == 92870                 // 'object' 'lt'
     || lk == 92919                 // 'structured-item' 'lt'
     || lk == 93775                 // 'array' 'mod'
     || lk == 93865                 // 'json-item' 'mod'
     || lk == 93894                 // 'object' 'mod'
     || lk == 93943                 // 'structured-item' 'mod'
     || lk == 94287                 // 'array' 'modify'
     || lk == 94377                 // 'json-item' 'modify'
     || lk == 94406                 // 'object' 'modify'
     || lk == 94455                 // 'structured-item' 'modify'
     || lk == 96847                 // 'array' 'ne'
     || lk == 96937                 // 'json-item' 'ne'
     || lk == 96966                 // 'object' 'ne'
     || lk == 97015                 // 'structured-item' 'ne'
     || lk == 103503                // 'array' 'only'
     || lk == 103593                // 'json-item' 'only'
     || lk == 103622                // 'object' 'only'
     || lk == 103671                // 'structured-item' 'only'
     || lk == 104527                // 'array' 'or'
     || lk == 104617                // 'json-item' 'or'
     || lk == 104646                // 'object' 'or'
     || lk == 104695                // 'structured-item' 'or'
     || lk == 105039                // 'array' 'order'
     || lk == 105129                // 'json-item' 'order'
     || lk == 105158                // 'object' 'order'
     || lk == 105207                // 'structured-item' 'order'
     || lk == 107087                // 'array' 'paragraphs'
     || lk == 107177                // 'json-item' 'paragraphs'
     || lk == 107206                // 'object' 'paragraphs'
     || lk == 107255                // 'structured-item' 'paragraphs'
     || lk == 114767                // 'array' 'return'
     || lk == 114857                // 'json-item' 'return'
     || lk == 114886                // 'object' 'return'
     || lk == 114935                // 'structured-item' 'return'
     || lk == 116815                // 'array' 'satisfies'
     || lk == 116905                // 'json-item' 'satisfies'
     || lk == 116934                // 'object' 'satisfies'
     || lk == 116983                // 'structured-item' 'satisfies'
     || lk == 118863                // 'array' 'score'
     || lk == 118953                // 'json-item' 'score'
     || lk == 118982                // 'object' 'score'
     || lk == 119031                // 'structured-item' 'score'
     || lk == 121423                // 'array' 'sentences'
     || lk == 121513                // 'json-item' 'sentences'
     || lk == 121542                // 'object' 'sentences'
     || lk == 121591                // 'structured-item' 'sentences'
     || lk == 123471                // 'array' 'stable'
     || lk == 123561                // 'json-item' 'stable'
     || lk == 123590                // 'object' 'stable'
     || lk == 123639                // 'structured-item' 'stable'
     || lk == 123983                // 'array' 'start'
     || lk == 124073                // 'json-item' 'start'
     || lk == 124102                // 'object' 'start'
     || lk == 124151                // 'structured-item' 'start'
     || lk == 129103                // 'array' 'times'
     || lk == 129193                // 'json-item' 'times'
     || lk == 129222                // 'object' 'times'
     || lk == 129271                // 'structured-item' 'times'
     || lk == 129615                // 'array' 'to'
     || lk == 129705                // 'json-item' 'to'
     || lk == 129734                // 'object' 'to'
     || lk == 129783                // 'structured-item' 'to'
     || lk == 133199                // 'array' 'union'
     || lk == 133289                // 'json-item' 'union'
     || lk == 133318                // 'object' 'union'
     || lk == 133367                // 'structured-item' 'union'
     || lk == 139343                // 'array' 'where'
     || lk == 139433                // 'json-item' 'where'
     || lk == 139462                // 'object' 'where'
     || lk == 139511                // 'structured-item' 'where'
     || lk == 141391                // 'array' 'with'
     || lk == 141481                // 'json-item' 'with'
     || lk == 141510                // 'object' 'with'
     || lk == 141559                // 'structured-item' 'with'
     || lk == 142927                // 'array' 'words'
     || lk == 143017                // 'json-item' 'words'
     || lk == 143046                // 'object' 'words'
     || lk == 143095                // 'structured-item' 'words'
     || lk == 143951                // 'array' '{'
     || lk == 144041                // 'json-item' '{'
     || lk == 144070                // 'object' '{'
     || lk == 144119                // 'structured-item' '{'
     || lk == 145487                // 'array' '|'
     || lk == 145577                // 'json-item' '|'
     || lk == 145606                // 'object' '|'
     || lk == 145655                // 'structured-item' '|'
     || lk == 145999                // 'array' '||'
     || lk == 146089                // 'json-item' '||'
     || lk == 146118                // 'object' '||'
     || lk == 146167                // 'structured-item' '||'
     || lk == 146511                // 'array' '|}'
     || lk == 146601                // 'json-item' '|}'
     || lk == 146630                // 'object' '|}'
     || lk == 146679                // 'structured-item' '|}'
     || lk == 147023                // 'array' '}'
     || lk == 147113                // 'json-item' '}'
     || lk == 147142                // 'object' '}'
     || lk == 147191)               // 'structured-item' '}'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_AtomicOrUnionType();
          memoize(6, e0A, -4);
          lk = -8;
        }
        catch (p4A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_JSONTest();
            memoize(6, e0A, -6);
            lk = -8;
          }
          catch (p6A)
          {
            lk = -7;
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(6, e0A, -7);
          }
        }
      }
    }
    switch (lk)
    {
    case 18003:                     // 'attribute' '('
    case 18017:                     // 'comment' '('
    case 18041:                     // 'document-node' '('
    case 18042:                     // 'element' '('
    case 18108:                     // 'namespace-node' '('
    case 18114:                     // 'node' '('
    case 18140:                     // 'processing-instruction' '('
    case 18150:                     // 'schema-attribute' '('
    case 18151:                     // 'schema-element' '('
    case 18169:                     // 'text' '('
      try_KindTest();
      break;
    case 18087:                     // 'item' '('
      shiftT(167);                  // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
      break;
    case 33:                        // '%'
    case 18067:                     // 'function' '('
      try_FunctionTest();
      break;
    case 35:                        // '('
      try_ParenthesizedItemType();
      break;
    case -6:
    case 17999:                     // 'array' '('
    case 18089:                     // 'json-item' '('
    case 18118:                     // 'object' '('
      try_JSONTest();
      break;
    case -7:
    case 18167:                     // 'structured-item' '('
      try_StructuredItemTest();
      break;
    case -8:
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 169:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 198:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 169:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 198:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    shift(247);                     // 'structured-item'
    lookahead1W(233);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    shiftT(247);                    // 'structured-item'
    lookahead1W(233);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
    }
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    shift(169);                     // 'json-item'
    lookahead1W(233);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    shiftT(169);                    // 'json-item'
    lookahead1W(233);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
    }
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    shift(198);                     // 'object'
    lookahead1W(233);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    shiftT(198);                    // 'object'
    lookahead1W(233);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
    }
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    shift(79);                      // 'array'
    lookahead1W(233);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
    if (l1 == 35)                   // '('
    {
      shift(35);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    shiftT(79);                     // 'array'
    lookahead1W(233);               // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
    if (l1 == 35)                   // '('
    {
      shiftT(35);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(38);                   // ')'
    }
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 121:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 122:                       // 'element'
      parse_ElementTest();
      break;
    case 83:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 231:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 230:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 220:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 97:                        // 'comment'
      parse_CommentTest();
      break;
    case 249:                       // 'text'
      parse_TextTest();
      break;
    case 188:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 121:                       // 'document-node'
      try_DocumentTest();
      break;
    case 122:                       // 'element'
      try_ElementTest();
      break;
    case 83:                        // 'attribute'
      try_AttributeTest();
      break;
    case 231:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 230:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 220:                       // 'processing-instruction'
      try_PITest();
      break;
    case 97:                        // 'comment'
      try_CommentTest();
      break;
    case 249:                       // 'text'
      try_TextTest();
      break;
    case 188:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    shift(194);                     // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    shiftT(194);                    // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    shift(121);                     // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(154);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 122:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    shiftT(121);                    // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(154);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 122:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    shift(249);                     // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    shiftT(249);                    // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    shift(97);                      // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    shiftT(97);                     // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    shift(188);                     // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    shiftT(188);                    // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    shift(220);                     // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(244);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        shift(11);                  // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    shiftT(220);                    // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(244);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        shiftT(11);                 // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    shift(83);                      // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(105);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shift(42);                  // ','
        lookahead1W(246);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    shiftT(83);                     // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
    if (l1 != 38)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(105);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shiftT(42);                 // ','
        lookahead1W(246);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      shift(39);                    // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      shiftT(39);                   // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    shift(230);                     // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    shiftT(230);                    // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    shift(122);                     // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(105);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shift(42);                  // ','
        lookahead1W(246);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        whitespace();
        parse_TypeName();
        lookahead1W(106);           // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          shift(65);                // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    shiftT(122);                    // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
    if (l1 != 38)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(105);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        shiftT(42);                 // ','
        lookahead1W(246);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        try_TypeName();
        lookahead1W(106);           // S^WS | '(:' | ')' | '?'
        if (l1 == 65)               // '?'
        {
          shiftT(65);               // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      shift(39);                    // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      shiftT(39);                   // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    shift(231);                     // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    shiftT(231);                    // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(101);             // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 147:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(7, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(7, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(101);             // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 147:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(7, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(7, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    shift(147);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shift(39);                      // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    shiftT(147);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shiftT(39);                     // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    shift(147);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(259);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(254);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
        whitespace();
        parse_SequenceType();
      }
    }
    shift(38);                      // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    shift(80);                      // 'as'
    lookahead1W(254);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    shiftT(147);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(259);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
    if (l1 != 38)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(254);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
        try_SequenceType();
      }
    }
    shiftT(38);                     // ')'
    lookahead1W(33);                // S^WS | '(:' | 'as'
    shiftT(80);                     // 'as'
    lookahead1W(254);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    shift(35);                      // '('
    lookahead1W(254);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(38);                      // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    shiftT(35);                     // '('
    lookahead1W(254);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(38);                     // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    shift(109);                     // 'declare'
    lookahead1W(75);                // S^WS | '(:' | 'revalidation'
    shift(226);                     // 'revalidation'
    lookahead1W(162);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 245:                       // 'strict'
      shift(245);                   // 'strict'
      break;
    case 174:                       // 'lax'
      shift(174);                   // 'lax'
      break;
    default:
      shift(238);                   // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 71:                        // 'after'
      shift(71);                    // 'after'
      break;
    case 85:                        // 'before'
      shift(85);                    // 'before'
      break;
    default:
      if (l1 == 80)                 // 'as'
      {
        shift(80);                  // 'as'
        lookahead1W(123);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 136:                   // 'first'
          shift(136);               // 'first'
          break;
        default:
          shift(173);               // 'last'
        }
      }
      lookahead1W(57);              // S^WS | '(:' | 'into'
      shift(165);                   // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 71:                        // 'after'
      shiftT(71);                   // 'after'
      break;
    case 85:                        // 'before'
      shiftT(85);                   // 'before'
      break;
    default:
      if (l1 == 80)                 // 'as'
      {
        shiftT(80);                 // 'as'
        lookahead1W(123);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 136:                   // 'first'
          shiftT(136);              // 'first'
          break;
        default:
          shiftT(173);              // 'last'
        }
      }
      lookahead1W(57);              // S^WS | '(:' | 'into'
      shiftT(165);                  // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    shift(161);                     // 'insert'
    lookahead1W(133);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 194:                       // 'node'
      shift(194);                   // 'node'
      break;
    default:
      shift(195);                   // 'nodes'
    }
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    shiftT(161);                    // 'insert'
    lookahead1W(133);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 194:                       // 'node'
      shiftT(194);                  // 'node'
      break;
    default:
      shiftT(195);                  // 'nodes'
    }
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    shift(111);                     // 'delete'
    lookahead1W(133);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 194:                       // 'node'
      shift(194);                   // 'node'
      break;
    default:
      shift(195);                   // 'nodes'
    }
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    shiftT(111);                    // 'delete'
    lookahead1W(133);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 194:                       // 'node'
      shiftT(194);                  // 'node'
      break;
    default:
      shiftT(195);                  // 'nodes'
    }
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    shift(223);                     // 'replace'
    lookahead1W(134);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 267)                  // 'value'
    {
      shift(267);                   // 'value'
      lookahead1W(67);              // S^WS | '(:' | 'of'
      shift(200);                   // 'of'
    }
    lookahead1W(65);                // S^WS | '(:' | 'node'
    shift(194);                     // 'node'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_TargetExpr();
    shift(276);                     // 'with'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    shiftT(223);                    // 'replace'
    lookahead1W(134);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 267)                  // 'value'
    {
      shiftT(267);                  // 'value'
      lookahead1W(67);              // S^WS | '(:' | 'of'
      shiftT(200);                  // 'of'
    }
    lookahead1W(65);                // S^WS | '(:' | 'node'
    shiftT(194);                    // 'node'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_TargetExpr();
    shiftT(276);                    // 'with'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    shift(222);                     // 'rename'
    lookahead1W(65);                // S^WS | '(:' | 'node'
    shift(194);                     // 'node'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_TargetExpr();
    shift(80);                      // 'as'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    shiftT(222);                    // 'rename'
    lookahead1W(65);                // S^WS | '(:' | 'node'
    shiftT(194);                    // 'node'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_TargetExpr();
    shiftT(80);                     // 'as'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    shift(104);                     // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_TransformSpec();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_TransformSpec();
    }
    shift(184);                     // 'modify'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    shift(224);                     // 'return'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    shiftT(104);                    // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_TransformSpec();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_TransformSpec();
    }
    shiftT(184);                    // 'modify'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
    shiftT(224);                    // 'return'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_TransformSpec()
  {
    eventHandler.startNonterminal("TransformSpec", e0);
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(28);                // S^WS | '(:' | ':='
    shift(53);                      // ':='
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformSpec", e0);
  }

  function try_TransformSpec()
  {
    shiftT(31);                     // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(28);                // S^WS | '(:' | ':='
    shiftT(53);                     // ':='
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(161);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 116                 // 'different'
       && lk != 118                 // 'distance'
       && lk != 128                 // 'entire'
       && lk != 206                 // 'ordered'
       && lk != 227                 // 'same'
       && lk != 275                 // 'window'
       && lk != 65106               // 'at' 'end'
       && lk != 123986)             // 'at' 'start'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(161);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 116                 // 'different'
       && lk != 118                 // 'distance'
       && lk != 128                 // 'entire'
       && lk != 206                 // 'ordered'
       && lk != 227                 // 'same'
       && lk != 275                 // 'window'
       && lk != 65106               // 'at' 'end'
       && lk != 123986)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    shift(270);                     // 'weight'
    lookahead1W(90);                // S^WS | '(:' | '{'
    shift(281);                     // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    shiftT(270);                    // 'weight'
    lookahead1W(90);                // S^WS | '(:' | '{'
    shiftT(281);                    // '{'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(287);                    // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 146)                // 'ftor'
      {
        break;
      }
      shift(146);                   // 'ftor'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 146)                // 'ftor'
      {
        break;
      }
      shiftT(146);                  // 'ftor'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 144)                // 'ftand'
      {
        break;
      }
      shift(144);                   // 'ftand'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 144)                // 'ftand'
      {
        break;
      }
      shiftT(144);                  // 'ftand'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 != 196)                // 'not'
      {
        break;
      }
      shift(196);                   // 'not'
      lookahead1W(56);              // S^WS | '(:' | 'in'
      shift(156);                   // 'in'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 != 196)                // 'not'
      {
        break;
      }
      shiftT(196);                  // 'not'
      lookahead1W(56);              // S^WS | '(:' | 'in'
      shiftT(156);                  // 'in'
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 145)                  // 'ftnot'
    {
      shift(145);                   // 'ftnot'
    }
    lookahead1W(164);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 145)                  // 'ftnot'
    {
      shiftT(145);                  // 'ftnot'
    }
    lookahead1W(164);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    if (l1 == 265)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 270)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    if (l1 == 265)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 270)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 35:                        // '('
      shift(35);                    // '('
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      shift(38);                    // ')'
      break;
    case 36:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 == 199)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 35:                        // '('
      shiftT(35);                   // '('
      lookahead1W(177);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      shiftT(38);                   // ')'
      break;
    case 36:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 == 199)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    if (l1 == 72                    // 'all'
     || l1 == 77                    // 'any'
     || l1 == 214)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    if (l1 == 72                    // 'all'
     || l1 == 77                    // 'any'
     || l1 == 214)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    default:
      shift(281);                   // '{'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_Expr();
      shift(287);                   // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    default:
      shiftT(281);                  // '{'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_Expr();
      shiftT(287);                  // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(104);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shift(281);                     // '{'
    lookahead1W(184);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 287)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    shift(287);                     // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(104);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    shiftT(281);                    // '{'
    lookahead1W(184);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 287)                  // '}'
    {
      try_FTSelection();
    }
    shiftT(287);                    // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 77:                        // 'any'
      shift(77);                    // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 == 278)                // 'word'
      {
        shift(278);                 // 'word'
      }
      break;
    case 72:                        // 'all'
      shift(72);                    // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 == 279)                // 'words'
      {
        shift(279);                 // 'words'
      }
      break;
    default:
      shift(214);                   // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 77:                        // 'any'
      shiftT(77);                   // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 == 278)                // 'word'
      {
        shiftT(278);                // 'word'
      }
      break;
    case 72:                        // 'all'
      shiftT(72);                   // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 == 279)                // 'words'
      {
        shiftT(279);                // 'words'
      }
      break;
    default:
      shiftT(214);                  // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    shift(199);                     // 'occurs'
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    shift(252);                     // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    shiftT(199);                    // 'occurs'
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    shiftT(252);                    // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 131:                       // 'exactly'
      shift(131);                   // 'exactly'
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_AdditiveExpr();
      break;
    case 82:                        // 'at'
      shift(82);                    // 'at'
      lookahead1W(129);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 176:                     // 'least'
        shift(176);                 // 'least'
        lookahead1W(266);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        shift(186);                 // 'most'
        lookahead1W(266);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      shift(142);                   // 'from'
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_AdditiveExpr();
      shift(253);                   // 'to'
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 131:                       // 'exactly'
      shiftT(131);                  // 'exactly'
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_AdditiveExpr();
      break;
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      lookahead1W(129);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 176:                     // 'least'
        shiftT(176);                // 'least'
        lookahead1W(266);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        try_AdditiveExpr();
        break;
      default:
        shiftT(186);                // 'most'
        lookahead1W(266);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        try_AdditiveExpr();
      }
      break;
    default:
      shiftT(142);                  // 'from'
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_AdditiveExpr();
      shiftT(253);                  // 'to'
      lookahead1W(266);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 206:                       // 'ordered'
      parse_FTOrder();
      break;
    case 275:                       // 'window'
      parse_FTWindow();
      break;
    case 118:                       // 'distance'
      parse_FTDistance();
      break;
    case 116:                       // 'different'
    case 227:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 206:                       // 'ordered'
      try_FTOrder();
      break;
    case 275:                       // 'window'
      try_FTWindow();
      break;
    case 118:                       // 'distance'
      try_FTDistance();
      break;
    case 116:                       // 'different'
    case 227:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    shift(206);                     // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    shiftT(206);                    // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    shift(275);                     // 'window'
    lookahead1W(266);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    shiftT(275);                    // 'window'
    lookahead1W(266);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    shift(118);                     // 'distance'
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    shiftT(118);                    // 'distance'
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 279:                       // 'words'
      shift(279);                   // 'words'
      break;
    case 237:                       // 'sentences'
      shift(237);                   // 'sentences'
      break;
    default:
      shift(209);                   // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 279:                       // 'words'
      shiftT(279);                  // 'words'
      break;
    case 237:                       // 'sentences'
      shiftT(237);                  // 'sentences'
      break;
    default:
      shiftT(209);                  // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 227:                       // 'same'
      shift(227);                   // 'same'
      break;
    default:
      shift(116);                   // 'different'
    }
    lookahead1W(136);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 227:                       // 'same'
      shiftT(227);                  // 'same'
      break;
    default:
      shiftT(116);                  // 'different'
    }
    lookahead1W(136);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 236:                       // 'sentence'
      shift(236);                   // 'sentence'
      break;
    default:
      shift(208);                   // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 236:                       // 'sentence'
      shiftT(236);                  // 'sentence'
      break;
    default:
      shiftT(208);                  // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 82:                        // 'at'
      shift(82);                    // 'at'
      lookahead1W(121);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 242:                     // 'start'
        shift(242);                 // 'start'
        break;
      default:
        shift(127);                 // 'end'
      }
      break;
    default:
      shift(128);                   // 'entire'
      lookahead1W(45);              // S^WS | '(:' | 'content'
      shift(101);                   // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      lookahead1W(121);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 242:                     // 'start'
        shiftT(242);                // 'start'
        break;
      default:
        shiftT(127);                // 'end'
      }
      break;
    default:
      shiftT(128);                  // 'entire'
      lookahead1W(45);              // S^WS | '(:' | 'content'
      shiftT(101);                  // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      shift(265);                   // 'using'
      lookahead1W(205);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
      whitespace();
      parse_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 != 265)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      shiftT(265);                  // 'using'
      lookahead1W(205);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
      try_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 != 265)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 191:                       // 'no'
      lookahead2W(176);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 172:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 274:                       // 'wildcards'
    case 140479:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 251:                       // 'thesaurus'
    case 128703:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 243:                       // 'stemming'
    case 124607:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 115:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 244:                       // 'stop'
    case 125119:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 203:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 191:                       // 'no'
      lookahead2W(176);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 172:                       // 'language'
      try_FTLanguageOption();
      break;
    case 274:                       // 'wildcards'
    case 140479:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 251:                       // 'thesaurus'
    case 128703:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 243:                       // 'stemming'
    case 124607:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 115:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 244:                       // 'stop'
    case 125119:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 203:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 89:                        // 'case'
      shift(89);                    // 'case'
      lookahead1W(128);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 160:                     // 'insensitive'
        shift(160);                 // 'insensitive'
        break;
      default:
        shift(235);                 // 'sensitive'
      }
      break;
    case 180:                       // 'lowercase'
      shift(180);                   // 'lowercase'
      break;
    default:
      shift(264);                   // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 89:                        // 'case'
      shiftT(89);                   // 'case'
      lookahead1W(128);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 160:                     // 'insensitive'
        shiftT(160);                // 'insensitive'
        break;
      default:
        shiftT(235);                // 'sensitive'
      }
      break;
    case 180:                       // 'lowercase'
      shiftT(180);                  // 'lowercase'
      break;
    default:
      shiftT(264);                  // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    shift(115);                     // 'diacritics'
    lookahead1W(128);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 160:                       // 'insensitive'
      shift(160);                   // 'insensitive'
      break;
    default:
      shift(235);                   // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    shiftT(115);                    // 'diacritics'
    lookahead1W(128);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 160:                       // 'insensitive'
      shiftT(160);                  // 'insensitive'
      break;
    default:
      shiftT(235);                  // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 243:                       // 'stemming'
      shift(243);                   // 'stemming'
      break;
    default:
      shift(191);                   // 'no'
      lookahead1W(77);              // S^WS | '(:' | 'stemming'
      shift(243);                   // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 243:                       // 'stemming'
      shiftT(243);                  // 'stemming'
      break;
    default:
      shiftT(191);                  // 'no'
      lookahead1W(77);              // S^WS | '(:' | 'stemming'
      shiftT(243);                  // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 251:                       // 'thesaurus'
      shift(251);                   // 'thesaurus'
      lookahead1W(152);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 82:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 110:                     // 'default'
        shift(110);                 // 'default'
        break;
      default:
        shift(35);                  // '('
        lookahead1W(116);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 82:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          shift(110);               // 'default'
        }
        for (;;)
        {
          lookahead1W(105);         // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          shift(42);                // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        shift(38);                  // ')'
      }
      break;
    default:
      shift(191);                   // 'no'
      lookahead1W(81);              // S^WS | '(:' | 'thesaurus'
      shift(251);                   // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 251:                       // 'thesaurus'
      shiftT(251);                  // 'thesaurus'
      lookahead1W(152);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 82:                      // 'at'
        try_FTThesaurusID();
        break;
      case 110:                     // 'default'
        shiftT(110);                // 'default'
        break;
      default:
        shiftT(35);                 // '('
        lookahead1W(116);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 82:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          shiftT(110);              // 'default'
        }
        for (;;)
        {
          lookahead1W(105);         // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          shiftT(42);               // ','
          lookahead1W(34);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        shiftT(38);                 // ')'
      }
      break;
    default:
      shiftT(191);                  // 'no'
      lookahead1W(81);              // S^WS | '(:' | 'thesaurus'
      shiftT(251);                  // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    shift(82);                      // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    if (l1 == 221)                  // 'relationship'
    {
      shift(221);                   // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    switch (l1)
    {
    case 82:                        // 'at'
      lookahead2W(183);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 131                   // 'exactly'
     || lk == 142                   // 'from'
     || lk == 90194                 // 'at' 'least'
     || lk == 95314)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(61);              // S^WS | '(:' | 'levels'
      shift(178);                   // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    shiftT(82);                     // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    if (l1 == 221)                  // 'relationship'
    {
      shiftT(221);                  // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(11);                   // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    switch (l1)
    {
    case 82:                        // 'at'
      lookahead2W(183);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 131                   // 'exactly'
     || lk == 142                   // 'from'
     || lk == 90194                 // 'at' 'least'
     || lk == 95314)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(61);              // S^WS | '(:' | 'levels'
      shiftT(178);                  // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 131:                       // 'exactly'
      shift(131);                   // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
      break;
    case 82:                        // 'at'
      shift(82);                    // 'at'
      lookahead1W(129);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 176:                     // 'least'
        shift(176);                 // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(8);                   // IntegerLiteral
        break;
      default:
        shift(186);                 // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(8);                   // IntegerLiteral
      }
      break;
    default:
      shift(142);                   // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
      lookahead1W(82);              // S^WS | '(:' | 'to'
      shift(253);                   // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 131:                       // 'exactly'
      shiftT(131);                  // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
      break;
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      lookahead1W(129);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 176:                     // 'least'
        shiftT(176);                // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(8);                  // IntegerLiteral
        break;
      default:
        shiftT(186);                // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(8);                  // IntegerLiteral
      }
      break;
    default:
      shiftT(142);                  // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
      lookahead1W(82);              // S^WS | '(:' | 'to'
      shiftT(253);                  // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 244:                       // 'stop'
      shift(244);                   // 'stop'
      lookahead1W(89);              // S^WS | '(:' | 'words'
      shift(279);                   // 'words'
      lookahead1W(152);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 110:                     // 'default'
        shift(110);                 // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
          if (l1 != 132             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
          if (l1 != 132             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shift(191);                   // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'stop'
      shift(244);                   // 'stop'
      lookahead1W(89);              // S^WS | '(:' | 'words'
      shift(279);                   // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 244:                       // 'stop'
      shiftT(244);                  // 'stop'
      lookahead1W(89);              // S^WS | '(:' | 'words'
      shiftT(279);                  // 'words'
      lookahead1W(152);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 110:                     // 'default'
        shiftT(110);                // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
          if (l1 != 132             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
          if (l1 != 132             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shiftT(191);                  // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'stop'
      shiftT(244);                  // 'stop'
      lookahead1W(89);              // S^WS | '(:' | 'words'
      shiftT(279);                  // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 82:                        // 'at'
      shift(82);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      break;
    default:
      shift(35);                    // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shift(42);                  // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(11);                  // StringLiteral
      }
      shift(38);                    // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
      break;
    default:
      shiftT(35);                   // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(11);                   // StringLiteral
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        shiftT(42);                 // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shiftT(11);                 // StringLiteral
      }
      shiftT(38);                   // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 260:                       // 'union'
      shift(260);                   // 'union'
      break;
    default:
      shift(132);                   // 'except'
    }
    lookahead1W(103);               // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 260:                       // 'union'
      shiftT(260);                  // 'union'
      break;
    default:
      shiftT(132);                  // 'except'
    }
    lookahead1W(103);               // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    shift(172);                     // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    shiftT(172);                    // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(11);                     // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 274:                       // 'wildcards'
      shift(274);                   // 'wildcards'
      break;
    default:
      shift(191);                   // 'no'
      lookahead1W(87);              // S^WS | '(:' | 'wildcards'
      shift(274);                   // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 274:                       // 'wildcards'
      shiftT(274);                  // 'wildcards'
      break;
    default:
      shiftT(191);                  // 'no'
      lookahead1W(87);              // S^WS | '(:' | 'wildcards'
      shiftT(274);                  // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    shift(203);                     // 'option'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    shiftT(203);                    // 'option'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(11);                     // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    shift(277);                     // 'without'
    lookahead1W(45);                // S^WS | '(:' | 'content'
    shift(101);                     // 'content'
    lookahead1W(266);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    shiftT(277);                    // 'without'
    lookahead1W(45);                // S^WS | '(:' | 'content'
    shiftT(101);                    // 'content'
    lookahead1W(266);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    shift(96);                      // 'collection'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(111);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    shift(80);                      // 'as'
    lookahead1W(200);               // S^WS | '(:' | 'attribute' | 'comment' | 'document-node' | 'element' |
    whitespace();
    parse_KindTest();
    lookahead1W(171);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 54)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(156);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 95)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    shift(80);                      // 'as'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_AtomicType();
    lookahead1W(189);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 40                    // '*'
     || l1 == 41                    // '+'
     || l1 == 65)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    shift(95);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    shift(157);                     // 'index'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_IndexName();
    lookahead1W(68);                // S^WS | '(:' | 'on'
    shift(201);                     // 'on'
    lookahead1W(66);                // S^WS | '(:' | 'nodes'
    shift(195);                     // 'nodes'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_IndexDomainExpr();
    shift(88);                      // 'by'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(107);             // S^WS | '(:' | ',' | ';'
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(263);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    shift(163);                     // 'integrity'
    lookahead1W(43);                // S^WS | '(:' | 'constraint'
    shift(98);                      // 'constraint'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(124);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 201:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    shift(201);                     // 'on'
    lookahead1W(42);                // S^WS | '(:' | 'collection'
    shift(96);                      // 'collection'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(150);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 31:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 194:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(40);                // S^WS | '(:' | 'check'
    shift(93);                      // 'check'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    shift(194);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(40);                // S^WS | '(:' | 'check'
    shift(93);                      // 'check'
    lookahead1W(83);                // S^WS | '(:' | 'unique'
    shift(261);                     // 'unique'
    lookahead1W(60);                // S^WS | '(:' | 'key'
    shift(171);                     // 'key'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    shift(140);                     // 'foreach'
    lookahead1W(65);                // S^WS | '(:' | 'node'
    shift(194);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(40);                // S^WS | '(:' | 'check'
    shift(93);                      // 'check'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    shift(141);                     // 'foreign'
    lookahead1W(60);                // S^WS | '(:' | 'key'
    shift(171);                     // 'key'
    lookahead1W(54);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    shift(142);                     // 'from'
    lookahead1W(42);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    shift(253);                     // 'to'
    lookahead1W(42);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    shift(96);                      // 'collection'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(65);                // S^WS | '(:' | 'node'
    shift(194);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(60);                // S^WS | '(:' | 'key'
    shift(171);                     // 'key'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    shiftT(37);                     // '(:'
    for (;;)
    {
      lookahead1(92);               // CommentContents | '(:' | ':)'
      if (l1 == 51)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 24:                      // CommentContents
        shiftT(24);                 // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    shiftT(51);                     // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 22:                        // S^WS
      shiftT(22);                   // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(241);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
    switch (l1)
    {
    case 83:                        // 'attribute'
      shift(83);                    // 'attribute'
      break;
    case 97:                        // 'comment'
      shift(97);                    // 'comment'
      break;
    case 121:                       // 'document-node'
      shift(121);                   // 'document-node'
      break;
    case 122:                       // 'element'
      shift(122);                   // 'element'
      break;
    case 125:                       // 'empty-sequence'
      shift(125);                   // 'empty-sequence'
      break;
    case 147:                       // 'function'
      shift(147);                   // 'function'
      break;
    case 154:                       // 'if'
      shift(154);                   // 'if'
      break;
    case 167:                       // 'item'
      shift(167);                   // 'item'
      break;
    case 188:                       // 'namespace-node'
      shift(188);                   // 'namespace-node'
      break;
    case 194:                       // 'node'
      shift(194);                   // 'node'
      break;
    case 220:                       // 'processing-instruction'
      shift(220);                   // 'processing-instruction'
      break;
    case 230:                       // 'schema-attribute'
      shift(230);                   // 'schema-attribute'
      break;
    case 231:                       // 'schema-element'
      shift(231);                   // 'schema-element'
      break;
    case 248:                       // 'switch'
      shift(248);                   // 'switch'
      break;
    case 249:                       // 'text'
      shift(249);                   // 'text'
      break;
    case 259:                       // 'typeswitch'
      shift(259);                   // 'typeswitch'
      break;
    case 79:                        // 'array'
      shift(79);                    // 'array'
      break;
    case 169:                       // 'json-item'
      shift(169);                   // 'json-item'
      break;
    case 247:                       // 'structured-item'
      shift(247);                   // 'structured-item'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(241);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
    switch (l1)
    {
    case 83:                        // 'attribute'
      shiftT(83);                   // 'attribute'
      break;
    case 97:                        // 'comment'
      shiftT(97);                   // 'comment'
      break;
    case 121:                       // 'document-node'
      shiftT(121);                  // 'document-node'
      break;
    case 122:                       // 'element'
      shiftT(122);                  // 'element'
      break;
    case 125:                       // 'empty-sequence'
      shiftT(125);                  // 'empty-sequence'
      break;
    case 147:                       // 'function'
      shiftT(147);                  // 'function'
      break;
    case 154:                       // 'if'
      shiftT(154);                  // 'if'
      break;
    case 167:                       // 'item'
      shiftT(167);                  // 'item'
      break;
    case 188:                       // 'namespace-node'
      shiftT(188);                  // 'namespace-node'
      break;
    case 194:                       // 'node'
      shiftT(194);                  // 'node'
      break;
    case 220:                       // 'processing-instruction'
      shiftT(220);                  // 'processing-instruction'
      break;
    case 230:                       // 'schema-attribute'
      shiftT(230);                  // 'schema-attribute'
      break;
    case 231:                       // 'schema-element'
      shiftT(231);                  // 'schema-element'
      break;
    case 248:                       // 'switch'
      shiftT(248);                  // 'switch'
      break;
    case 249:                       // 'text'
      shiftT(249);                  // 'text'
      break;
    case 259:                       // 'typeswitch'
      shiftT(259);                  // 'typeswitch'
      break;
    case 79:                        // 'array'
      shiftT(79);                   // 'array'
      break;
    case 169:                       // 'json-item'
      shiftT(169);                  // 'json-item'
      break;
    case 247:                       // 'structured-item'
      shiftT(247);                  // 'structured-item'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 6:                         // EQName^Token
      shift(6);                     // EQName^Token
      break;
    case 71:                        // 'after'
      shift(71);                    // 'after'
      break;
    case 74:                        // 'ancestor'
      shift(74);                    // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      shift(75);                    // 'ancestor-or-self'
      break;
    case 76:                        // 'and'
      shift(76);                    // 'and'
      break;
    case 80:                        // 'as'
      shift(80);                    // 'as'
      break;
    case 81:                        // 'ascending'
      shift(81);                    // 'ascending'
      break;
    case 85:                        // 'before'
      shift(85);                    // 'before'
      break;
    case 89:                        // 'case'
      shift(89);                    // 'case'
      break;
    case 90:                        // 'cast'
      shift(90);                    // 'cast'
      break;
    case 91:                        // 'castable'
      shift(91);                    // 'castable'
      break;
    case 94:                        // 'child'
      shift(94);                    // 'child'
      break;
    case 95:                        // 'collation'
      shift(95);                    // 'collation'
      break;
    case 104:                       // 'copy'
      shift(104);                   // 'copy'
      break;
    case 106:                       // 'count'
      shift(106);                   // 'count'
      break;
    case 109:                       // 'declare'
      shift(109);                   // 'declare'
      break;
    case 110:                       // 'default'
      shift(110);                   // 'default'
      break;
    case 111:                       // 'delete'
      shift(111);                   // 'delete'
      break;
    case 112:                       // 'descendant'
      shift(112);                   // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      shift(113);                   // 'descendant-or-self'
      break;
    case 114:                       // 'descending'
      shift(114);                   // 'descending'
      break;
    case 119:                       // 'div'
      shift(119);                   // 'div'
      break;
    case 120:                       // 'document'
      shift(120);                   // 'document'
      break;
    case 123:                       // 'else'
      shift(123);                   // 'else'
      break;
    case 124:                       // 'empty'
      shift(124);                   // 'empty'
      break;
    case 127:                       // 'end'
      shift(127);                   // 'end'
      break;
    case 129:                       // 'eq'
      shift(129);                   // 'eq'
      break;
    case 130:                       // 'every'
      shift(130);                   // 'every'
      break;
    case 132:                       // 'except'
      shift(132);                   // 'except'
      break;
    case 136:                       // 'first'
      shift(136);                   // 'first'
      break;
    case 137:                       // 'following'
      shift(137);                   // 'following'
      break;
    case 138:                       // 'following-sibling'
      shift(138);                   // 'following-sibling'
      break;
    case 139:                       // 'for'
      shift(139);                   // 'for'
      break;
    case 148:                       // 'ge'
      shift(148);                   // 'ge'
      break;
    case 150:                       // 'group'
      shift(150);                   // 'group'
      break;
    case 152:                       // 'gt'
      shift(152);                   // 'gt'
      break;
    case 153:                       // 'idiv'
      shift(153);                   // 'idiv'
      break;
    case 155:                       // 'import'
      shift(155);                   // 'import'
      break;
    case 161:                       // 'insert'
      shift(161);                   // 'insert'
      break;
    case 162:                       // 'instance'
      shift(162);                   // 'instance'
      break;
    case 164:                       // 'intersect'
      shift(164);                   // 'intersect'
      break;
    case 165:                       // 'into'
      shift(165);                   // 'into'
      break;
    case 166:                       // 'is'
      shift(166);                   // 'is'
      break;
    case 173:                       // 'last'
      shift(173);                   // 'last'
      break;
    case 175:                       // 'le'
      shift(175);                   // 'le'
      break;
    case 177:                       // 'let'
      shift(177);                   // 'let'
      break;
    case 181:                       // 'lt'
      shift(181);                   // 'lt'
      break;
    case 183:                       // 'mod'
      shift(183);                   // 'mod'
      break;
    case 184:                       // 'modify'
      shift(184);                   // 'modify'
      break;
    case 185:                       // 'module'
      shift(185);                   // 'module'
      break;
    case 187:                       // 'namespace'
      shift(187);                   // 'namespace'
      break;
    case 189:                       // 'ne'
      shift(189);                   // 'ne'
      break;
    case 202:                       // 'only'
      shift(202);                   // 'only'
      break;
    case 204:                       // 'or'
      shift(204);                   // 'or'
      break;
    case 205:                       // 'order'
      shift(205);                   // 'order'
      break;
    case 206:                       // 'ordered'
      shift(206);                   // 'ordered'
      break;
    case 210:                       // 'parent'
      shift(210);                   // 'parent'
      break;
    case 216:                       // 'preceding'
      shift(216);                   // 'preceding'
      break;
    case 217:                       // 'preceding-sibling'
      shift(217);                   // 'preceding-sibling'
      break;
    case 222:                       // 'rename'
      shift(222);                   // 'rename'
      break;
    case 223:                       // 'replace'
      shift(223);                   // 'replace'
      break;
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    case 228:                       // 'satisfies'
      shift(228);                   // 'satisfies'
      break;
    case 234:                       // 'self'
      shift(234);                   // 'self'
      break;
    case 240:                       // 'some'
      shift(240);                   // 'some'
      break;
    case 241:                       // 'stable'
      shift(241);                   // 'stable'
      break;
    case 242:                       // 'start'
      shift(242);                   // 'start'
      break;
    case 253:                       // 'to'
      shift(253);                   // 'to'
      break;
    case 254:                       // 'treat'
      shift(254);                   // 'treat'
      break;
    case 256:                       // 'try'
      shift(256);                   // 'try'
      break;
    case 260:                       // 'union'
      shift(260);                   // 'union'
      break;
    case 262:                       // 'unordered'
      shift(262);                   // 'unordered'
      break;
    case 266:                       // 'validate'
      shift(266);                   // 'validate'
      break;
    case 272:                       // 'where'
      shift(272);                   // 'where'
      break;
    case 276:                       // 'with'
      shift(276);                   // 'with'
      break;
    case 170:                       // 'jsoniq'
      shift(170);                   // 'jsoniq'
      break;
    case 73:                        // 'allowing'
      shift(73);                    // 'allowing'
      break;
    case 82:                        // 'at'
      shift(82);                    // 'at'
      break;
    case 84:                        // 'base-uri'
      shift(84);                    // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      shift(86);                    // 'boundary-space'
      break;
    case 87:                        // 'break'
      shift(87);                    // 'break'
      break;
    case 92:                        // 'catch'
      shift(92);                    // 'catch'
      break;
    case 99:                        // 'construction'
      shift(99);                    // 'construction'
      break;
    case 102:                       // 'context'
      shift(102);                   // 'context'
      break;
    case 103:                       // 'continue'
      shift(103);                   // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      shift(105);                   // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      shift(107);                   // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      shift(126);                   // 'encoding'
      break;
    case 133:                       // 'exit'
      shift(133);                   // 'exit'
      break;
    case 134:                       // 'external'
      shift(134);                   // 'external'
      break;
    case 143:                       // 'ft-option'
      shift(143);                   // 'ft-option'
      break;
    case 156:                       // 'in'
      shift(156);                   // 'in'
      break;
    case 157:                       // 'index'
      shift(157);                   // 'index'
      break;
    case 163:                       // 'integrity'
      shift(163);                   // 'integrity'
      break;
    case 174:                       // 'lax'
      shift(174);                   // 'lax'
      break;
    case 195:                       // 'nodes'
      shift(195);                   // 'nodes'
      break;
    case 203:                       // 'option'
      shift(203);                   // 'option'
      break;
    case 207:                       // 'ordering'
      shift(207);                   // 'ordering'
      break;
    case 226:                       // 'revalidation'
      shift(226);                   // 'revalidation'
      break;
    case 229:                       // 'schema'
      shift(229);                   // 'schema'
      break;
    case 232:                       // 'score'
      shift(232);                   // 'score'
      break;
    case 239:                       // 'sliding'
      shift(239);                   // 'sliding'
      break;
    case 245:                       // 'strict'
      shift(245);                   // 'strict'
      break;
    case 257:                       // 'tumbling'
      shift(257);                   // 'tumbling'
      break;
    case 258:                       // 'type'
      shift(258);                   // 'type'
      break;
    case 263:                       // 'updating'
      shift(263);                   // 'updating'
      break;
    case 267:                       // 'value'
      shift(267);                   // 'value'
      break;
    case 268:                       // 'variable'
      shift(268);                   // 'variable'
      break;
    case 269:                       // 'version'
      shift(269);                   // 'version'
      break;
    case 273:                       // 'while'
      shift(273);                   // 'while'
      break;
    case 98:                        // 'constraint'
      shift(98);                    // 'constraint'
      break;
    case 179:                       // 'loop'
      shift(179);                   // 'loop'
      break;
    case 225:                       // 'returning'
      shift(225);                   // 'returning'
      break;
    case 78:                        // 'append'
      shift(78);                    // 'append'
      break;
    case 135:                       // 'false'
      shift(135);                   // 'false'
      break;
    case 142:                       // 'from'
      shift(142);                   // 'from'
      break;
    case 197:                       // 'null'
      shift(197);                   // 'null'
      break;
    case 168:                       // 'json'
      shift(168);                   // 'json'
      break;
    case 198:                       // 'object'
      shift(198);                   // 'object'
      break;
    case 233:                       // 'select'
      shift(233);                   // 'select'
      break;
    default:
      shift(255);                   // 'true'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 6:                         // EQName^Token
      shiftT(6);                    // EQName^Token
      break;
    case 71:                        // 'after'
      shiftT(71);                   // 'after'
      break;
    case 74:                        // 'ancestor'
      shiftT(74);                   // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      shiftT(75);                   // 'ancestor-or-self'
      break;
    case 76:                        // 'and'
      shiftT(76);                   // 'and'
      break;
    case 80:                        // 'as'
      shiftT(80);                   // 'as'
      break;
    case 81:                        // 'ascending'
      shiftT(81);                   // 'ascending'
      break;
    case 85:                        // 'before'
      shiftT(85);                   // 'before'
      break;
    case 89:                        // 'case'
      shiftT(89);                   // 'case'
      break;
    case 90:                        // 'cast'
      shiftT(90);                   // 'cast'
      break;
    case 91:                        // 'castable'
      shiftT(91);                   // 'castable'
      break;
    case 94:                        // 'child'
      shiftT(94);                   // 'child'
      break;
    case 95:                        // 'collation'
      shiftT(95);                   // 'collation'
      break;
    case 104:                       // 'copy'
      shiftT(104);                  // 'copy'
      break;
    case 106:                       // 'count'
      shiftT(106);                  // 'count'
      break;
    case 109:                       // 'declare'
      shiftT(109);                  // 'declare'
      break;
    case 110:                       // 'default'
      shiftT(110);                  // 'default'
      break;
    case 111:                       // 'delete'
      shiftT(111);                  // 'delete'
      break;
    case 112:                       // 'descendant'
      shiftT(112);                  // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      shiftT(113);                  // 'descendant-or-self'
      break;
    case 114:                       // 'descending'
      shiftT(114);                  // 'descending'
      break;
    case 119:                       // 'div'
      shiftT(119);                  // 'div'
      break;
    case 120:                       // 'document'
      shiftT(120);                  // 'document'
      break;
    case 123:                       // 'else'
      shiftT(123);                  // 'else'
      break;
    case 124:                       // 'empty'
      shiftT(124);                  // 'empty'
      break;
    case 127:                       // 'end'
      shiftT(127);                  // 'end'
      break;
    case 129:                       // 'eq'
      shiftT(129);                  // 'eq'
      break;
    case 130:                       // 'every'
      shiftT(130);                  // 'every'
      break;
    case 132:                       // 'except'
      shiftT(132);                  // 'except'
      break;
    case 136:                       // 'first'
      shiftT(136);                  // 'first'
      break;
    case 137:                       // 'following'
      shiftT(137);                  // 'following'
      break;
    case 138:                       // 'following-sibling'
      shiftT(138);                  // 'following-sibling'
      break;
    case 139:                       // 'for'
      shiftT(139);                  // 'for'
      break;
    case 148:                       // 'ge'
      shiftT(148);                  // 'ge'
      break;
    case 150:                       // 'group'
      shiftT(150);                  // 'group'
      break;
    case 152:                       // 'gt'
      shiftT(152);                  // 'gt'
      break;
    case 153:                       // 'idiv'
      shiftT(153);                  // 'idiv'
      break;
    case 155:                       // 'import'
      shiftT(155);                  // 'import'
      break;
    case 161:                       // 'insert'
      shiftT(161);                  // 'insert'
      break;
    case 162:                       // 'instance'
      shiftT(162);                  // 'instance'
      break;
    case 164:                       // 'intersect'
      shiftT(164);                  // 'intersect'
      break;
    case 165:                       // 'into'
      shiftT(165);                  // 'into'
      break;
    case 166:                       // 'is'
      shiftT(166);                  // 'is'
      break;
    case 173:                       // 'last'
      shiftT(173);                  // 'last'
      break;
    case 175:                       // 'le'
      shiftT(175);                  // 'le'
      break;
    case 177:                       // 'let'
      shiftT(177);                  // 'let'
      break;
    case 181:                       // 'lt'
      shiftT(181);                  // 'lt'
      break;
    case 183:                       // 'mod'
      shiftT(183);                  // 'mod'
      break;
    case 184:                       // 'modify'
      shiftT(184);                  // 'modify'
      break;
    case 185:                       // 'module'
      shiftT(185);                  // 'module'
      break;
    case 187:                       // 'namespace'
      shiftT(187);                  // 'namespace'
      break;
    case 189:                       // 'ne'
      shiftT(189);                  // 'ne'
      break;
    case 202:                       // 'only'
      shiftT(202);                  // 'only'
      break;
    case 204:                       // 'or'
      shiftT(204);                  // 'or'
      break;
    case 205:                       // 'order'
      shiftT(205);                  // 'order'
      break;
    case 206:                       // 'ordered'
      shiftT(206);                  // 'ordered'
      break;
    case 210:                       // 'parent'
      shiftT(210);                  // 'parent'
      break;
    case 216:                       // 'preceding'
      shiftT(216);                  // 'preceding'
      break;
    case 217:                       // 'preceding-sibling'
      shiftT(217);                  // 'preceding-sibling'
      break;
    case 222:                       // 'rename'
      shiftT(222);                  // 'rename'
      break;
    case 223:                       // 'replace'
      shiftT(223);                  // 'replace'
      break;
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    case 228:                       // 'satisfies'
      shiftT(228);                  // 'satisfies'
      break;
    case 234:                       // 'self'
      shiftT(234);                  // 'self'
      break;
    case 240:                       // 'some'
      shiftT(240);                  // 'some'
      break;
    case 241:                       // 'stable'
      shiftT(241);                  // 'stable'
      break;
    case 242:                       // 'start'
      shiftT(242);                  // 'start'
      break;
    case 253:                       // 'to'
      shiftT(253);                  // 'to'
      break;
    case 254:                       // 'treat'
      shiftT(254);                  // 'treat'
      break;
    case 256:                       // 'try'
      shiftT(256);                  // 'try'
      break;
    case 260:                       // 'union'
      shiftT(260);                  // 'union'
      break;
    case 262:                       // 'unordered'
      shiftT(262);                  // 'unordered'
      break;
    case 266:                       // 'validate'
      shiftT(266);                  // 'validate'
      break;
    case 272:                       // 'where'
      shiftT(272);                  // 'where'
      break;
    case 276:                       // 'with'
      shiftT(276);                  // 'with'
      break;
    case 170:                       // 'jsoniq'
      shiftT(170);                  // 'jsoniq'
      break;
    case 73:                        // 'allowing'
      shiftT(73);                   // 'allowing'
      break;
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      break;
    case 84:                        // 'base-uri'
      shiftT(84);                   // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      shiftT(86);                   // 'boundary-space'
      break;
    case 87:                        // 'break'
      shiftT(87);                   // 'break'
      break;
    case 92:                        // 'catch'
      shiftT(92);                   // 'catch'
      break;
    case 99:                        // 'construction'
      shiftT(99);                   // 'construction'
      break;
    case 102:                       // 'context'
      shiftT(102);                  // 'context'
      break;
    case 103:                       // 'continue'
      shiftT(103);                  // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      shiftT(105);                  // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      shiftT(107);                  // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      shiftT(126);                  // 'encoding'
      break;
    case 133:                       // 'exit'
      shiftT(133);                  // 'exit'
      break;
    case 134:                       // 'external'
      shiftT(134);                  // 'external'
      break;
    case 143:                       // 'ft-option'
      shiftT(143);                  // 'ft-option'
      break;
    case 156:                       // 'in'
      shiftT(156);                  // 'in'
      break;
    case 157:                       // 'index'
      shiftT(157);                  // 'index'
      break;
    case 163:                       // 'integrity'
      shiftT(163);                  // 'integrity'
      break;
    case 174:                       // 'lax'
      shiftT(174);                  // 'lax'
      break;
    case 195:                       // 'nodes'
      shiftT(195);                  // 'nodes'
      break;
    case 203:                       // 'option'
      shiftT(203);                  // 'option'
      break;
    case 207:                       // 'ordering'
      shiftT(207);                  // 'ordering'
      break;
    case 226:                       // 'revalidation'
      shiftT(226);                  // 'revalidation'
      break;
    case 229:                       // 'schema'
      shiftT(229);                  // 'schema'
      break;
    case 232:                       // 'score'
      shiftT(232);                  // 'score'
      break;
    case 239:                       // 'sliding'
      shiftT(239);                  // 'sliding'
      break;
    case 245:                       // 'strict'
      shiftT(245);                  // 'strict'
      break;
    case 257:                       // 'tumbling'
      shiftT(257);                  // 'tumbling'
      break;
    case 258:                       // 'type'
      shiftT(258);                  // 'type'
      break;
    case 263:                       // 'updating'
      shiftT(263);                  // 'updating'
      break;
    case 267:                       // 'value'
      shiftT(267);                  // 'value'
      break;
    case 268:                       // 'variable'
      shiftT(268);                  // 'variable'
      break;
    case 269:                       // 'version'
      shiftT(269);                  // 'version'
      break;
    case 273:                       // 'while'
      shiftT(273);                  // 'while'
      break;
    case 98:                        // 'constraint'
      shiftT(98);                   // 'constraint'
      break;
    case 179:                       // 'loop'
      shiftT(179);                  // 'loop'
      break;
    case 225:                       // 'returning'
      shiftT(225);                  // 'returning'
      break;
    case 78:                        // 'append'
      shiftT(78);                   // 'append'
      break;
    case 135:                       // 'false'
      shiftT(135);                  // 'false'
      break;
    case 142:                       // 'from'
      shiftT(142);                  // 'from'
      break;
    case 197:                       // 'null'
      shiftT(197);                  // 'null'
      break;
    case 168:                       // 'json'
      shiftT(168);                  // 'json'
      break;
    case 198:                       // 'object'
      shiftT(198);                  // 'object'
      break;
    case 233:                       // 'select'
      shiftT(233);                  // 'select'
      break;
    default:
      shiftT(255);                  // 'true'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 19:                        // NCName^Token
      shift(19);                    // NCName^Token
      break;
    case 71:                        // 'after'
      shift(71);                    // 'after'
      break;
    case 76:                        // 'and'
      shift(76);                    // 'and'
      break;
    case 80:                        // 'as'
      shift(80);                    // 'as'
      break;
    case 81:                        // 'ascending'
      shift(81);                    // 'ascending'
      break;
    case 85:                        // 'before'
      shift(85);                    // 'before'
      break;
    case 89:                        // 'case'
      shift(89);                    // 'case'
      break;
    case 90:                        // 'cast'
      shift(90);                    // 'cast'
      break;
    case 91:                        // 'castable'
      shift(91);                    // 'castable'
      break;
    case 95:                        // 'collation'
      shift(95);                    // 'collation'
      break;
    case 106:                       // 'count'
      shift(106);                   // 'count'
      break;
    case 110:                       // 'default'
      shift(110);                   // 'default'
      break;
    case 114:                       // 'descending'
      shift(114);                   // 'descending'
      break;
    case 119:                       // 'div'
      shift(119);                   // 'div'
      break;
    case 123:                       // 'else'
      shift(123);                   // 'else'
      break;
    case 124:                       // 'empty'
      shift(124);                   // 'empty'
      break;
    case 127:                       // 'end'
      shift(127);                   // 'end'
      break;
    case 129:                       // 'eq'
      shift(129);                   // 'eq'
      break;
    case 132:                       // 'except'
      shift(132);                   // 'except'
      break;
    case 139:                       // 'for'
      shift(139);                   // 'for'
      break;
    case 148:                       // 'ge'
      shift(148);                   // 'ge'
      break;
    case 150:                       // 'group'
      shift(150);                   // 'group'
      break;
    case 152:                       // 'gt'
      shift(152);                   // 'gt'
      break;
    case 153:                       // 'idiv'
      shift(153);                   // 'idiv'
      break;
    case 162:                       // 'instance'
      shift(162);                   // 'instance'
      break;
    case 164:                       // 'intersect'
      shift(164);                   // 'intersect'
      break;
    case 165:                       // 'into'
      shift(165);                   // 'into'
      break;
    case 166:                       // 'is'
      shift(166);                   // 'is'
      break;
    case 175:                       // 'le'
      shift(175);                   // 'le'
      break;
    case 177:                       // 'let'
      shift(177);                   // 'let'
      break;
    case 181:                       // 'lt'
      shift(181);                   // 'lt'
      break;
    case 183:                       // 'mod'
      shift(183);                   // 'mod'
      break;
    case 184:                       // 'modify'
      shift(184);                   // 'modify'
      break;
    case 189:                       // 'ne'
      shift(189);                   // 'ne'
      break;
    case 202:                       // 'only'
      shift(202);                   // 'only'
      break;
    case 204:                       // 'or'
      shift(204);                   // 'or'
      break;
    case 205:                       // 'order'
      shift(205);                   // 'order'
      break;
    case 224:                       // 'return'
      shift(224);                   // 'return'
      break;
    case 228:                       // 'satisfies'
      shift(228);                   // 'satisfies'
      break;
    case 241:                       // 'stable'
      shift(241);                   // 'stable'
      break;
    case 242:                       // 'start'
      shift(242);                   // 'start'
      break;
    case 253:                       // 'to'
      shift(253);                   // 'to'
      break;
    case 254:                       // 'treat'
      shift(254);                   // 'treat'
      break;
    case 260:                       // 'union'
      shift(260);                   // 'union'
      break;
    case 272:                       // 'where'
      shift(272);                   // 'where'
      break;
    case 276:                       // 'with'
      shift(276);                   // 'with'
      break;
    case 74:                        // 'ancestor'
      shift(74);                    // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      shift(75);                    // 'ancestor-or-self'
      break;
    case 83:                        // 'attribute'
      shift(83);                    // 'attribute'
      break;
    case 94:                        // 'child'
      shift(94);                    // 'child'
      break;
    case 97:                        // 'comment'
      shift(97);                    // 'comment'
      break;
    case 104:                       // 'copy'
      shift(104);                   // 'copy'
      break;
    case 109:                       // 'declare'
      shift(109);                   // 'declare'
      break;
    case 111:                       // 'delete'
      shift(111);                   // 'delete'
      break;
    case 112:                       // 'descendant'
      shift(112);                   // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      shift(113);                   // 'descendant-or-self'
      break;
    case 120:                       // 'document'
      shift(120);                   // 'document'
      break;
    case 121:                       // 'document-node'
      shift(121);                   // 'document-node'
      break;
    case 122:                       // 'element'
      shift(122);                   // 'element'
      break;
    case 125:                       // 'empty-sequence'
      shift(125);                   // 'empty-sequence'
      break;
    case 130:                       // 'every'
      shift(130);                   // 'every'
      break;
    case 136:                       // 'first'
      shift(136);                   // 'first'
      break;
    case 137:                       // 'following'
      shift(137);                   // 'following'
      break;
    case 138:                       // 'following-sibling'
      shift(138);                   // 'following-sibling'
      break;
    case 147:                       // 'function'
      shift(147);                   // 'function'
      break;
    case 154:                       // 'if'
      shift(154);                   // 'if'
      break;
    case 155:                       // 'import'
      shift(155);                   // 'import'
      break;
    case 161:                       // 'insert'
      shift(161);                   // 'insert'
      break;
    case 167:                       // 'item'
      shift(167);                   // 'item'
      break;
    case 173:                       // 'last'
      shift(173);                   // 'last'
      break;
    case 185:                       // 'module'
      shift(185);                   // 'module'
      break;
    case 187:                       // 'namespace'
      shift(187);                   // 'namespace'
      break;
    case 188:                       // 'namespace-node'
      shift(188);                   // 'namespace-node'
      break;
    case 194:                       // 'node'
      shift(194);                   // 'node'
      break;
    case 206:                       // 'ordered'
      shift(206);                   // 'ordered'
      break;
    case 210:                       // 'parent'
      shift(210);                   // 'parent'
      break;
    case 216:                       // 'preceding'
      shift(216);                   // 'preceding'
      break;
    case 217:                       // 'preceding-sibling'
      shift(217);                   // 'preceding-sibling'
      break;
    case 220:                       // 'processing-instruction'
      shift(220);                   // 'processing-instruction'
      break;
    case 222:                       // 'rename'
      shift(222);                   // 'rename'
      break;
    case 223:                       // 'replace'
      shift(223);                   // 'replace'
      break;
    case 230:                       // 'schema-attribute'
      shift(230);                   // 'schema-attribute'
      break;
    case 231:                       // 'schema-element'
      shift(231);                   // 'schema-element'
      break;
    case 234:                       // 'self'
      shift(234);                   // 'self'
      break;
    case 240:                       // 'some'
      shift(240);                   // 'some'
      break;
    case 248:                       // 'switch'
      shift(248);                   // 'switch'
      break;
    case 249:                       // 'text'
      shift(249);                   // 'text'
      break;
    case 256:                       // 'try'
      shift(256);                   // 'try'
      break;
    case 259:                       // 'typeswitch'
      shift(259);                   // 'typeswitch'
      break;
    case 262:                       // 'unordered'
      shift(262);                   // 'unordered'
      break;
    case 266:                       // 'validate'
      shift(266);                   // 'validate'
      break;
    case 268:                       // 'variable'
      shift(268);                   // 'variable'
      break;
    case 170:                       // 'jsoniq'
      shift(170);                   // 'jsoniq'
      break;
    case 73:                        // 'allowing'
      shift(73);                    // 'allowing'
      break;
    case 82:                        // 'at'
      shift(82);                    // 'at'
      break;
    case 84:                        // 'base-uri'
      shift(84);                    // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      shift(86);                    // 'boundary-space'
      break;
    case 87:                        // 'break'
      shift(87);                    // 'break'
      break;
    case 92:                        // 'catch'
      shift(92);                    // 'catch'
      break;
    case 99:                        // 'construction'
      shift(99);                    // 'construction'
      break;
    case 102:                       // 'context'
      shift(102);                   // 'context'
      break;
    case 103:                       // 'continue'
      shift(103);                   // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      shift(105);                   // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      shift(107);                   // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      shift(126);                   // 'encoding'
      break;
    case 133:                       // 'exit'
      shift(133);                   // 'exit'
      break;
    case 134:                       // 'external'
      shift(134);                   // 'external'
      break;
    case 143:                       // 'ft-option'
      shift(143);                   // 'ft-option'
      break;
    case 156:                       // 'in'
      shift(156);                   // 'in'
      break;
    case 157:                       // 'index'
      shift(157);                   // 'index'
      break;
    case 163:                       // 'integrity'
      shift(163);                   // 'integrity'
      break;
    case 174:                       // 'lax'
      shift(174);                   // 'lax'
      break;
    case 195:                       // 'nodes'
      shift(195);                   // 'nodes'
      break;
    case 203:                       // 'option'
      shift(203);                   // 'option'
      break;
    case 207:                       // 'ordering'
      shift(207);                   // 'ordering'
      break;
    case 226:                       // 'revalidation'
      shift(226);                   // 'revalidation'
      break;
    case 229:                       // 'schema'
      shift(229);                   // 'schema'
      break;
    case 232:                       // 'score'
      shift(232);                   // 'score'
      break;
    case 239:                       // 'sliding'
      shift(239);                   // 'sliding'
      break;
    case 245:                       // 'strict'
      shift(245);                   // 'strict'
      break;
    case 257:                       // 'tumbling'
      shift(257);                   // 'tumbling'
      break;
    case 258:                       // 'type'
      shift(258);                   // 'type'
      break;
    case 263:                       // 'updating'
      shift(263);                   // 'updating'
      break;
    case 267:                       // 'value'
      shift(267);                   // 'value'
      break;
    case 269:                       // 'version'
      shift(269);                   // 'version'
      break;
    case 273:                       // 'while'
      shift(273);                   // 'while'
      break;
    case 98:                        // 'constraint'
      shift(98);                    // 'constraint'
      break;
    case 179:                       // 'loop'
      shift(179);                   // 'loop'
      break;
    case 225:                       // 'returning'
      shift(225);                   // 'returning'
      break;
    case 78:                        // 'append'
      shift(78);                    // 'append'
      break;
    case 135:                       // 'false'
      shift(135);                   // 'false'
      break;
    case 142:                       // 'from'
      shift(142);                   // 'from'
      break;
    case 197:                       // 'null'
      shift(197);                   // 'null'
      break;
    case 168:                       // 'json'
      shift(168);                   // 'json'
      break;
    case 198:                       // 'object'
      shift(198);                   // 'object'
      break;
    case 233:                       // 'select'
      shift(233);                   // 'select'
      break;
    default:
      shift(255);                   // 'true'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 19:                        // NCName^Token
      shiftT(19);                   // NCName^Token
      break;
    case 71:                        // 'after'
      shiftT(71);                   // 'after'
      break;
    case 76:                        // 'and'
      shiftT(76);                   // 'and'
      break;
    case 80:                        // 'as'
      shiftT(80);                   // 'as'
      break;
    case 81:                        // 'ascending'
      shiftT(81);                   // 'ascending'
      break;
    case 85:                        // 'before'
      shiftT(85);                   // 'before'
      break;
    case 89:                        // 'case'
      shiftT(89);                   // 'case'
      break;
    case 90:                        // 'cast'
      shiftT(90);                   // 'cast'
      break;
    case 91:                        // 'castable'
      shiftT(91);                   // 'castable'
      break;
    case 95:                        // 'collation'
      shiftT(95);                   // 'collation'
      break;
    case 106:                       // 'count'
      shiftT(106);                  // 'count'
      break;
    case 110:                       // 'default'
      shiftT(110);                  // 'default'
      break;
    case 114:                       // 'descending'
      shiftT(114);                  // 'descending'
      break;
    case 119:                       // 'div'
      shiftT(119);                  // 'div'
      break;
    case 123:                       // 'else'
      shiftT(123);                  // 'else'
      break;
    case 124:                       // 'empty'
      shiftT(124);                  // 'empty'
      break;
    case 127:                       // 'end'
      shiftT(127);                  // 'end'
      break;
    case 129:                       // 'eq'
      shiftT(129);                  // 'eq'
      break;
    case 132:                       // 'except'
      shiftT(132);                  // 'except'
      break;
    case 139:                       // 'for'
      shiftT(139);                  // 'for'
      break;
    case 148:                       // 'ge'
      shiftT(148);                  // 'ge'
      break;
    case 150:                       // 'group'
      shiftT(150);                  // 'group'
      break;
    case 152:                       // 'gt'
      shiftT(152);                  // 'gt'
      break;
    case 153:                       // 'idiv'
      shiftT(153);                  // 'idiv'
      break;
    case 162:                       // 'instance'
      shiftT(162);                  // 'instance'
      break;
    case 164:                       // 'intersect'
      shiftT(164);                  // 'intersect'
      break;
    case 165:                       // 'into'
      shiftT(165);                  // 'into'
      break;
    case 166:                       // 'is'
      shiftT(166);                  // 'is'
      break;
    case 175:                       // 'le'
      shiftT(175);                  // 'le'
      break;
    case 177:                       // 'let'
      shiftT(177);                  // 'let'
      break;
    case 181:                       // 'lt'
      shiftT(181);                  // 'lt'
      break;
    case 183:                       // 'mod'
      shiftT(183);                  // 'mod'
      break;
    case 184:                       // 'modify'
      shiftT(184);                  // 'modify'
      break;
    case 189:                       // 'ne'
      shiftT(189);                  // 'ne'
      break;
    case 202:                       // 'only'
      shiftT(202);                  // 'only'
      break;
    case 204:                       // 'or'
      shiftT(204);                  // 'or'
      break;
    case 205:                       // 'order'
      shiftT(205);                  // 'order'
      break;
    case 224:                       // 'return'
      shiftT(224);                  // 'return'
      break;
    case 228:                       // 'satisfies'
      shiftT(228);                  // 'satisfies'
      break;
    case 241:                       // 'stable'
      shiftT(241);                  // 'stable'
      break;
    case 242:                       // 'start'
      shiftT(242);                  // 'start'
      break;
    case 253:                       // 'to'
      shiftT(253);                  // 'to'
      break;
    case 254:                       // 'treat'
      shiftT(254);                  // 'treat'
      break;
    case 260:                       // 'union'
      shiftT(260);                  // 'union'
      break;
    case 272:                       // 'where'
      shiftT(272);                  // 'where'
      break;
    case 276:                       // 'with'
      shiftT(276);                  // 'with'
      break;
    case 74:                        // 'ancestor'
      shiftT(74);                   // 'ancestor'
      break;
    case 75:                        // 'ancestor-or-self'
      shiftT(75);                   // 'ancestor-or-self'
      break;
    case 83:                        // 'attribute'
      shiftT(83);                   // 'attribute'
      break;
    case 94:                        // 'child'
      shiftT(94);                   // 'child'
      break;
    case 97:                        // 'comment'
      shiftT(97);                   // 'comment'
      break;
    case 104:                       // 'copy'
      shiftT(104);                  // 'copy'
      break;
    case 109:                       // 'declare'
      shiftT(109);                  // 'declare'
      break;
    case 111:                       // 'delete'
      shiftT(111);                  // 'delete'
      break;
    case 112:                       // 'descendant'
      shiftT(112);                  // 'descendant'
      break;
    case 113:                       // 'descendant-or-self'
      shiftT(113);                  // 'descendant-or-self'
      break;
    case 120:                       // 'document'
      shiftT(120);                  // 'document'
      break;
    case 121:                       // 'document-node'
      shiftT(121);                  // 'document-node'
      break;
    case 122:                       // 'element'
      shiftT(122);                  // 'element'
      break;
    case 125:                       // 'empty-sequence'
      shiftT(125);                  // 'empty-sequence'
      break;
    case 130:                       // 'every'
      shiftT(130);                  // 'every'
      break;
    case 136:                       // 'first'
      shiftT(136);                  // 'first'
      break;
    case 137:                       // 'following'
      shiftT(137);                  // 'following'
      break;
    case 138:                       // 'following-sibling'
      shiftT(138);                  // 'following-sibling'
      break;
    case 147:                       // 'function'
      shiftT(147);                  // 'function'
      break;
    case 154:                       // 'if'
      shiftT(154);                  // 'if'
      break;
    case 155:                       // 'import'
      shiftT(155);                  // 'import'
      break;
    case 161:                       // 'insert'
      shiftT(161);                  // 'insert'
      break;
    case 167:                       // 'item'
      shiftT(167);                  // 'item'
      break;
    case 173:                       // 'last'
      shiftT(173);                  // 'last'
      break;
    case 185:                       // 'module'
      shiftT(185);                  // 'module'
      break;
    case 187:                       // 'namespace'
      shiftT(187);                  // 'namespace'
      break;
    case 188:                       // 'namespace-node'
      shiftT(188);                  // 'namespace-node'
      break;
    case 194:                       // 'node'
      shiftT(194);                  // 'node'
      break;
    case 206:                       // 'ordered'
      shiftT(206);                  // 'ordered'
      break;
    case 210:                       // 'parent'
      shiftT(210);                  // 'parent'
      break;
    case 216:                       // 'preceding'
      shiftT(216);                  // 'preceding'
      break;
    case 217:                       // 'preceding-sibling'
      shiftT(217);                  // 'preceding-sibling'
      break;
    case 220:                       // 'processing-instruction'
      shiftT(220);                  // 'processing-instruction'
      break;
    case 222:                       // 'rename'
      shiftT(222);                  // 'rename'
      break;
    case 223:                       // 'replace'
      shiftT(223);                  // 'replace'
      break;
    case 230:                       // 'schema-attribute'
      shiftT(230);                  // 'schema-attribute'
      break;
    case 231:                       // 'schema-element'
      shiftT(231);                  // 'schema-element'
      break;
    case 234:                       // 'self'
      shiftT(234);                  // 'self'
      break;
    case 240:                       // 'some'
      shiftT(240);                  // 'some'
      break;
    case 248:                       // 'switch'
      shiftT(248);                  // 'switch'
      break;
    case 249:                       // 'text'
      shiftT(249);                  // 'text'
      break;
    case 256:                       // 'try'
      shiftT(256);                  // 'try'
      break;
    case 259:                       // 'typeswitch'
      shiftT(259);                  // 'typeswitch'
      break;
    case 262:                       // 'unordered'
      shiftT(262);                  // 'unordered'
      break;
    case 266:                       // 'validate'
      shiftT(266);                  // 'validate'
      break;
    case 268:                       // 'variable'
      shiftT(268);                  // 'variable'
      break;
    case 170:                       // 'jsoniq'
      shiftT(170);                  // 'jsoniq'
      break;
    case 73:                        // 'allowing'
      shiftT(73);                   // 'allowing'
      break;
    case 82:                        // 'at'
      shiftT(82);                   // 'at'
      break;
    case 84:                        // 'base-uri'
      shiftT(84);                   // 'base-uri'
      break;
    case 86:                        // 'boundary-space'
      shiftT(86);                   // 'boundary-space'
      break;
    case 87:                        // 'break'
      shiftT(87);                   // 'break'
      break;
    case 92:                        // 'catch'
      shiftT(92);                   // 'catch'
      break;
    case 99:                        // 'construction'
      shiftT(99);                   // 'construction'
      break;
    case 102:                       // 'context'
      shiftT(102);                  // 'context'
      break;
    case 103:                       // 'continue'
      shiftT(103);                  // 'continue'
      break;
    case 105:                       // 'copy-namespaces'
      shiftT(105);                  // 'copy-namespaces'
      break;
    case 107:                       // 'decimal-format'
      shiftT(107);                  // 'decimal-format'
      break;
    case 126:                       // 'encoding'
      shiftT(126);                  // 'encoding'
      break;
    case 133:                       // 'exit'
      shiftT(133);                  // 'exit'
      break;
    case 134:                       // 'external'
      shiftT(134);                  // 'external'
      break;
    case 143:                       // 'ft-option'
      shiftT(143);                  // 'ft-option'
      break;
    case 156:                       // 'in'
      shiftT(156);                  // 'in'
      break;
    case 157:                       // 'index'
      shiftT(157);                  // 'index'
      break;
    case 163:                       // 'integrity'
      shiftT(163);                  // 'integrity'
      break;
    case 174:                       // 'lax'
      shiftT(174);                  // 'lax'
      break;
    case 195:                       // 'nodes'
      shiftT(195);                  // 'nodes'
      break;
    case 203:                       // 'option'
      shiftT(203);                  // 'option'
      break;
    case 207:                       // 'ordering'
      shiftT(207);                  // 'ordering'
      break;
    case 226:                       // 'revalidation'
      shiftT(226);                  // 'revalidation'
      break;
    case 229:                       // 'schema'
      shiftT(229);                  // 'schema'
      break;
    case 232:                       // 'score'
      shiftT(232);                  // 'score'
      break;
    case 239:                       // 'sliding'
      shiftT(239);                  // 'sliding'
      break;
    case 245:                       // 'strict'
      shiftT(245);                  // 'strict'
      break;
    case 257:                       // 'tumbling'
      shiftT(257);                  // 'tumbling'
      break;
    case 258:                       // 'type'
      shiftT(258);                  // 'type'
      break;
    case 263:                       // 'updating'
      shiftT(263);                  // 'updating'
      break;
    case 267:                       // 'value'
      shiftT(267);                  // 'value'
      break;
    case 269:                       // 'version'
      shiftT(269);                  // 'version'
      break;
    case 273:                       // 'while'
      shiftT(273);                  // 'while'
      break;
    case 98:                        // 'constraint'
      shiftT(98);                   // 'constraint'
      break;
    case 179:                       // 'loop'
      shiftT(179);                  // 'loop'
      break;
    case 225:                       // 'returning'
      shiftT(225);                  // 'returning'
      break;
    case 78:                        // 'append'
      shiftT(78);                   // 'append'
      break;
    case 135:                       // 'false'
      shiftT(135);                  // 'false'
      break;
    case 142:                       // 'from'
      shiftT(142);                  // 'from'
      break;
    case 197:                       // 'null'
      shiftT(197);                  // 'null'
      break;
    case 168:                       // 'json'
      shiftT(168);                  // 'json'
      break;
    case 198:                       // 'object'
      shiftT(198);                  // 'object'
      break;
    case 233:                       // 'select'
      shiftT(233);                  // 'select'
      break;
    default:
      shiftT(255);                  // 'true'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(270);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 36:                      // '(#'
        lookahead2(243);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
        break;
      case 47:                      // '/'
        lookahead2W(286);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 48:                      // '//'
        lookahead2W(260);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 55:                      // '<'
        lookahead2(4);              // QName
        break;
      case 56:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 60:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 69:                      // '['
        lookahead2W(273);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 78:                      // 'append'
        lookahead2W(269);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 133:                     // 'exit'
        lookahead2W(147);           // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 139:                     // 'for'
        lookahead2W(179);           // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 161:                     // 'insert'
        lookahead2W(276);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 177:                     // 'let'
        lookahead2W(166);           // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 187:                     // 'namespace'
        lookahead2W(247);           // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
        break;
      case 220:                     // 'processing-instruction'
        lookahead2W(245);           // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
        break;
      case 223:                     // 'replace'
        lookahead2W(170);           // S^WS | '#' | '(' | '(:' | 'node' | 'value'
        break;
      case 266:                     // 'validate'
        lookahead2W(188);           // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 281:                     // '{'
        lookahead2W(283);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 283:                     // '{|'
        lookahead2W(274);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 31:                      // '$'
      case 33:                      // '%'
        lookahead2W(246);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        lookahead2W(253);           // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
        break;
      case 87:                      // 'break'
      case 103:                     // 'continue'
        lookahead2W(145);           // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        lookahead2W(97);            // S^WS | '#' | '(:' | '{'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        lookahead2W(261);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 41:                      // '+'
      case 43:                      // '-'
      case 196:                     // 'not'
        lookahead2W(266);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        lookahead2W(211);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' |
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
      case 268:                     // 'variable'
        lookahead2W(143);           // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        lookahead2W(148);           // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 32:                      // '$$'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' | '//' |
        break;
      case 79:                      // 'array'
      case 121:                     // 'document-node'
      case 125:                     // 'empty-sequence'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 247:                     // 'structured-item'
        lookahead2W(20);            // S^WS | '#' | '(:'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 132:                     // 'except'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 147:                     // 'function'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 154:                     // 'if'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 248:                     // 'switch'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 259:                     // 'typeswitch'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        lookahead2W(95);            // S^WS | '#' | '(' | '(:'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 54                  // ';'
       && lk != 287                 // '}'
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12832               // '$$' EOF
       && lk != 12847               // '/' EOF
       && lk != 12935               // 'false' EOF
       && lk != 12997               // 'null' EOF
       && lk != 13055               // 'true' EOF
       && lk != 16140               // 'variable' '$'
       && lk != 21512               // IntegerLiteral ','
       && lk != 21513               // DecimalLiteral ','
       && lk != 21514               // DoubleLiteral ','
       && lk != 21515               // StringLiteral ','
       && lk != 21536               // '$$' ','
       && lk != 21551               // '/' ','
       && lk != 21639               // 'false' ','
       && lk != 21701               // 'null' ','
       && lk != 21759               // 'true' ','
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27680               // '$$' ';'
       && lk != 27695               // '/' ';'
       && lk != 27783               // 'false' ';'
       && lk != 27845               // 'null' ';'
       && lk != 27903               // 'true' ';'
       && lk != 91735               // 'break' 'loop'
       && lk != 91751               // 'continue' 'loop'
       && lk != 115333              // 'exit' 'returning'
       && lk != 146952              // IntegerLiteral '}'
       && lk != 146953              // DecimalLiteral '}'
       && lk != 146954              // DoubleLiteral '}'
       && lk != 146955              // StringLiteral '}'
       && lk != 146976              // '$$' '}'
       && lk != 146991              // '/' '}'
       && lk != 147079              // 'false' '}'
       && lk != 147141              // 'null' '}'
       && lk != 147199)             // 'true' '}'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0, lk);
        }
      }
      if (lk != -1
       && lk != 54                  // ';'
       && lk != 16140               // 'variable' '$'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27680               // '$$' ';'
       && lk != 27695               // '/' ';'
       && lk != 27783               // 'false' ';'
       && lk != 27845               // 'null' ';'
       && lk != 27903               // 'true' ';'
       && lk != 91735               // 'break' 'loop'
       && lk != 91751               // 'continue' 'loop'
       && lk != 115333)             // 'exit' 'returning'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(270);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 36:                      // '(#'
        lookahead2(243);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
        break;
      case 47:                      // '/'
        lookahead2W(286);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 48:                      // '//'
        lookahead2W(260);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 55:                      // '<'
        lookahead2(4);              // QName
        break;
      case 56:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 60:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 69:                      // '['
        lookahead2W(273);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 78:                      // 'append'
        lookahead2W(269);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 133:                     // 'exit'
        lookahead2W(147);           // S^WS | '#' | '(' | '(:' | 'returning'
        break;
      case 139:                     // 'for'
        lookahead2W(179);           // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
        break;
      case 161:                     // 'insert'
        lookahead2W(276);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 177:                     // 'let'
        lookahead2W(166);           // S^WS | '#' | '$' | '(' | '(:' | 'score'
        break;
      case 187:                     // 'namespace'
        lookahead2W(247);           // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
        break;
      case 220:                     // 'processing-instruction'
        lookahead2W(245);           // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
        break;
      case 223:                     // 'replace'
        lookahead2W(170);           // S^WS | '#' | '(' | '(:' | 'node' | 'value'
        break;
      case 266:                     // 'validate'
        lookahead2W(188);           // S^WS | '#' | '(' | '(:' | 'lax' | 'strict' | 'type' | '{'
        break;
      case 281:                     // '{'
        lookahead2W(283);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 283:                     // '{|'
        lookahead2W(274);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 31:                      // '$'
      case 33:                      // '%'
        lookahead2W(246);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        break;
      case 83:                      // 'attribute'
      case 122:                     // 'element'
        lookahead2W(253);           // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
        break;
      case 87:                      // 'break'
      case 103:                     // 'continue'
        lookahead2W(145);           // S^WS | '#' | '(' | '(:' | 'loop'
        break;
      case 97:                      // 'comment'
      case 249:                     // 'text'
        lookahead2W(97);            // S^WS | '#' | '(:' | '{'
        break;
      case 111:                     // 'delete'
      case 222:                     // 'rename'
        lookahead2W(261);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 41:                      // '+'
      case 43:                      // '-'
      case 196:                     // 'not'
        lookahead2W(266);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      case 135:                     // 'false'
      case 197:                     // 'null'
      case 255:                     // 'true'
        lookahead2W(211);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' |
        break;
      case 104:                     // 'copy'
      case 130:                     // 'every'
      case 240:                     // 'some'
      case 268:                     // 'variable'
        lookahead2W(143);           // S^WS | '#' | '$' | '(' | '(:'
        break;
      case 120:                     // 'document'
      case 206:                     // 'ordered'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        lookahead2W(148);           // S^WS | '#' | '(' | '(:' | '{'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 32:                      // '$$'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '.' | '/' | '//' |
        break;
      case 79:                      // 'array'
      case 121:                     // 'document-node'
      case 125:                     // 'empty-sequence'
      case 167:                     // 'item'
      case 169:                     // 'json-item'
      case 188:                     // 'namespace-node'
      case 194:                     // 'node'
      case 230:                     // 'schema-attribute'
      case 231:                     // 'schema-element'
      case 247:                     // 'structured-item'
        lookahead2W(20);            // S^WS | '#' | '(:'
        break;
      case 6:                       // EQName^Token
      case 71:                      // 'after'
      case 73:                      // 'allowing'
      case 74:                      // 'ancestor'
      case 75:                      // 'ancestor-or-self'
      case 76:                      // 'and'
      case 80:                      // 'as'
      case 81:                      // 'ascending'
      case 82:                      // 'at'
      case 84:                      // 'base-uri'
      case 85:                      // 'before'
      case 86:                      // 'boundary-space'
      case 89:                      // 'case'
      case 90:                      // 'cast'
      case 91:                      // 'castable'
      case 92:                      // 'catch'
      case 94:                      // 'child'
      case 95:                      // 'collation'
      case 98:                      // 'constraint'
      case 99:                      // 'construction'
      case 102:                     // 'context'
      case 105:                     // 'copy-namespaces'
      case 106:                     // 'count'
      case 107:                     // 'decimal-format'
      case 109:                     // 'declare'
      case 110:                     // 'default'
      case 112:                     // 'descendant'
      case 113:                     // 'descendant-or-self'
      case 114:                     // 'descending'
      case 119:                     // 'div'
      case 123:                     // 'else'
      case 124:                     // 'empty'
      case 126:                     // 'encoding'
      case 127:                     // 'end'
      case 129:                     // 'eq'
      case 132:                     // 'except'
      case 134:                     // 'external'
      case 136:                     // 'first'
      case 137:                     // 'following'
      case 138:                     // 'following-sibling'
      case 142:                     // 'from'
      case 143:                     // 'ft-option'
      case 147:                     // 'function'
      case 148:                     // 'ge'
      case 150:                     // 'group'
      case 152:                     // 'gt'
      case 153:                     // 'idiv'
      case 154:                     // 'if'
      case 155:                     // 'import'
      case 156:                     // 'in'
      case 157:                     // 'index'
      case 162:                     // 'instance'
      case 163:                     // 'integrity'
      case 164:                     // 'intersect'
      case 165:                     // 'into'
      case 166:                     // 'is'
      case 168:                     // 'json'
      case 170:                     // 'jsoniq'
      case 173:                     // 'last'
      case 174:                     // 'lax'
      case 175:                     // 'le'
      case 179:                     // 'loop'
      case 181:                     // 'lt'
      case 183:                     // 'mod'
      case 184:                     // 'modify'
      case 185:                     // 'module'
      case 189:                     // 'ne'
      case 195:                     // 'nodes'
      case 198:                     // 'object'
      case 202:                     // 'only'
      case 203:                     // 'option'
      case 204:                     // 'or'
      case 205:                     // 'order'
      case 207:                     // 'ordering'
      case 210:                     // 'parent'
      case 216:                     // 'preceding'
      case 217:                     // 'preceding-sibling'
      case 224:                     // 'return'
      case 225:                     // 'returning'
      case 226:                     // 'revalidation'
      case 228:                     // 'satisfies'
      case 229:                     // 'schema'
      case 232:                     // 'score'
      case 233:                     // 'select'
      case 234:                     // 'self'
      case 239:                     // 'sliding'
      case 241:                     // 'stable'
      case 242:                     // 'start'
      case 245:                     // 'strict'
      case 248:                     // 'switch'
      case 253:                     // 'to'
      case 254:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 259:                     // 'typeswitch'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
        lookahead2W(95);            // S^WS | '#' | '(' | '(:'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 54                  // ';'
       && lk != 287                 // '}'
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12832               // '$$' EOF
       && lk != 12847               // '/' EOF
       && lk != 12935               // 'false' EOF
       && lk != 12997               // 'null' EOF
       && lk != 13055               // 'true' EOF
       && lk != 16140               // 'variable' '$'
       && lk != 21512               // IntegerLiteral ','
       && lk != 21513               // DecimalLiteral ','
       && lk != 21514               // DoubleLiteral ','
       && lk != 21515               // StringLiteral ','
       && lk != 21536               // '$$' ','
       && lk != 21551               // '/' ','
       && lk != 21639               // 'false' ','
       && lk != 21701               // 'null' ','
       && lk != 21759               // 'true' ','
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27680               // '$$' ';'
       && lk != 27695               // '/' ';'
       && lk != 27783               // 'false' ';'
       && lk != 27845               // 'null' ';'
       && lk != 27903               // 'true' ';'
       && lk != 91735               // 'break' 'loop'
       && lk != 91751               // 'continue' 'loop'
       && lk != 115333              // 'exit' 'returning'
       && lk != 146952              // IntegerLiteral '}'
       && lk != 146953              // DecimalLiteral '}'
       && lk != 146954              // DoubleLiteral '}'
       && lk != 146955              // StringLiteral '}'
       && lk != 146976              // '$$' '}'
       && lk != 146991              // '/' '}'
       && lk != 147079              // 'false' '}'
       && lk != 147141              // 'null' '}'
       && lk != 147199)             // 'true' '}'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(8, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(8, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 54                  // ';'
       && lk != 16140               // 'variable' '$'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27680               // '$$' ';'
       && lk != 27695               // '/' ';'
       && lk != 27783               // 'false' ';'
       && lk != 27845               // 'null' ';'
       && lk != 27903               // 'true' ';'
       && lk != 91735               // 'break' 'loop'
       && lk != 91751               // 'continue' 'loop'
       && lk != 115333)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 25                    // EOF
     && l1 != 287)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 25                    // EOF
     && l1 != 287)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 133:                       // 'exit'
      lookahead2W(147);             // S^WS | '#' | '(' | '(:' | 'returning'
      break;
    case 139:                       // 'for'
      lookahead2W(179);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 177:                       // 'let'
      lookahead2W(166);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 256:                       // 'try'
      lookahead2W(148);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 268:                       // 'variable'
      lookahead2W(143);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    case 281:                       // '{'
      lookahead2W(283);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 31:                        // '$'
    case 33:                        // '%'
      lookahead2W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 87:                        // 'break'
    case 103:                       // 'continue'
      lookahead2W(145);             // S^WS | '#' | '(' | '(:' | 'loop'
      break;
    case 154:                       // 'if'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 273:                       // 'while'
      lookahead2W(95);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk != 6                     // EQName^Token
     && lk != 8                     // IntegerLiteral
     && lk != 9                     // DecimalLiteral
     && lk != 10                    // DoubleLiteral
     && lk != 11                    // StringLiteral
     && lk != 32                    // '$$'
     && lk != 35                    // '('
     && lk != 36                    // '(#'
     && lk != 41                    // '+'
     && lk != 43                    // '-'
     && lk != 47                    // '/'
     && lk != 48                    // '//'
     && lk != 54                    // ';'
     && lk != 55                    // '<'
     && lk != 56                    // '<!--'
     && lk != 60                    // '<?'
     && lk != 69                    // '['
     && lk != 71                    // 'after'
     && lk != 73                    // 'allowing'
     && lk != 74                    // 'ancestor'
     && lk != 75                    // 'ancestor-or-self'
     && lk != 76                    // 'and'
     && lk != 78                    // 'append'
     && lk != 79                    // 'array'
     && lk != 80                    // 'as'
     && lk != 81                    // 'ascending'
     && lk != 82                    // 'at'
     && lk != 83                    // 'attribute'
     && lk != 84                    // 'base-uri'
     && lk != 85                    // 'before'
     && lk != 86                    // 'boundary-space'
     && lk != 89                    // 'case'
     && lk != 90                    // 'cast'
     && lk != 91                    // 'castable'
     && lk != 92                    // 'catch'
     && lk != 94                    // 'child'
     && lk != 95                    // 'collation'
     && lk != 97                    // 'comment'
     && lk != 98                    // 'constraint'
     && lk != 99                    // 'construction'
     && lk != 102                   // 'context'
     && lk != 104                   // 'copy'
     && lk != 105                   // 'copy-namespaces'
     && lk != 106                   // 'count'
     && lk != 107                   // 'decimal-format'
     && lk != 109                   // 'declare'
     && lk != 110                   // 'default'
     && lk != 111                   // 'delete'
     && lk != 112                   // 'descendant'
     && lk != 113                   // 'descendant-or-self'
     && lk != 114                   // 'descending'
     && lk != 119                   // 'div'
     && lk != 120                   // 'document'
     && lk != 121                   // 'document-node'
     && lk != 122                   // 'element'
     && lk != 123                   // 'else'
     && lk != 124                   // 'empty'
     && lk != 125                   // 'empty-sequence'
     && lk != 126                   // 'encoding'
     && lk != 127                   // 'end'
     && lk != 129                   // 'eq'
     && lk != 130                   // 'every'
     && lk != 132                   // 'except'
     && lk != 134                   // 'external'
     && lk != 135                   // 'false'
     && lk != 136                   // 'first'
     && lk != 137                   // 'following'
     && lk != 138                   // 'following-sibling'
     && lk != 142                   // 'from'
     && lk != 143                   // 'ft-option'
     && lk != 147                   // 'function'
     && lk != 148                   // 'ge'
     && lk != 150                   // 'group'
     && lk != 152                   // 'gt'
     && lk != 153                   // 'idiv'
     && lk != 155                   // 'import'
     && lk != 156                   // 'in'
     && lk != 157                   // 'index'
     && lk != 161                   // 'insert'
     && lk != 162                   // 'instance'
     && lk != 163                   // 'integrity'
     && lk != 164                   // 'intersect'
     && lk != 165                   // 'into'
     && lk != 166                   // 'is'
     && lk != 167                   // 'item'
     && lk != 168                   // 'json'
     && lk != 169                   // 'json-item'
     && lk != 170                   // 'jsoniq'
     && lk != 173                   // 'last'
     && lk != 174                   // 'lax'
     && lk != 175                   // 'le'
     && lk != 179                   // 'loop'
     && lk != 181                   // 'lt'
     && lk != 183                   // 'mod'
     && lk != 184                   // 'modify'
     && lk != 185                   // 'module'
     && lk != 187                   // 'namespace'
     && lk != 188                   // 'namespace-node'
     && lk != 189                   // 'ne'
     && lk != 194                   // 'node'
     && lk != 195                   // 'nodes'
     && lk != 196                   // 'not'
     && lk != 197                   // 'null'
     && lk != 198                   // 'object'
     && lk != 202                   // 'only'
     && lk != 203                   // 'option'
     && lk != 204                   // 'or'
     && lk != 205                   // 'order'
     && lk != 206                   // 'ordered'
     && lk != 207                   // 'ordering'
     && lk != 210                   // 'parent'
     && lk != 216                   // 'preceding'
     && lk != 217                   // 'preceding-sibling'
     && lk != 220                   // 'processing-instruction'
     && lk != 222                   // 'rename'
     && lk != 223                   // 'replace'
     && lk != 224                   // 'return'
     && lk != 225                   // 'returning'
     && lk != 226                   // 'revalidation'
     && lk != 228                   // 'satisfies'
     && lk != 229                   // 'schema'
     && lk != 230                   // 'schema-attribute'
     && lk != 231                   // 'schema-element'
     && lk != 232                   // 'score'
     && lk != 233                   // 'select'
     && lk != 234                   // 'self'
     && lk != 239                   // 'sliding'
     && lk != 240                   // 'some'
     && lk != 241                   // 'stable'
     && lk != 242                   // 'start'
     && lk != 245                   // 'strict'
     && lk != 247                   // 'structured-item'
     && lk != 249                   // 'text'
     && lk != 253                   // 'to'
     && lk != 254                   // 'treat'
     && lk != 255                   // 'true'
     && lk != 257                   // 'tumbling'
     && lk != 258                   // 'type'
     && lk != 260                   // 'union'
     && lk != 262                   // 'unordered'
     && lk != 263                   // 'updating'
     && lk != 266                   // 'validate'
     && lk != 267                   // 'value'
     && lk != 269                   // 'version'
     && lk != 272                   // 'where'
     && lk != 276                   // 'with'
     && lk != 283                   // '{|'
     && lk != 10009                 // '{' NCName^Token
     && lk != 14935                 // 'break' '#'
     && lk != 14951                 // 'continue' '#'
     && lk != 14981                 // 'exit' '#'
     && lk != 14987                 // 'for' '#'
     && lk != 15002                 // 'if' '#'
     && lk != 15025                 // 'let' '#'
     && lk != 15096                 // 'switch' '#'
     && lk != 15104                 // 'try' '#'
     && lk != 15107                 // 'typeswitch' '#'
     && lk != 15116                 // 'variable' '#'
     && lk != 15121                 // 'while' '#'
     && lk != 16011                 // 'for' '$'
     && lk != 16049                 // 'let' '$'
     && lk != 16140                 // 'variable' '$'
     && lk != 18007                 // 'break' '('
     && lk != 18023                 // 'continue' '('
     && lk != 18053                 // 'exit' '('
     && lk != 18059                 // 'for' '('
     && lk != 18074                 // 'if' '('
     && lk != 18097                 // 'let' '('
     && lk != 18168                 // 'switch' '('
     && lk != 18176                 // 'try' '('
     && lk != 18179                 // 'typeswitch' '('
     && lk != 18188                 // 'variable' '('
     && lk != 91735                 // 'break' 'loop'
     && lk != 91751                 // 'continue' 'loop'
     && lk != 115333                // 'exit' 'returning'
     && lk != 118961                // 'let' 'score'
     && lk != 122507                // 'for' 'sliding'
     && lk != 131723                // 'for' 'tumbling'
     && lk != 144128                // 'try' '{'
     && lk != 147225)               // '{' '}'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 91735:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 91751:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 115333:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16011:                     // 'for' '$'
    case 16049:                     // 'let' '$'
    case 118961:                    // 'let' 'score'
    case 122507:                    // 'for' 'sliding'
    case 131723:                    // 'for' 'tumbling'
      parse_FLWORStatement();
      break;
    case 18074:                     // 'if' '('
      parse_IfStatement();
      break;
    case 18168:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 144128:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 18179:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16140:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    case 54:                        // ';'
      parse_VoidStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 133:                       // 'exit'
      lookahead2W(147);             // S^WS | '#' | '(' | '(:' | 'returning'
      break;
    case 139:                       // 'for'
      lookahead2W(179);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 177:                       // 'let'
      lookahead2W(166);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 256:                       // 'try'
      lookahead2W(148);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 268:                       // 'variable'
      lookahead2W(143);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    case 281:                       // '{'
      lookahead2W(283);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 31:                        // '$'
    case 33:                        // '%'
      lookahead2W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 87:                        // 'break'
    case 103:                       // 'continue'
      lookahead2W(145);             // S^WS | '#' | '(' | '(:' | 'loop'
      break;
    case 154:                       // 'if'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 273:                       // 'while'
      lookahead2W(95);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk != 6                     // EQName^Token
     && lk != 8                     // IntegerLiteral
     && lk != 9                     // DecimalLiteral
     && lk != 10                    // DoubleLiteral
     && lk != 11                    // StringLiteral
     && lk != 32                    // '$$'
     && lk != 35                    // '('
     && lk != 36                    // '(#'
     && lk != 41                    // '+'
     && lk != 43                    // '-'
     && lk != 47                    // '/'
     && lk != 48                    // '//'
     && lk != 54                    // ';'
     && lk != 55                    // '<'
     && lk != 56                    // '<!--'
     && lk != 60                    // '<?'
     && lk != 69                    // '['
     && lk != 71                    // 'after'
     && lk != 73                    // 'allowing'
     && lk != 74                    // 'ancestor'
     && lk != 75                    // 'ancestor-or-self'
     && lk != 76                    // 'and'
     && lk != 78                    // 'append'
     && lk != 79                    // 'array'
     && lk != 80                    // 'as'
     && lk != 81                    // 'ascending'
     && lk != 82                    // 'at'
     && lk != 83                    // 'attribute'
     && lk != 84                    // 'base-uri'
     && lk != 85                    // 'before'
     && lk != 86                    // 'boundary-space'
     && lk != 89                    // 'case'
     && lk != 90                    // 'cast'
     && lk != 91                    // 'castable'
     && lk != 92                    // 'catch'
     && lk != 94                    // 'child'
     && lk != 95                    // 'collation'
     && lk != 97                    // 'comment'
     && lk != 98                    // 'constraint'
     && lk != 99                    // 'construction'
     && lk != 102                   // 'context'
     && lk != 104                   // 'copy'
     && lk != 105                   // 'copy-namespaces'
     && lk != 106                   // 'count'
     && lk != 107                   // 'decimal-format'
     && lk != 109                   // 'declare'
     && lk != 110                   // 'default'
     && lk != 111                   // 'delete'
     && lk != 112                   // 'descendant'
     && lk != 113                   // 'descendant-or-self'
     && lk != 114                   // 'descending'
     && lk != 119                   // 'div'
     && lk != 120                   // 'document'
     && lk != 121                   // 'document-node'
     && lk != 122                   // 'element'
     && lk != 123                   // 'else'
     && lk != 124                   // 'empty'
     && lk != 125                   // 'empty-sequence'
     && lk != 126                   // 'encoding'
     && lk != 127                   // 'end'
     && lk != 129                   // 'eq'
     && lk != 130                   // 'every'
     && lk != 132                   // 'except'
     && lk != 134                   // 'external'
     && lk != 135                   // 'false'
     && lk != 136                   // 'first'
     && lk != 137                   // 'following'
     && lk != 138                   // 'following-sibling'
     && lk != 142                   // 'from'
     && lk != 143                   // 'ft-option'
     && lk != 147                   // 'function'
     && lk != 148                   // 'ge'
     && lk != 150                   // 'group'
     && lk != 152                   // 'gt'
     && lk != 153                   // 'idiv'
     && lk != 155                   // 'import'
     && lk != 156                   // 'in'
     && lk != 157                   // 'index'
     && lk != 161                   // 'insert'
     && lk != 162                   // 'instance'
     && lk != 163                   // 'integrity'
     && lk != 164                   // 'intersect'
     && lk != 165                   // 'into'
     && lk != 166                   // 'is'
     && lk != 167                   // 'item'
     && lk != 168                   // 'json'
     && lk != 169                   // 'json-item'
     && lk != 170                   // 'jsoniq'
     && lk != 173                   // 'last'
     && lk != 174                   // 'lax'
     && lk != 175                   // 'le'
     && lk != 179                   // 'loop'
     && lk != 181                   // 'lt'
     && lk != 183                   // 'mod'
     && lk != 184                   // 'modify'
     && lk != 185                   // 'module'
     && lk != 187                   // 'namespace'
     && lk != 188                   // 'namespace-node'
     && lk != 189                   // 'ne'
     && lk != 194                   // 'node'
     && lk != 195                   // 'nodes'
     && lk != 196                   // 'not'
     && lk != 197                   // 'null'
     && lk != 198                   // 'object'
     && lk != 202                   // 'only'
     && lk != 203                   // 'option'
     && lk != 204                   // 'or'
     && lk != 205                   // 'order'
     && lk != 206                   // 'ordered'
     && lk != 207                   // 'ordering'
     && lk != 210                   // 'parent'
     && lk != 216                   // 'preceding'
     && lk != 217                   // 'preceding-sibling'
     && lk != 220                   // 'processing-instruction'
     && lk != 222                   // 'rename'
     && lk != 223                   // 'replace'
     && lk != 224                   // 'return'
     && lk != 225                   // 'returning'
     && lk != 226                   // 'revalidation'
     && lk != 228                   // 'satisfies'
     && lk != 229                   // 'schema'
     && lk != 230                   // 'schema-attribute'
     && lk != 231                   // 'schema-element'
     && lk != 232                   // 'score'
     && lk != 233                   // 'select'
     && lk != 234                   // 'self'
     && lk != 239                   // 'sliding'
     && lk != 240                   // 'some'
     && lk != 241                   // 'stable'
     && lk != 242                   // 'start'
     && lk != 245                   // 'strict'
     && lk != 247                   // 'structured-item'
     && lk != 249                   // 'text'
     && lk != 253                   // 'to'
     && lk != 254                   // 'treat'
     && lk != 255                   // 'true'
     && lk != 257                   // 'tumbling'
     && lk != 258                   // 'type'
     && lk != 260                   // 'union'
     && lk != 262                   // 'unordered'
     && lk != 263                   // 'updating'
     && lk != 266                   // 'validate'
     && lk != 267                   // 'value'
     && lk != 269                   // 'version'
     && lk != 272                   // 'where'
     && lk != 276                   // 'with'
     && lk != 283                   // '{|'
     && lk != 10009                 // '{' NCName^Token
     && lk != 14935                 // 'break' '#'
     && lk != 14951                 // 'continue' '#'
     && lk != 14981                 // 'exit' '#'
     && lk != 14987                 // 'for' '#'
     && lk != 15002                 // 'if' '#'
     && lk != 15025                 // 'let' '#'
     && lk != 15096                 // 'switch' '#'
     && lk != 15104                 // 'try' '#'
     && lk != 15107                 // 'typeswitch' '#'
     && lk != 15116                 // 'variable' '#'
     && lk != 15121                 // 'while' '#'
     && lk != 16011                 // 'for' '$'
     && lk != 16049                 // 'let' '$'
     && lk != 16140                 // 'variable' '$'
     && lk != 18007                 // 'break' '('
     && lk != 18023                 // 'continue' '('
     && lk != 18053                 // 'exit' '('
     && lk != 18059                 // 'for' '('
     && lk != 18074                 // 'if' '('
     && lk != 18097                 // 'let' '('
     && lk != 18168                 // 'switch' '('
     && lk != 18176                 // 'try' '('
     && lk != 18179                 // 'typeswitch' '('
     && lk != 18188                 // 'variable' '('
     && lk != 91735                 // 'break' 'loop'
     && lk != 91751                 // 'continue' 'loop'
     && lk != 115333                // 'exit' 'returning'
     && lk != 118961                // 'let' 'score'
     && lk != 122507                // 'for' 'sliding'
     && lk != 131723                // 'for' 'tumbling'
     && lk != 144128                // 'try' '{'
     && lk != 147225)               // '{' '}'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(9, e0A, -1);
          lk = -15;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(9, e0A, -2);
            lk = -15;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(9, e0A, -3);
              lk = -15;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(9, e0A, -12);
                lk = -15;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(9, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 91735:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 91751:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 115333:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16011:                     // 'for' '$'
    case 16049:                     // 'let' '$'
    case 118961:                    // 'let' 'score'
    case 122507:                    // 'for' 'sliding'
    case 131723:                    // 'for' 'tumbling'
      try_FLWORStatement();
      break;
    case 18074:                     // 'if' '('
      try_IfStatement();
      break;
    case 18168:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 144128:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 18179:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16140:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case 54:                        // ';'
      try_VoidStatement();
      break;
    case -15:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    shift(54);                      // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    shiftT(54);                     // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(28);                // S^WS | '(:' | ':='
    shift(53);                      // ':='
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    shift(54);                      // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    shiftT(31);                     // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(28);                // S^WS | '(:' | ':='
    shiftT(53);                     // ':='
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
    shiftT(54);                     // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    shift(281);                     // '{'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Statement();
    lookahead1W(281);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Statements();
    shift(287);                     // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    shiftT(281);                    // '{'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Statement();
    lookahead1W(281);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Statements();
    shiftT(287);                    // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    shift(87);                      // 'break'
    lookahead1W(62);                // S^WS | '(:' | 'loop'
    shift(179);                     // 'loop'
    lookahead1W(29);                // S^WS | '(:' | ';'
    shift(54);                      // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    shiftT(87);                     // 'break'
    lookahead1W(62);                // S^WS | '(:' | 'loop'
    shiftT(179);                    // 'loop'
    lookahead1W(29);                // S^WS | '(:' | ';'
    shiftT(54);                     // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    shift(103);                     // 'continue'
    lookahead1W(62);                // S^WS | '(:' | 'loop'
    shift(179);                     // 'loop'
    lookahead1W(29);                // S^WS | '(:' | ';'
    shift(54);                      // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    shiftT(103);                    // 'continue'
    lookahead1W(62);                // S^WS | '(:' | 'loop'
    shiftT(179);                    // 'loop'
    lookahead1W(29);                // S^WS | '(:' | ';'
    shiftT(54);                     // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    shift(133);                     // 'exit'
    lookahead1W(74);                // S^WS | '(:' | 'returning'
    shift(225);                     // 'returning'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    shift(54);                      // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    shiftT(133);                    // 'exit'
    lookahead1W(74);                // S^WS | '(:' | 'returning'
    shiftT(225);                    // 'returning'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
    shiftT(54);                     // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(195);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
      if (l1 == 224)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(195);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
      if (l1 == 224)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    shift(224);                     // 'return'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    shiftT(224);                    // 'return'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    shift(154);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(80);                // S^WS | '(:' | 'then'
    shift(250);                     // 'then'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Statement();
    lookahead1W(51);                // S^WS | '(:' | 'else'
    shift(123);                     // 'else'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    shiftT(154);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(80);                // S^WS | '(:' | 'then'
    shiftT(250);                    // 'then'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Statement();
    lookahead1W(51);                // S^WS | '(:' | 'else'
    shiftT(123);                    // 'else'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    shift(248);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(117);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(110);                     // 'default'
    lookahead1W(73);                // S^WS | '(:' | 'return'
    shift(224);                     // 'return'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    shiftT(248);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(117);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(110);                    // 'default'
    lookahead1W(73);                // S^WS | '(:' | 'return'
    shiftT(224);                    // 'return'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      shift(89);                    // 'case'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(224);                     // 'return'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      shiftT(89);                   // 'case'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_SwitchCaseOperand();
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(224);                    // 'return'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    shift(256);                     // 'try'
    lookahead1W(90);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      shift(92);                    // 'catch'
      lookahead1W(249);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      switch (l1)
      {
      case 92:                      // 'catch'
        lookahead2W(256);           // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
        break;
      default:
        lk = l1;
      }
      if (lk != 2652                // 'catch' Wildcard
       && lk != 3164                // 'catch' EQName^Token
       && lk != 36444               // 'catch' 'after'
       && lk != 37468               // 'catch' 'allowing'
       && lk != 37980               // 'catch' 'ancestor'
       && lk != 38492               // 'catch' 'ancestor-or-self'
       && lk != 39004               // 'catch' 'and'
       && lk != 40028               // 'catch' 'append'
       && lk != 40540               // 'catch' 'array'
       && lk != 41052               // 'catch' 'as'
       && lk != 41564               // 'catch' 'ascending'
       && lk != 42076               // 'catch' 'at'
       && lk != 42588               // 'catch' 'attribute'
       && lk != 43100               // 'catch' 'base-uri'
       && lk != 43612               // 'catch' 'before'
       && lk != 44124               // 'catch' 'boundary-space'
       && lk != 44636               // 'catch' 'break'
       && lk != 45660               // 'catch' 'case'
       && lk != 46172               // 'catch' 'cast'
       && lk != 46684               // 'catch' 'castable'
       && lk != 47196               // 'catch' 'catch'
       && lk != 48220               // 'catch' 'child'
       && lk != 48732               // 'catch' 'collation'
       && lk != 49756               // 'catch' 'comment'
       && lk != 50268               // 'catch' 'constraint'
       && lk != 50780               // 'catch' 'construction'
       && lk != 52316               // 'catch' 'context'
       && lk != 52828               // 'catch' 'continue'
       && lk != 53340               // 'catch' 'copy'
       && lk != 53852               // 'catch' 'copy-namespaces'
       && lk != 54364               // 'catch' 'count'
       && lk != 54876               // 'catch' 'decimal-format'
       && lk != 55900               // 'catch' 'declare'
       && lk != 56412               // 'catch' 'default'
       && lk != 56924               // 'catch' 'delete'
       && lk != 57436               // 'catch' 'descendant'
       && lk != 57948               // 'catch' 'descendant-or-self'
       && lk != 58460               // 'catch' 'descending'
       && lk != 61020               // 'catch' 'div'
       && lk != 61532               // 'catch' 'document'
       && lk != 62044               // 'catch' 'document-node'
       && lk != 62556               // 'catch' 'element'
       && lk != 63068               // 'catch' 'else'
       && lk != 63580               // 'catch' 'empty'
       && lk != 64092               // 'catch' 'empty-sequence'
       && lk != 64604               // 'catch' 'encoding'
       && lk != 65116               // 'catch' 'end'
       && lk != 66140               // 'catch' 'eq'
       && lk != 66652               // 'catch' 'every'
       && lk != 67676               // 'catch' 'except'
       && lk != 68188               // 'catch' 'exit'
       && lk != 68700               // 'catch' 'external'
       && lk != 69212               // 'catch' 'false'
       && lk != 69724               // 'catch' 'first'
       && lk != 70236               // 'catch' 'following'
       && lk != 70748               // 'catch' 'following-sibling'
       && lk != 71260               // 'catch' 'for'
       && lk != 72796               // 'catch' 'from'
       && lk != 73308               // 'catch' 'ft-option'
       && lk != 75356               // 'catch' 'function'
       && lk != 75868               // 'catch' 'ge'
       && lk != 76892               // 'catch' 'group'
       && lk != 77916               // 'catch' 'gt'
       && lk != 78428               // 'catch' 'idiv'
       && lk != 78940               // 'catch' 'if'
       && lk != 79452               // 'catch' 'import'
       && lk != 79964               // 'catch' 'in'
       && lk != 80476               // 'catch' 'index'
       && lk != 82524               // 'catch' 'insert'
       && lk != 83036               // 'catch' 'instance'
       && lk != 83548               // 'catch' 'integrity'
       && lk != 84060               // 'catch' 'intersect'
       && lk != 84572               // 'catch' 'into'
       && lk != 85084               // 'catch' 'is'
       && lk != 85596               // 'catch' 'item'
       && lk != 86108               // 'catch' 'json'
       && lk != 86620               // 'catch' 'json-item'
       && lk != 87132               // 'catch' 'jsoniq'
       && lk != 88668               // 'catch' 'last'
       && lk != 89180               // 'catch' 'lax'
       && lk != 89692               // 'catch' 'le'
       && lk != 90716               // 'catch' 'let'
       && lk != 91740               // 'catch' 'loop'
       && lk != 92764               // 'catch' 'lt'
       && lk != 93788               // 'catch' 'mod'
       && lk != 94300               // 'catch' 'modify'
       && lk != 94812               // 'catch' 'module'
       && lk != 95836               // 'catch' 'namespace'
       && lk != 96348               // 'catch' 'namespace-node'
       && lk != 96860               // 'catch' 'ne'
       && lk != 99420               // 'catch' 'node'
       && lk != 99932               // 'catch' 'nodes'
       && lk != 100956              // 'catch' 'null'
       && lk != 101468              // 'catch' 'object'
       && lk != 103516              // 'catch' 'only'
       && lk != 104028              // 'catch' 'option'
       && lk != 104540              // 'catch' 'or'
       && lk != 105052              // 'catch' 'order'
       && lk != 105564              // 'catch' 'ordered'
       && lk != 106076              // 'catch' 'ordering'
       && lk != 107612              // 'catch' 'parent'
       && lk != 110684              // 'catch' 'preceding'
       && lk != 111196              // 'catch' 'preceding-sibling'
       && lk != 112732              // 'catch' 'processing-instruction'
       && lk != 113756              // 'catch' 'rename'
       && lk != 114268              // 'catch' 'replace'
       && lk != 114780              // 'catch' 'return'
       && lk != 115292              // 'catch' 'returning'
       && lk != 115804              // 'catch' 'revalidation'
       && lk != 116828              // 'catch' 'satisfies'
       && lk != 117340              // 'catch' 'schema'
       && lk != 117852              // 'catch' 'schema-attribute'
       && lk != 118364              // 'catch' 'schema-element'
       && lk != 118876              // 'catch' 'score'
       && lk != 119388              // 'catch' 'select'
       && lk != 119900              // 'catch' 'self'
       && lk != 122460              // 'catch' 'sliding'
       && lk != 122972              // 'catch' 'some'
       && lk != 123484              // 'catch' 'stable'
       && lk != 123996              // 'catch' 'start'
       && lk != 125532              // 'catch' 'strict'
       && lk != 126556              // 'catch' 'structured-item'
       && lk != 127068              // 'catch' 'switch'
       && lk != 127580              // 'catch' 'text'
       && lk != 129628              // 'catch' 'to'
       && lk != 130140              // 'catch' 'treat'
       && lk != 130652              // 'catch' 'true'
       && lk != 131164              // 'catch' 'try'
       && lk != 131676              // 'catch' 'tumbling'
       && lk != 132188              // 'catch' 'type'
       && lk != 132700              // 'catch' 'typeswitch'
       && lk != 133212              // 'catch' 'union'
       && lk != 134236              // 'catch' 'unordered'
       && lk != 134748              // 'catch' 'updating'
       && lk != 136284              // 'catch' 'validate'
       && lk != 136796              // 'catch' 'value'
       && lk != 137308              // 'catch' 'variable'
       && lk != 137820              // 'catch' 'version'
       && lk != 139356              // 'catch' 'where'
       && lk != 139868              // 'catch' 'while'
       && lk != 141404)             // 'catch' 'with'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    shiftT(256);                    // 'try'
    lookahead1W(90);                // S^WS | '(:' | '{'
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(39);              // S^WS | '(:' | 'catch'
      shiftT(92);                   // 'catch'
      lookahead1W(249);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_CatchErrorList();
      try_BlockStatement();
      lookahead1W(284);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      switch (l1)
      {
      case 92:                      // 'catch'
        lookahead2W(256);           // Wildcard | EQName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' |
        break;
      default:
        lk = l1;
      }
      if (lk != 2652                // 'catch' Wildcard
       && lk != 3164                // 'catch' EQName^Token
       && lk != 36444               // 'catch' 'after'
       && lk != 37468               // 'catch' 'allowing'
       && lk != 37980               // 'catch' 'ancestor'
       && lk != 38492               // 'catch' 'ancestor-or-self'
       && lk != 39004               // 'catch' 'and'
       && lk != 40028               // 'catch' 'append'
       && lk != 40540               // 'catch' 'array'
       && lk != 41052               // 'catch' 'as'
       && lk != 41564               // 'catch' 'ascending'
       && lk != 42076               // 'catch' 'at'
       && lk != 42588               // 'catch' 'attribute'
       && lk != 43100               // 'catch' 'base-uri'
       && lk != 43612               // 'catch' 'before'
       && lk != 44124               // 'catch' 'boundary-space'
       && lk != 44636               // 'catch' 'break'
       && lk != 45660               // 'catch' 'case'
       && lk != 46172               // 'catch' 'cast'
       && lk != 46684               // 'catch' 'castable'
       && lk != 47196               // 'catch' 'catch'
       && lk != 48220               // 'catch' 'child'
       && lk != 48732               // 'catch' 'collation'
       && lk != 49756               // 'catch' 'comment'
       && lk != 50268               // 'catch' 'constraint'
       && lk != 50780               // 'catch' 'construction'
       && lk != 52316               // 'catch' 'context'
       && lk != 52828               // 'catch' 'continue'
       && lk != 53340               // 'catch' 'copy'
       && lk != 53852               // 'catch' 'copy-namespaces'
       && lk != 54364               // 'catch' 'count'
       && lk != 54876               // 'catch' 'decimal-format'
       && lk != 55900               // 'catch' 'declare'
       && lk != 56412               // 'catch' 'default'
       && lk != 56924               // 'catch' 'delete'
       && lk != 57436               // 'catch' 'descendant'
       && lk != 57948               // 'catch' 'descendant-or-self'
       && lk != 58460               // 'catch' 'descending'
       && lk != 61020               // 'catch' 'div'
       && lk != 61532               // 'catch' 'document'
       && lk != 62044               // 'catch' 'document-node'
       && lk != 62556               // 'catch' 'element'
       && lk != 63068               // 'catch' 'else'
       && lk != 63580               // 'catch' 'empty'
       && lk != 64092               // 'catch' 'empty-sequence'
       && lk != 64604               // 'catch' 'encoding'
       && lk != 65116               // 'catch' 'end'
       && lk != 66140               // 'catch' 'eq'
       && lk != 66652               // 'catch' 'every'
       && lk != 67676               // 'catch' 'except'
       && lk != 68188               // 'catch' 'exit'
       && lk != 68700               // 'catch' 'external'
       && lk != 69212               // 'catch' 'false'
       && lk != 69724               // 'catch' 'first'
       && lk != 70236               // 'catch' 'following'
       && lk != 70748               // 'catch' 'following-sibling'
       && lk != 71260               // 'catch' 'for'
       && lk != 72796               // 'catch' 'from'
       && lk != 73308               // 'catch' 'ft-option'
       && lk != 75356               // 'catch' 'function'
       && lk != 75868               // 'catch' 'ge'
       && lk != 76892               // 'catch' 'group'
       && lk != 77916               // 'catch' 'gt'
       && lk != 78428               // 'catch' 'idiv'
       && lk != 78940               // 'catch' 'if'
       && lk != 79452               // 'catch' 'import'
       && lk != 79964               // 'catch' 'in'
       && lk != 80476               // 'catch' 'index'
       && lk != 82524               // 'catch' 'insert'
       && lk != 83036               // 'catch' 'instance'
       && lk != 83548               // 'catch' 'integrity'
       && lk != 84060               // 'catch' 'intersect'
       && lk != 84572               // 'catch' 'into'
       && lk != 85084               // 'catch' 'is'
       && lk != 85596               // 'catch' 'item'
       && lk != 86108               // 'catch' 'json'
       && lk != 86620               // 'catch' 'json-item'
       && lk != 87132               // 'catch' 'jsoniq'
       && lk != 88668               // 'catch' 'last'
       && lk != 89180               // 'catch' 'lax'
       && lk != 89692               // 'catch' 'le'
       && lk != 90716               // 'catch' 'let'
       && lk != 91740               // 'catch' 'loop'
       && lk != 92764               // 'catch' 'lt'
       && lk != 93788               // 'catch' 'mod'
       && lk != 94300               // 'catch' 'modify'
       && lk != 94812               // 'catch' 'module'
       && lk != 95836               // 'catch' 'namespace'
       && lk != 96348               // 'catch' 'namespace-node'
       && lk != 96860               // 'catch' 'ne'
       && lk != 99420               // 'catch' 'node'
       && lk != 99932               // 'catch' 'nodes'
       && lk != 100956              // 'catch' 'null'
       && lk != 101468              // 'catch' 'object'
       && lk != 103516              // 'catch' 'only'
       && lk != 104028              // 'catch' 'option'
       && lk != 104540              // 'catch' 'or'
       && lk != 105052              // 'catch' 'order'
       && lk != 105564              // 'catch' 'ordered'
       && lk != 106076              // 'catch' 'ordering'
       && lk != 107612              // 'catch' 'parent'
       && lk != 110684              // 'catch' 'preceding'
       && lk != 111196              // 'catch' 'preceding-sibling'
       && lk != 112732              // 'catch' 'processing-instruction'
       && lk != 113756              // 'catch' 'rename'
       && lk != 114268              // 'catch' 'replace'
       && lk != 114780              // 'catch' 'return'
       && lk != 115292              // 'catch' 'returning'
       && lk != 115804              // 'catch' 'revalidation'
       && lk != 116828              // 'catch' 'satisfies'
       && lk != 117340              // 'catch' 'schema'
       && lk != 117852              // 'catch' 'schema-attribute'
       && lk != 118364              // 'catch' 'schema-element'
       && lk != 118876              // 'catch' 'score'
       && lk != 119388              // 'catch' 'select'
       && lk != 119900              // 'catch' 'self'
       && lk != 122460              // 'catch' 'sliding'
       && lk != 122972              // 'catch' 'some'
       && lk != 123484              // 'catch' 'stable'
       && lk != 123996              // 'catch' 'start'
       && lk != 125532              // 'catch' 'strict'
       && lk != 126556              // 'catch' 'structured-item'
       && lk != 127068              // 'catch' 'switch'
       && lk != 127580              // 'catch' 'text'
       && lk != 129628              // 'catch' 'to'
       && lk != 130140              // 'catch' 'treat'
       && lk != 130652              // 'catch' 'true'
       && lk != 131164              // 'catch' 'try'
       && lk != 131676              // 'catch' 'tumbling'
       && lk != 132188              // 'catch' 'type'
       && lk != 132700              // 'catch' 'typeswitch'
       && lk != 133212              // 'catch' 'union'
       && lk != 134236              // 'catch' 'unordered'
       && lk != 134748              // 'catch' 'updating'
       && lk != 136284              // 'catch' 'validate'
       && lk != 136796              // 'catch' 'value'
       && lk != 137308              // 'catch' 'variable'
       && lk != 137820              // 'catch' 'version'
       && lk != 139356              // 'catch' 'where'
       && lk != 139868              // 'catch' 'while'
       && lk != 141404)             // 'catch' 'with'
      {
        break;
      }
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    shift(259);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(117);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shift(110);                     // 'default'
    lookahead1W(99);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_VarName();
    }
    lookahead1W(73);                // S^WS | '(:' | 'return'
    shift(224);                     // 'return'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    shiftT(259);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(38);                     // ')'
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(117);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 89)                 // 'case'
      {
        break;
      }
    }
    shiftT(110);                    // 'default'
    lookahead1W(99);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_VarName();
    }
    lookahead1W(73);                // S^WS | '(:' | 'return'
    shiftT(224);                    // 'return'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    shift(89);                      // 'case'
    lookahead1W(258);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shift(80);                    // 'as'
    }
    lookahead1W(254);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_SequenceType();
    lookahead1W(73);                // S^WS | '(:' | 'return'
    shift(224);                     // 'return'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    shiftT(89);                     // 'case'
    lookahead1W(258);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_VarName();
      lookahead1W(33);              // S^WS | '(:' | 'as'
      shiftT(80);                   // 'as'
    }
    lookahead1W(254);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_SequenceType();
    lookahead1W(73);                // S^WS | '(:' | 'return'
    shiftT(224);                    // 'return'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(102);             // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(268);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(172);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(155);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 53)                   // ':='
    {
      shift(53);                    // ':='
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_VarName();
      lookahead1W(172);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 80)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(155);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        shift(53);                  // ':='
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        whitespace();
        parse_ExprSingle();
      }
    }
    shift(54);                      // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(102);             // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(268);                    // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(172);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 80)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(155);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 53)                   // ':='
    {
      shiftT(53);                   // ':='
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(246);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_VarName();
      lookahead1W(172);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 80)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(155);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        shiftT(53);                 // ':='
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        try_ExprSingle();
      }
    }
    shiftT(54);                     // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    shift(273);                     // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Expr();
    shift(38);                      // ')'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    shiftT(273);                    // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(35);                     // '('
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Expr();
    shiftT(38);                     // ')'
    lookahead1W(271);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_Statement();
  }

  function parse_VoidStatement()
  {
    eventHandler.startNonterminal("VoidStatement", e0);
    shift(54);                      // ';'
    eventHandler.endNonterminal("VoidStatement", e0);
  }

  function try_VoidStatement()
  {
    shiftT(54);                     // ';'
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 139:                       // 'for'
      lookahead2W(179);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 177:                       // 'let'
      lookahead2W(166);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 256:                       // 'try'
      lookahead2W(148);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 154:                       // 'if'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(95);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16011:                     // 'for' '$'
    case 16049:                     // 'let' '$'
    case 118961:                    // 'let' 'score'
    case 122507:                    // 'for' 'sliding'
    case 131723:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 18074:                     // 'if' '('
      parse_IfExpr();
      break;
    case 18168:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 144128:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 18179:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 139:                       // 'for'
      lookahead2W(179);             // S^WS | '#' | '$' | '(' | '(:' | 'sliding' | 'tumbling'
      break;
    case 177:                       // 'let'
      lookahead2W(166);             // S^WS | '#' | '$' | '(' | '(:' | 'score'
      break;
    case 256:                       // 'try'
      lookahead2W(148);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 154:                       // 'if'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(95);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16011:                     // 'for' '$'
    case 16049:                     // 'let' '$'
    case 118961:                    // 'let' 'score'
    case 122507:                    // 'for' 'sliding'
    case 131723:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 18074:                     // 'if' '('
      try_IfExpr();
      break;
    case 18168:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 144128:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 18179:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(269);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 161:                       // 'insert'
      lookahead2W(276);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 223:                       // 'replace'
      lookahead2W(170);             // S^WS | '#' | '(' | '(:' | 'node' | 'value'
      break;
    case 111:                       // 'delete'
    case 222:                       // 'rename'
      lookahead2W(261);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 240:                       // 'some'
      lookahead2W(143);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 17998                 // 'append' '('
     || lk == 18031                 // 'delete' '('
     || lk == 18081                 // 'insert' '('
     || lk == 18142                 // 'rename' '('
     || lk == 99439                 // 'delete' 'node'
     || lk == 99489                 // 'insert' 'node'
     || lk == 99550                 // 'rename' 'node'
     || lk == 99951                 // 'delete' 'nodes'
     || lk == 100001                // 'insert' 'nodes'
     || lk == 136927)               // 'replace' 'value'
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_OrExpr();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_InsertExpr();
            lk = -3;
          }
          catch (p3A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_DeleteExpr();
              lk = -4;
            }
            catch (p4A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_RenameExpr();
                lk = -5;
              }
              catch (p5A)
              {
                try
                {
                  b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                  b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                  b2 = b2A; e2 = e2A; end = e2A; }}
                  try_ReplaceExpr();
                  lk = -6;
                }
                catch (p6A)
                {
                  try
                  {
                    b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                    b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                    b2 = b2A; e2 = e2A; end = e2A; }}
                    try_JSONDeleteExpr();
                    lk = -8;
                  }
                  catch (p8A)
                  {
                    try
                    {
                      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                      b2 = b2A; e2 = e2A; end = e2A; }}
                      try_JSONInsertExpr();
                      lk = -9;
                    }
                    catch (p9A)
                    {
                      try
                      {
                        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                        b2 = b2A; e2 = e2A; end = e2A; }}
                        try_JSONRenameExpr();
                        lk = -10;
                      }
                      catch (p10A)
                      {
                        try
                        {
                          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                          b2 = b2A; e2 = e2A; end = e2A; }}
                          try_JSONReplaceExpr();
                          lk = -11;
                        }
                        catch (p11A)
                        {
                          lk = -12;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0, lk);
      }
    }
    switch (lk)
    {
    case 16002:                     // 'every' '$'
    case 16112:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case -3:
      parse_InsertExpr();
      break;
    case -4:
      parse_DeleteExpr();
      break;
    case -5:
      parse_RenameExpr();
      break;
    case -6:
    case 99551:                     // 'replace' 'node'
      parse_ReplaceExpr();
      break;
    case 15976:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case -8:
    case 3183:                      // 'delete' EQName^Token
    case 4207:                      // 'delete' IntegerLiteral
    case 4719:                      // 'delete' DecimalLiteral
    case 5231:                      // 'delete' DoubleLiteral
    case 5743:                      // 'delete' StringLiteral
    case 15983:                     // 'delete' '$'
    case 16495:                     // 'delete' '$$'
    case 17007:                     // 'delete' '%'
    case 28271:                     // 'delete' '<'
    case 28783:                     // 'delete' '<!--'
    case 30831:                     // 'delete' '<?'
    case 35439:                     // 'delete' '['
    case 36463:                     // 'delete' 'after'
    case 37487:                     // 'delete' 'allowing'
    case 37999:                     // 'delete' 'ancestor'
    case 38511:                     // 'delete' 'ancestor-or-self'
    case 39023:                     // 'delete' 'and'
    case 40047:                     // 'delete' 'append'
    case 40559:                     // 'delete' 'array'
    case 41071:                     // 'delete' 'as'
    case 41583:                     // 'delete' 'ascending'
    case 42095:                     // 'delete' 'at'
    case 42607:                     // 'delete' 'attribute'
    case 43119:                     // 'delete' 'base-uri'
    case 43631:                     // 'delete' 'before'
    case 44143:                     // 'delete' 'boundary-space'
    case 44655:                     // 'delete' 'break'
    case 45679:                     // 'delete' 'case'
    case 46191:                     // 'delete' 'cast'
    case 46703:                     // 'delete' 'castable'
    case 47215:                     // 'delete' 'catch'
    case 48239:                     // 'delete' 'child'
    case 48751:                     // 'delete' 'collation'
    case 49775:                     // 'delete' 'comment'
    case 50287:                     // 'delete' 'constraint'
    case 50799:                     // 'delete' 'construction'
    case 52335:                     // 'delete' 'context'
    case 52847:                     // 'delete' 'continue'
    case 53359:                     // 'delete' 'copy'
    case 53871:                     // 'delete' 'copy-namespaces'
    case 54383:                     // 'delete' 'count'
    case 54895:                     // 'delete' 'decimal-format'
    case 55919:                     // 'delete' 'declare'
    case 56431:                     // 'delete' 'default'
    case 56943:                     // 'delete' 'delete'
    case 57455:                     // 'delete' 'descendant'
    case 57967:                     // 'delete' 'descendant-or-self'
    case 58479:                     // 'delete' 'descending'
    case 61039:                     // 'delete' 'div'
    case 61551:                     // 'delete' 'document'
    case 62063:                     // 'delete' 'document-node'
    case 62575:                     // 'delete' 'element'
    case 63087:                     // 'delete' 'else'
    case 63599:                     // 'delete' 'empty'
    case 64111:                     // 'delete' 'empty-sequence'
    case 64623:                     // 'delete' 'encoding'
    case 65135:                     // 'delete' 'end'
    case 66159:                     // 'delete' 'eq'
    case 66671:                     // 'delete' 'every'
    case 67695:                     // 'delete' 'except'
    case 68207:                     // 'delete' 'exit'
    case 68719:                     // 'delete' 'external'
    case 69231:                     // 'delete' 'false'
    case 69743:                     // 'delete' 'first'
    case 70255:                     // 'delete' 'following'
    case 70767:                     // 'delete' 'following-sibling'
    case 71279:                     // 'delete' 'for'
    case 72815:                     // 'delete' 'from'
    case 73327:                     // 'delete' 'ft-option'
    case 75375:                     // 'delete' 'function'
    case 75887:                     // 'delete' 'ge'
    case 76911:                     // 'delete' 'group'
    case 77935:                     // 'delete' 'gt'
    case 78447:                     // 'delete' 'idiv'
    case 78959:                     // 'delete' 'if'
    case 79471:                     // 'delete' 'import'
    case 79983:                     // 'delete' 'in'
    case 80495:                     // 'delete' 'index'
    case 82543:                     // 'delete' 'insert'
    case 83055:                     // 'delete' 'instance'
    case 83567:                     // 'delete' 'integrity'
    case 84079:                     // 'delete' 'intersect'
    case 84591:                     // 'delete' 'into'
    case 85103:                     // 'delete' 'is'
    case 85615:                     // 'delete' 'item'
    case 86127:                     // 'delete' 'json'
    case 86639:                     // 'delete' 'json-item'
    case 87151:                     // 'delete' 'jsoniq'
    case 88687:                     // 'delete' 'last'
    case 89199:                     // 'delete' 'lax'
    case 89711:                     // 'delete' 'le'
    case 90735:                     // 'delete' 'let'
    case 91759:                     // 'delete' 'loop'
    case 92783:                     // 'delete' 'lt'
    case 93807:                     // 'delete' 'mod'
    case 94319:                     // 'delete' 'modify'
    case 94831:                     // 'delete' 'module'
    case 95855:                     // 'delete' 'namespace'
    case 96367:                     // 'delete' 'namespace-node'
    case 96879:                     // 'delete' 'ne'
    case 100975:                    // 'delete' 'null'
    case 101487:                    // 'delete' 'object'
    case 103535:                    // 'delete' 'only'
    case 104047:                    // 'delete' 'option'
    case 104559:                    // 'delete' 'or'
    case 105071:                    // 'delete' 'order'
    case 105583:                    // 'delete' 'ordered'
    case 106095:                    // 'delete' 'ordering'
    case 107631:                    // 'delete' 'parent'
    case 110703:                    // 'delete' 'preceding'
    case 111215:                    // 'delete' 'preceding-sibling'
    case 112751:                    // 'delete' 'processing-instruction'
    case 113775:                    // 'delete' 'rename'
    case 114287:                    // 'delete' 'replace'
    case 114799:                    // 'delete' 'return'
    case 115311:                    // 'delete' 'returning'
    case 115823:                    // 'delete' 'revalidation'
    case 116847:                    // 'delete' 'satisfies'
    case 117359:                    // 'delete' 'schema'
    case 117871:                    // 'delete' 'schema-attribute'
    case 118383:                    // 'delete' 'schema-element'
    case 118895:                    // 'delete' 'score'
    case 119407:                    // 'delete' 'select'
    case 119919:                    // 'delete' 'self'
    case 122479:                    // 'delete' 'sliding'
    case 122991:                    // 'delete' 'some'
    case 123503:                    // 'delete' 'stable'
    case 124015:                    // 'delete' 'start'
    case 125551:                    // 'delete' 'strict'
    case 126575:                    // 'delete' 'structured-item'
    case 127087:                    // 'delete' 'switch'
    case 127599:                    // 'delete' 'text'
    case 129647:                    // 'delete' 'to'
    case 130159:                    // 'delete' 'treat'
    case 130671:                    // 'delete' 'true'
    case 131183:                    // 'delete' 'try'
    case 131695:                    // 'delete' 'tumbling'
    case 132207:                    // 'delete' 'type'
    case 132719:                    // 'delete' 'typeswitch'
    case 133231:                    // 'delete' 'union'
    case 134255:                    // 'delete' 'unordered'
    case 134767:                    // 'delete' 'updating'
    case 136303:                    // 'delete' 'validate'
    case 136815:                    // 'delete' 'value'
    case 137327:                    // 'delete' 'variable'
    case 137839:                    // 'delete' 'version'
    case 139375:                    // 'delete' 'where'
    case 139887:                    // 'delete' 'while'
    case 141423:                    // 'delete' 'with'
    case 143983:                    // 'delete' '{'
    case 145007:                    // 'delete' '{|'
      parse_JSONDeleteExpr();
      break;
    case -9:
    case 3233:                      // 'insert' EQName^Token
    case 4257:                      // 'insert' IntegerLiteral
    case 4769:                      // 'insert' DecimalLiteral
    case 5281:                      // 'insert' DoubleLiteral
    case 5793:                      // 'insert' StringLiteral
    case 9889:                      // 'insert' NCName^Token
    case 16033:                     // 'insert' '$'
    case 16545:                     // 'insert' '$$'
    case 17057:                     // 'insert' '%'
    case 18593:                     // 'insert' '(#'
    case 21153:                     // 'insert' '+'
    case 22177:                     // 'insert' '-'
    case 24225:                     // 'insert' '/'
    case 24737:                     // 'insert' '//'
    case 28321:                     // 'insert' '<'
    case 28833:                     // 'insert' '<!--'
    case 30881:                     // 'insert' '<?'
    case 35489:                     // 'insert' '['
    case 36513:                     // 'insert' 'after'
    case 37537:                     // 'insert' 'allowing'
    case 38049:                     // 'insert' 'ancestor'
    case 38561:                     // 'insert' 'ancestor-or-self'
    case 39073:                     // 'insert' 'and'
    case 40097:                     // 'insert' 'append'
    case 40609:                     // 'insert' 'array'
    case 41121:                     // 'insert' 'as'
    case 41633:                     // 'insert' 'ascending'
    case 42145:                     // 'insert' 'at'
    case 42657:                     // 'insert' 'attribute'
    case 43169:                     // 'insert' 'base-uri'
    case 43681:                     // 'insert' 'before'
    case 44193:                     // 'insert' 'boundary-space'
    case 44705:                     // 'insert' 'break'
    case 45729:                     // 'insert' 'case'
    case 46241:                     // 'insert' 'cast'
    case 46753:                     // 'insert' 'castable'
    case 47265:                     // 'insert' 'catch'
    case 48289:                     // 'insert' 'child'
    case 48801:                     // 'insert' 'collation'
    case 49825:                     // 'insert' 'comment'
    case 50337:                     // 'insert' 'constraint'
    case 50849:                     // 'insert' 'construction'
    case 52385:                     // 'insert' 'context'
    case 52897:                     // 'insert' 'continue'
    case 53409:                     // 'insert' 'copy'
    case 53921:                     // 'insert' 'copy-namespaces'
    case 54433:                     // 'insert' 'count'
    case 54945:                     // 'insert' 'decimal-format'
    case 55969:                     // 'insert' 'declare'
    case 56481:                     // 'insert' 'default'
    case 56993:                     // 'insert' 'delete'
    case 57505:                     // 'insert' 'descendant'
    case 58017:                     // 'insert' 'descendant-or-self'
    case 58529:                     // 'insert' 'descending'
    case 61089:                     // 'insert' 'div'
    case 61601:                     // 'insert' 'document'
    case 62113:                     // 'insert' 'document-node'
    case 62625:                     // 'insert' 'element'
    case 63137:                     // 'insert' 'else'
    case 63649:                     // 'insert' 'empty'
    case 64161:                     // 'insert' 'empty-sequence'
    case 64673:                     // 'insert' 'encoding'
    case 65185:                     // 'insert' 'end'
    case 66209:                     // 'insert' 'eq'
    case 66721:                     // 'insert' 'every'
    case 67745:                     // 'insert' 'except'
    case 68257:                     // 'insert' 'exit'
    case 68769:                     // 'insert' 'external'
    case 69281:                     // 'insert' 'false'
    case 69793:                     // 'insert' 'first'
    case 70305:                     // 'insert' 'following'
    case 70817:                     // 'insert' 'following-sibling'
    case 71329:                     // 'insert' 'for'
    case 72865:                     // 'insert' 'from'
    case 73377:                     // 'insert' 'ft-option'
    case 75425:                     // 'insert' 'function'
    case 75937:                     // 'insert' 'ge'
    case 76961:                     // 'insert' 'group'
    case 77985:                     // 'insert' 'gt'
    case 78497:                     // 'insert' 'idiv'
    case 79009:                     // 'insert' 'if'
    case 79521:                     // 'insert' 'import'
    case 80033:                     // 'insert' 'in'
    case 80545:                     // 'insert' 'index'
    case 82593:                     // 'insert' 'insert'
    case 83105:                     // 'insert' 'instance'
    case 83617:                     // 'insert' 'integrity'
    case 84129:                     // 'insert' 'intersect'
    case 84641:                     // 'insert' 'into'
    case 85153:                     // 'insert' 'is'
    case 85665:                     // 'insert' 'item'
    case 86177:                     // 'insert' 'json'
    case 86689:                     // 'insert' 'json-item'
    case 87201:                     // 'insert' 'jsoniq'
    case 88737:                     // 'insert' 'last'
    case 89249:                     // 'insert' 'lax'
    case 89761:                     // 'insert' 'le'
    case 90785:                     // 'insert' 'let'
    case 91809:                     // 'insert' 'loop'
    case 92833:                     // 'insert' 'lt'
    case 93857:                     // 'insert' 'mod'
    case 94369:                     // 'insert' 'modify'
    case 94881:                     // 'insert' 'module'
    case 95905:                     // 'insert' 'namespace'
    case 96417:                     // 'insert' 'namespace-node'
    case 96929:                     // 'insert' 'ne'
    case 100513:                    // 'insert' 'not'
    case 101025:                    // 'insert' 'null'
    case 101537:                    // 'insert' 'object'
    case 103585:                    // 'insert' 'only'
    case 104097:                    // 'insert' 'option'
    case 104609:                    // 'insert' 'or'
    case 105121:                    // 'insert' 'order'
    case 105633:                    // 'insert' 'ordered'
    case 106145:                    // 'insert' 'ordering'
    case 107681:                    // 'insert' 'parent'
    case 110753:                    // 'insert' 'preceding'
    case 111265:                    // 'insert' 'preceding-sibling'
    case 112801:                    // 'insert' 'processing-instruction'
    case 113825:                    // 'insert' 'rename'
    case 114337:                    // 'insert' 'replace'
    case 114849:                    // 'insert' 'return'
    case 115361:                    // 'insert' 'returning'
    case 115873:                    // 'insert' 'revalidation'
    case 116897:                    // 'insert' 'satisfies'
    case 117409:                    // 'insert' 'schema'
    case 117921:                    // 'insert' 'schema-attribute'
    case 118433:                    // 'insert' 'schema-element'
    case 118945:                    // 'insert' 'score'
    case 119457:                    // 'insert' 'select'
    case 119969:                    // 'insert' 'self'
    case 122529:                    // 'insert' 'sliding'
    case 123041:                    // 'insert' 'some'
    case 123553:                    // 'insert' 'stable'
    case 124065:                    // 'insert' 'start'
    case 125601:                    // 'insert' 'strict'
    case 126625:                    // 'insert' 'structured-item'
    case 127137:                    // 'insert' 'switch'
    case 127649:                    // 'insert' 'text'
    case 129697:                    // 'insert' 'to'
    case 130209:                    // 'insert' 'treat'
    case 130721:                    // 'insert' 'true'
    case 131233:                    // 'insert' 'try'
    case 131745:                    // 'insert' 'tumbling'
    case 132257:                    // 'insert' 'type'
    case 132769:                    // 'insert' 'typeswitch'
    case 133281:                    // 'insert' 'union'
    case 134305:                    // 'insert' 'unordered'
    case 134817:                    // 'insert' 'updating'
    case 136353:                    // 'insert' 'validate'
    case 136865:                    // 'insert' 'value'
    case 137377:                    // 'insert' 'variable'
    case 137889:                    // 'insert' 'version'
    case 139425:                    // 'insert' 'where'
    case 139937:                    // 'insert' 'while'
    case 141473:                    // 'insert' 'with'
    case 144033:                    // 'insert' '{'
    case 145057:                    // 'insert' '{|'
      parse_JSONInsertExpr();
      break;
    case -10:
    case 3294:                      // 'rename' EQName^Token
    case 4318:                      // 'rename' IntegerLiteral
    case 4830:                      // 'rename' DecimalLiteral
    case 5342:                      // 'rename' DoubleLiteral
    case 5854:                      // 'rename' StringLiteral
    case 16094:                     // 'rename' '$'
    case 16606:                     // 'rename' '$$'
    case 17118:                     // 'rename' '%'
    case 28382:                     // 'rename' '<'
    case 28894:                     // 'rename' '<!--'
    case 30942:                     // 'rename' '<?'
    case 35550:                     // 'rename' '['
    case 36574:                     // 'rename' 'after'
    case 37598:                     // 'rename' 'allowing'
    case 38110:                     // 'rename' 'ancestor'
    case 38622:                     // 'rename' 'ancestor-or-self'
    case 39134:                     // 'rename' 'and'
    case 40158:                     // 'rename' 'append'
    case 40670:                     // 'rename' 'array'
    case 41182:                     // 'rename' 'as'
    case 41694:                     // 'rename' 'ascending'
    case 42206:                     // 'rename' 'at'
    case 42718:                     // 'rename' 'attribute'
    case 43230:                     // 'rename' 'base-uri'
    case 43742:                     // 'rename' 'before'
    case 44254:                     // 'rename' 'boundary-space'
    case 44766:                     // 'rename' 'break'
    case 45790:                     // 'rename' 'case'
    case 46302:                     // 'rename' 'cast'
    case 46814:                     // 'rename' 'castable'
    case 47326:                     // 'rename' 'catch'
    case 48350:                     // 'rename' 'child'
    case 48862:                     // 'rename' 'collation'
    case 49886:                     // 'rename' 'comment'
    case 50398:                     // 'rename' 'constraint'
    case 50910:                     // 'rename' 'construction'
    case 52446:                     // 'rename' 'context'
    case 52958:                     // 'rename' 'continue'
    case 53470:                     // 'rename' 'copy'
    case 53982:                     // 'rename' 'copy-namespaces'
    case 54494:                     // 'rename' 'count'
    case 55006:                     // 'rename' 'decimal-format'
    case 56030:                     // 'rename' 'declare'
    case 56542:                     // 'rename' 'default'
    case 57054:                     // 'rename' 'delete'
    case 57566:                     // 'rename' 'descendant'
    case 58078:                     // 'rename' 'descendant-or-self'
    case 58590:                     // 'rename' 'descending'
    case 61150:                     // 'rename' 'div'
    case 61662:                     // 'rename' 'document'
    case 62174:                     // 'rename' 'document-node'
    case 62686:                     // 'rename' 'element'
    case 63198:                     // 'rename' 'else'
    case 63710:                     // 'rename' 'empty'
    case 64222:                     // 'rename' 'empty-sequence'
    case 64734:                     // 'rename' 'encoding'
    case 65246:                     // 'rename' 'end'
    case 66270:                     // 'rename' 'eq'
    case 66782:                     // 'rename' 'every'
    case 67806:                     // 'rename' 'except'
    case 68318:                     // 'rename' 'exit'
    case 68830:                     // 'rename' 'external'
    case 69342:                     // 'rename' 'false'
    case 69854:                     // 'rename' 'first'
    case 70366:                     // 'rename' 'following'
    case 70878:                     // 'rename' 'following-sibling'
    case 71390:                     // 'rename' 'for'
    case 72926:                     // 'rename' 'from'
    case 73438:                     // 'rename' 'ft-option'
    case 75486:                     // 'rename' 'function'
    case 75998:                     // 'rename' 'ge'
    case 77022:                     // 'rename' 'group'
    case 78046:                     // 'rename' 'gt'
    case 78558:                     // 'rename' 'idiv'
    case 79070:                     // 'rename' 'if'
    case 79582:                     // 'rename' 'import'
    case 80094:                     // 'rename' 'in'
    case 80606:                     // 'rename' 'index'
    case 82654:                     // 'rename' 'insert'
    case 83166:                     // 'rename' 'instance'
    case 83678:                     // 'rename' 'integrity'
    case 84190:                     // 'rename' 'intersect'
    case 84702:                     // 'rename' 'into'
    case 85214:                     // 'rename' 'is'
    case 85726:                     // 'rename' 'item'
    case 86238:                     // 'rename' 'json'
    case 86750:                     // 'rename' 'json-item'
    case 87262:                     // 'rename' 'jsoniq'
    case 88798:                     // 'rename' 'last'
    case 89310:                     // 'rename' 'lax'
    case 89822:                     // 'rename' 'le'
    case 90846:                     // 'rename' 'let'
    case 91870:                     // 'rename' 'loop'
    case 92894:                     // 'rename' 'lt'
    case 93918:                     // 'rename' 'mod'
    case 94430:                     // 'rename' 'modify'
    case 94942:                     // 'rename' 'module'
    case 95966:                     // 'rename' 'namespace'
    case 96478:                     // 'rename' 'namespace-node'
    case 96990:                     // 'rename' 'ne'
    case 100062:                    // 'rename' 'nodes'
    case 101086:                    // 'rename' 'null'
    case 101598:                    // 'rename' 'object'
    case 103646:                    // 'rename' 'only'
    case 104158:                    // 'rename' 'option'
    case 104670:                    // 'rename' 'or'
    case 105182:                    // 'rename' 'order'
    case 105694:                    // 'rename' 'ordered'
    case 106206:                    // 'rename' 'ordering'
    case 107742:                    // 'rename' 'parent'
    case 110814:                    // 'rename' 'preceding'
    case 111326:                    // 'rename' 'preceding-sibling'
    case 112862:                    // 'rename' 'processing-instruction'
    case 113886:                    // 'rename' 'rename'
    case 114398:                    // 'rename' 'replace'
    case 114910:                    // 'rename' 'return'
    case 115422:                    // 'rename' 'returning'
    case 115934:                    // 'rename' 'revalidation'
    case 116958:                    // 'rename' 'satisfies'
    case 117470:                    // 'rename' 'schema'
    case 117982:                    // 'rename' 'schema-attribute'
    case 118494:                    // 'rename' 'schema-element'
    case 119006:                    // 'rename' 'score'
    case 119518:                    // 'rename' 'select'
    case 120030:                    // 'rename' 'self'
    case 122590:                    // 'rename' 'sliding'
    case 123102:                    // 'rename' 'some'
    case 123614:                    // 'rename' 'stable'
    case 124126:                    // 'rename' 'start'
    case 125662:                    // 'rename' 'strict'
    case 126686:                    // 'rename' 'structured-item'
    case 127198:                    // 'rename' 'switch'
    case 127710:                    // 'rename' 'text'
    case 129758:                    // 'rename' 'to'
    case 130270:                    // 'rename' 'treat'
    case 130782:                    // 'rename' 'true'
    case 131294:                    // 'rename' 'try'
    case 131806:                    // 'rename' 'tumbling'
    case 132318:                    // 'rename' 'type'
    case 132830:                    // 'rename' 'typeswitch'
    case 133342:                    // 'rename' 'union'
    case 134366:                    // 'rename' 'unordered'
    case 134878:                    // 'rename' 'updating'
    case 136414:                    // 'rename' 'validate'
    case 136926:                    // 'rename' 'value'
    case 137438:                    // 'rename' 'variable'
    case 137950:                    // 'rename' 'version'
    case 139486:                    // 'rename' 'where'
    case 139998:                    // 'rename' 'while'
    case 141534:                    // 'rename' 'with'
    case 144094:                    // 'rename' '{'
    case 145118:                    // 'rename' '{|'
      parse_JSONRenameExpr();
      break;
    case -11:
      parse_JSONReplaceExpr();
      break;
    case -12:
    case 3150:                      // 'append' EQName^Token
    case 4174:                      // 'append' IntegerLiteral
    case 4686:                      // 'append' DecimalLiteral
    case 5198:                      // 'append' DoubleLiteral
    case 5710:                      // 'append' StringLiteral
    case 15950:                     // 'append' '$'
    case 16462:                     // 'append' '$$'
    case 16974:                     // 'append' '%'
    case 18510:                     // 'append' '(#'
    case 21070:                     // 'append' '+'
    case 22094:                     // 'append' '-'
    case 24142:                     // 'append' '/'
    case 24654:                     // 'append' '//'
    case 28238:                     // 'append' '<'
    case 28750:                     // 'append' '<!--'
    case 30798:                     // 'append' '<?'
    case 35406:                     // 'append' '['
    case 36430:                     // 'append' 'after'
    case 37454:                     // 'append' 'allowing'
    case 37966:                     // 'append' 'ancestor'
    case 38478:                     // 'append' 'ancestor-or-self'
    case 38990:                     // 'append' 'and'
    case 40014:                     // 'append' 'append'
    case 40526:                     // 'append' 'array'
    case 41038:                     // 'append' 'as'
    case 41550:                     // 'append' 'ascending'
    case 42062:                     // 'append' 'at'
    case 42574:                     // 'append' 'attribute'
    case 43086:                     // 'append' 'base-uri'
    case 43598:                     // 'append' 'before'
    case 44110:                     // 'append' 'boundary-space'
    case 44622:                     // 'append' 'break'
    case 45646:                     // 'append' 'case'
    case 46158:                     // 'append' 'cast'
    case 46670:                     // 'append' 'castable'
    case 47182:                     // 'append' 'catch'
    case 48206:                     // 'append' 'child'
    case 48718:                     // 'append' 'collation'
    case 49742:                     // 'append' 'comment'
    case 50254:                     // 'append' 'constraint'
    case 50766:                     // 'append' 'construction'
    case 52302:                     // 'append' 'context'
    case 52814:                     // 'append' 'continue'
    case 53326:                     // 'append' 'copy'
    case 53838:                     // 'append' 'copy-namespaces'
    case 54350:                     // 'append' 'count'
    case 54862:                     // 'append' 'decimal-format'
    case 55886:                     // 'append' 'declare'
    case 56398:                     // 'append' 'default'
    case 56910:                     // 'append' 'delete'
    case 57422:                     // 'append' 'descendant'
    case 57934:                     // 'append' 'descendant-or-self'
    case 58446:                     // 'append' 'descending'
    case 61006:                     // 'append' 'div'
    case 61518:                     // 'append' 'document'
    case 62030:                     // 'append' 'document-node'
    case 62542:                     // 'append' 'element'
    case 63054:                     // 'append' 'else'
    case 63566:                     // 'append' 'empty'
    case 64078:                     // 'append' 'empty-sequence'
    case 64590:                     // 'append' 'encoding'
    case 65102:                     // 'append' 'end'
    case 66126:                     // 'append' 'eq'
    case 66638:                     // 'append' 'every'
    case 67662:                     // 'append' 'except'
    case 68174:                     // 'append' 'exit'
    case 68686:                     // 'append' 'external'
    case 69198:                     // 'append' 'false'
    case 69710:                     // 'append' 'first'
    case 70222:                     // 'append' 'following'
    case 70734:                     // 'append' 'following-sibling'
    case 71246:                     // 'append' 'for'
    case 72782:                     // 'append' 'from'
    case 73294:                     // 'append' 'ft-option'
    case 75342:                     // 'append' 'function'
    case 75854:                     // 'append' 'ge'
    case 76878:                     // 'append' 'group'
    case 77902:                     // 'append' 'gt'
    case 78414:                     // 'append' 'idiv'
    case 78926:                     // 'append' 'if'
    case 79438:                     // 'append' 'import'
    case 79950:                     // 'append' 'in'
    case 80462:                     // 'append' 'index'
    case 82510:                     // 'append' 'insert'
    case 83022:                     // 'append' 'instance'
    case 83534:                     // 'append' 'integrity'
    case 84046:                     // 'append' 'intersect'
    case 84558:                     // 'append' 'into'
    case 85070:                     // 'append' 'is'
    case 85582:                     // 'append' 'item'
    case 86094:                     // 'append' 'json'
    case 86606:                     // 'append' 'json-item'
    case 87118:                     // 'append' 'jsoniq'
    case 88654:                     // 'append' 'last'
    case 89166:                     // 'append' 'lax'
    case 89678:                     // 'append' 'le'
    case 90702:                     // 'append' 'let'
    case 91726:                     // 'append' 'loop'
    case 92750:                     // 'append' 'lt'
    case 93774:                     // 'append' 'mod'
    case 94286:                     // 'append' 'modify'
    case 94798:                     // 'append' 'module'
    case 95822:                     // 'append' 'namespace'
    case 96334:                     // 'append' 'namespace-node'
    case 96846:                     // 'append' 'ne'
    case 99406:                     // 'append' 'node'
    case 99918:                     // 'append' 'nodes'
    case 100430:                    // 'append' 'not'
    case 100942:                    // 'append' 'null'
    case 101454:                    // 'append' 'object'
    case 103502:                    // 'append' 'only'
    case 104014:                    // 'append' 'option'
    case 104526:                    // 'append' 'or'
    case 105038:                    // 'append' 'order'
    case 105550:                    // 'append' 'ordered'
    case 106062:                    // 'append' 'ordering'
    case 107598:                    // 'append' 'parent'
    case 110670:                    // 'append' 'preceding'
    case 111182:                    // 'append' 'preceding-sibling'
    case 112718:                    // 'append' 'processing-instruction'
    case 113742:                    // 'append' 'rename'
    case 114254:                    // 'append' 'replace'
    case 114766:                    // 'append' 'return'
    case 115278:                    // 'append' 'returning'
    case 115790:                    // 'append' 'revalidation'
    case 116814:                    // 'append' 'satisfies'
    case 117326:                    // 'append' 'schema'
    case 117838:                    // 'append' 'schema-attribute'
    case 118350:                    // 'append' 'schema-element'
    case 118862:                    // 'append' 'score'
    case 119374:                    // 'append' 'select'
    case 119886:                    // 'append' 'self'
    case 122446:                    // 'append' 'sliding'
    case 122958:                    // 'append' 'some'
    case 123470:                    // 'append' 'stable'
    case 123982:                    // 'append' 'start'
    case 125518:                    // 'append' 'strict'
    case 126542:                    // 'append' 'structured-item'
    case 127054:                    // 'append' 'switch'
    case 127566:                    // 'append' 'text'
    case 129614:                    // 'append' 'to'
    case 130126:                    // 'append' 'treat'
    case 130638:                    // 'append' 'true'
    case 131150:                    // 'append' 'try'
    case 131662:                    // 'append' 'tumbling'
    case 132174:                    // 'append' 'type'
    case 132686:                    // 'append' 'typeswitch'
    case 133198:                    // 'append' 'union'
    case 134222:                    // 'append' 'unordered'
    case 134734:                    // 'append' 'updating'
    case 136270:                    // 'append' 'validate'
    case 136782:                    // 'append' 'value'
    case 137294:                    // 'append' 'variable'
    case 137806:                    // 'append' 'version'
    case 139342:                    // 'append' 'where'
    case 139854:                    // 'append' 'while'
    case 141390:                    // 'append' 'with'
    case 143950:                    // 'append' '{'
    case 144974:                    // 'append' '{|'
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(269);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 161:                       // 'insert'
      lookahead2W(276);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 223:                       // 'replace'
      lookahead2W(170);             // S^WS | '#' | '(' | '(:' | 'node' | 'value'
      break;
    case 111:                       // 'delete'
    case 222:                       // 'rename'
      lookahead2W(261);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 240:                       // 'some'
      lookahead2W(143);             // S^WS | '#' | '$' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 17998                 // 'append' '('
     || lk == 18031                 // 'delete' '('
     || lk == 18081                 // 'insert' '('
     || lk == 18142                 // 'rename' '('
     || lk == 99439                 // 'delete' 'node'
     || lk == 99489                 // 'insert' 'node'
     || lk == 99550                 // 'rename' 'node'
     || lk == 99951                 // 'delete' 'nodes'
     || lk == 100001                // 'insert' 'nodes'
     || lk == 136927)               // 'replace' 'value'
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_OrExpr();
          memoize(10, e0A, -2);
          lk = -13;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_InsertExpr();
            memoize(10, e0A, -3);
            lk = -13;
          }
          catch (p3A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_DeleteExpr();
              memoize(10, e0A, -4);
              lk = -13;
            }
            catch (p4A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_RenameExpr();
                memoize(10, e0A, -5);
                lk = -13;
              }
              catch (p5A)
              {
                try
                {
                  b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                  b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                  b2 = b2A; e2 = e2A; end = e2A; }}
                  try_ReplaceExpr();
                  memoize(10, e0A, -6);
                  lk = -13;
                }
                catch (p6A)
                {
                  try
                  {
                    b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                    b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                    b2 = b2A; e2 = e2A; end = e2A; }}
                    try_JSONDeleteExpr();
                    memoize(10, e0A, -8);
                    lk = -13;
                  }
                  catch (p8A)
                  {
                    try
                    {
                      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                      b2 = b2A; e2 = e2A; end = e2A; }}
                      try_JSONInsertExpr();
                      memoize(10, e0A, -9);
                      lk = -13;
                    }
                    catch (p9A)
                    {
                      try
                      {
                        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                        b2 = b2A; e2 = e2A; end = e2A; }}
                        try_JSONRenameExpr();
                        memoize(10, e0A, -10);
                        lk = -13;
                      }
                      catch (p10A)
                      {
                        try
                        {
                          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                          b2 = b2A; e2 = e2A; end = e2A; }}
                          try_JSONReplaceExpr();
                          memoize(10, e0A, -11);
                          lk = -13;
                        }
                        catch (p11A)
                        {
                          lk = -12;
                          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                          b2 = b2A; e2 = e2A; end = e2A; }}
                          memoize(10, e0A, -12);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case 16002:                     // 'every' '$'
    case 16112:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case -3:
      try_InsertExpr();
      break;
    case -4:
      try_DeleteExpr();
      break;
    case -5:
      try_RenameExpr();
      break;
    case -6:
    case 99551:                     // 'replace' 'node'
      try_ReplaceExpr();
      break;
    case 15976:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case -8:
    case 3183:                      // 'delete' EQName^Token
    case 4207:                      // 'delete' IntegerLiteral
    case 4719:                      // 'delete' DecimalLiteral
    case 5231:                      // 'delete' DoubleLiteral
    case 5743:                      // 'delete' StringLiteral
    case 15983:                     // 'delete' '$'
    case 16495:                     // 'delete' '$$'
    case 17007:                     // 'delete' '%'
    case 28271:                     // 'delete' '<'
    case 28783:                     // 'delete' '<!--'
    case 30831:                     // 'delete' '<?'
    case 35439:                     // 'delete' '['
    case 36463:                     // 'delete' 'after'
    case 37487:                     // 'delete' 'allowing'
    case 37999:                     // 'delete' 'ancestor'
    case 38511:                     // 'delete' 'ancestor-or-self'
    case 39023:                     // 'delete' 'and'
    case 40047:                     // 'delete' 'append'
    case 40559:                     // 'delete' 'array'
    case 41071:                     // 'delete' 'as'
    case 41583:                     // 'delete' 'ascending'
    case 42095:                     // 'delete' 'at'
    case 42607:                     // 'delete' 'attribute'
    case 43119:                     // 'delete' 'base-uri'
    case 43631:                     // 'delete' 'before'
    case 44143:                     // 'delete' 'boundary-space'
    case 44655:                     // 'delete' 'break'
    case 45679:                     // 'delete' 'case'
    case 46191:                     // 'delete' 'cast'
    case 46703:                     // 'delete' 'castable'
    case 47215:                     // 'delete' 'catch'
    case 48239:                     // 'delete' 'child'
    case 48751:                     // 'delete' 'collation'
    case 49775:                     // 'delete' 'comment'
    case 50287:                     // 'delete' 'constraint'
    case 50799:                     // 'delete' 'construction'
    case 52335:                     // 'delete' 'context'
    case 52847:                     // 'delete' 'continue'
    case 53359:                     // 'delete' 'copy'
    case 53871:                     // 'delete' 'copy-namespaces'
    case 54383:                     // 'delete' 'count'
    case 54895:                     // 'delete' 'decimal-format'
    case 55919:                     // 'delete' 'declare'
    case 56431:                     // 'delete' 'default'
    case 56943:                     // 'delete' 'delete'
    case 57455:                     // 'delete' 'descendant'
    case 57967:                     // 'delete' 'descendant-or-self'
    case 58479:                     // 'delete' 'descending'
    case 61039:                     // 'delete' 'div'
    case 61551:                     // 'delete' 'document'
    case 62063:                     // 'delete' 'document-node'
    case 62575:                     // 'delete' 'element'
    case 63087:                     // 'delete' 'else'
    case 63599:                     // 'delete' 'empty'
    case 64111:                     // 'delete' 'empty-sequence'
    case 64623:                     // 'delete' 'encoding'
    case 65135:                     // 'delete' 'end'
    case 66159:                     // 'delete' 'eq'
    case 66671:                     // 'delete' 'every'
    case 67695:                     // 'delete' 'except'
    case 68207:                     // 'delete' 'exit'
    case 68719:                     // 'delete' 'external'
    case 69231:                     // 'delete' 'false'
    case 69743:                     // 'delete' 'first'
    case 70255:                     // 'delete' 'following'
    case 70767:                     // 'delete' 'following-sibling'
    case 71279:                     // 'delete' 'for'
    case 72815:                     // 'delete' 'from'
    case 73327:                     // 'delete' 'ft-option'
    case 75375:                     // 'delete' 'function'
    case 75887:                     // 'delete' 'ge'
    case 76911:                     // 'delete' 'group'
    case 77935:                     // 'delete' 'gt'
    case 78447:                     // 'delete' 'idiv'
    case 78959:                     // 'delete' 'if'
    case 79471:                     // 'delete' 'import'
    case 79983:                     // 'delete' 'in'
    case 80495:                     // 'delete' 'index'
    case 82543:                     // 'delete' 'insert'
    case 83055:                     // 'delete' 'instance'
    case 83567:                     // 'delete' 'integrity'
    case 84079:                     // 'delete' 'intersect'
    case 84591:                     // 'delete' 'into'
    case 85103:                     // 'delete' 'is'
    case 85615:                     // 'delete' 'item'
    case 86127:                     // 'delete' 'json'
    case 86639:                     // 'delete' 'json-item'
    case 87151:                     // 'delete' 'jsoniq'
    case 88687:                     // 'delete' 'last'
    case 89199:                     // 'delete' 'lax'
    case 89711:                     // 'delete' 'le'
    case 90735:                     // 'delete' 'let'
    case 91759:                     // 'delete' 'loop'
    case 92783:                     // 'delete' 'lt'
    case 93807:                     // 'delete' 'mod'
    case 94319:                     // 'delete' 'modify'
    case 94831:                     // 'delete' 'module'
    case 95855:                     // 'delete' 'namespace'
    case 96367:                     // 'delete' 'namespace-node'
    case 96879:                     // 'delete' 'ne'
    case 100975:                    // 'delete' 'null'
    case 101487:                    // 'delete' 'object'
    case 103535:                    // 'delete' 'only'
    case 104047:                    // 'delete' 'option'
    case 104559:                    // 'delete' 'or'
    case 105071:                    // 'delete' 'order'
    case 105583:                    // 'delete' 'ordered'
    case 106095:                    // 'delete' 'ordering'
    case 107631:                    // 'delete' 'parent'
    case 110703:                    // 'delete' 'preceding'
    case 111215:                    // 'delete' 'preceding-sibling'
    case 112751:                    // 'delete' 'processing-instruction'
    case 113775:                    // 'delete' 'rename'
    case 114287:                    // 'delete' 'replace'
    case 114799:                    // 'delete' 'return'
    case 115311:                    // 'delete' 'returning'
    case 115823:                    // 'delete' 'revalidation'
    case 116847:                    // 'delete' 'satisfies'
    case 117359:                    // 'delete' 'schema'
    case 117871:                    // 'delete' 'schema-attribute'
    case 118383:                    // 'delete' 'schema-element'
    case 118895:                    // 'delete' 'score'
    case 119407:                    // 'delete' 'select'
    case 119919:                    // 'delete' 'self'
    case 122479:                    // 'delete' 'sliding'
    case 122991:                    // 'delete' 'some'
    case 123503:                    // 'delete' 'stable'
    case 124015:                    // 'delete' 'start'
    case 125551:                    // 'delete' 'strict'
    case 126575:                    // 'delete' 'structured-item'
    case 127087:                    // 'delete' 'switch'
    case 127599:                    // 'delete' 'text'
    case 129647:                    // 'delete' 'to'
    case 130159:                    // 'delete' 'treat'
    case 130671:                    // 'delete' 'true'
    case 131183:                    // 'delete' 'try'
    case 131695:                    // 'delete' 'tumbling'
    case 132207:                    // 'delete' 'type'
    case 132719:                    // 'delete' 'typeswitch'
    case 133231:                    // 'delete' 'union'
    case 134255:                    // 'delete' 'unordered'
    case 134767:                    // 'delete' 'updating'
    case 136303:                    // 'delete' 'validate'
    case 136815:                    // 'delete' 'value'
    case 137327:                    // 'delete' 'variable'
    case 137839:                    // 'delete' 'version'
    case 139375:                    // 'delete' 'where'
    case 139887:                    // 'delete' 'while'
    case 141423:                    // 'delete' 'with'
    case 143983:                    // 'delete' '{'
    case 145007:                    // 'delete' '{|'
      try_JSONDeleteExpr();
      break;
    case -9:
    case 3233:                      // 'insert' EQName^Token
    case 4257:                      // 'insert' IntegerLiteral
    case 4769:                      // 'insert' DecimalLiteral
    case 5281:                      // 'insert' DoubleLiteral
    case 5793:                      // 'insert' StringLiteral
    case 9889:                      // 'insert' NCName^Token
    case 16033:                     // 'insert' '$'
    case 16545:                     // 'insert' '$$'
    case 17057:                     // 'insert' '%'
    case 18593:                     // 'insert' '(#'
    case 21153:                     // 'insert' '+'
    case 22177:                     // 'insert' '-'
    case 24225:                     // 'insert' '/'
    case 24737:                     // 'insert' '//'
    case 28321:                     // 'insert' '<'
    case 28833:                     // 'insert' '<!--'
    case 30881:                     // 'insert' '<?'
    case 35489:                     // 'insert' '['
    case 36513:                     // 'insert' 'after'
    case 37537:                     // 'insert' 'allowing'
    case 38049:                     // 'insert' 'ancestor'
    case 38561:                     // 'insert' 'ancestor-or-self'
    case 39073:                     // 'insert' 'and'
    case 40097:                     // 'insert' 'append'
    case 40609:                     // 'insert' 'array'
    case 41121:                     // 'insert' 'as'
    case 41633:                     // 'insert' 'ascending'
    case 42145:                     // 'insert' 'at'
    case 42657:                     // 'insert' 'attribute'
    case 43169:                     // 'insert' 'base-uri'
    case 43681:                     // 'insert' 'before'
    case 44193:                     // 'insert' 'boundary-space'
    case 44705:                     // 'insert' 'break'
    case 45729:                     // 'insert' 'case'
    case 46241:                     // 'insert' 'cast'
    case 46753:                     // 'insert' 'castable'
    case 47265:                     // 'insert' 'catch'
    case 48289:                     // 'insert' 'child'
    case 48801:                     // 'insert' 'collation'
    case 49825:                     // 'insert' 'comment'
    case 50337:                     // 'insert' 'constraint'
    case 50849:                     // 'insert' 'construction'
    case 52385:                     // 'insert' 'context'
    case 52897:                     // 'insert' 'continue'
    case 53409:                     // 'insert' 'copy'
    case 53921:                     // 'insert' 'copy-namespaces'
    case 54433:                     // 'insert' 'count'
    case 54945:                     // 'insert' 'decimal-format'
    case 55969:                     // 'insert' 'declare'
    case 56481:                     // 'insert' 'default'
    case 56993:                     // 'insert' 'delete'
    case 57505:                     // 'insert' 'descendant'
    case 58017:                     // 'insert' 'descendant-or-self'
    case 58529:                     // 'insert' 'descending'
    case 61089:                     // 'insert' 'div'
    case 61601:                     // 'insert' 'document'
    case 62113:                     // 'insert' 'document-node'
    case 62625:                     // 'insert' 'element'
    case 63137:                     // 'insert' 'else'
    case 63649:                     // 'insert' 'empty'
    case 64161:                     // 'insert' 'empty-sequence'
    case 64673:                     // 'insert' 'encoding'
    case 65185:                     // 'insert' 'end'
    case 66209:                     // 'insert' 'eq'
    case 66721:                     // 'insert' 'every'
    case 67745:                     // 'insert' 'except'
    case 68257:                     // 'insert' 'exit'
    case 68769:                     // 'insert' 'external'
    case 69281:                     // 'insert' 'false'
    case 69793:                     // 'insert' 'first'
    case 70305:                     // 'insert' 'following'
    case 70817:                     // 'insert' 'following-sibling'
    case 71329:                     // 'insert' 'for'
    case 72865:                     // 'insert' 'from'
    case 73377:                     // 'insert' 'ft-option'
    case 75425:                     // 'insert' 'function'
    case 75937:                     // 'insert' 'ge'
    case 76961:                     // 'insert' 'group'
    case 77985:                     // 'insert' 'gt'
    case 78497:                     // 'insert' 'idiv'
    case 79009:                     // 'insert' 'if'
    case 79521:                     // 'insert' 'import'
    case 80033:                     // 'insert' 'in'
    case 80545:                     // 'insert' 'index'
    case 82593:                     // 'insert' 'insert'
    case 83105:                     // 'insert' 'instance'
    case 83617:                     // 'insert' 'integrity'
    case 84129:                     // 'insert' 'intersect'
    case 84641:                     // 'insert' 'into'
    case 85153:                     // 'insert' 'is'
    case 85665:                     // 'insert' 'item'
    case 86177:                     // 'insert' 'json'
    case 86689:                     // 'insert' 'json-item'
    case 87201:                     // 'insert' 'jsoniq'
    case 88737:                     // 'insert' 'last'
    case 89249:                     // 'insert' 'lax'
    case 89761:                     // 'insert' 'le'
    case 90785:                     // 'insert' 'let'
    case 91809:                     // 'insert' 'loop'
    case 92833:                     // 'insert' 'lt'
    case 93857:                     // 'insert' 'mod'
    case 94369:                     // 'insert' 'modify'
    case 94881:                     // 'insert' 'module'
    case 95905:                     // 'insert' 'namespace'
    case 96417:                     // 'insert' 'namespace-node'
    case 96929:                     // 'insert' 'ne'
    case 100513:                    // 'insert' 'not'
    case 101025:                    // 'insert' 'null'
    case 101537:                    // 'insert' 'object'
    case 103585:                    // 'insert' 'only'
    case 104097:                    // 'insert' 'option'
    case 104609:                    // 'insert' 'or'
    case 105121:                    // 'insert' 'order'
    case 105633:                    // 'insert' 'ordered'
    case 106145:                    // 'insert' 'ordering'
    case 107681:                    // 'insert' 'parent'
    case 110753:                    // 'insert' 'preceding'
    case 111265:                    // 'insert' 'preceding-sibling'
    case 112801:                    // 'insert' 'processing-instruction'
    case 113825:                    // 'insert' 'rename'
    case 114337:                    // 'insert' 'replace'
    case 114849:                    // 'insert' 'return'
    case 115361:                    // 'insert' 'returning'
    case 115873:                    // 'insert' 'revalidation'
    case 116897:                    // 'insert' 'satisfies'
    case 117409:                    // 'insert' 'schema'
    case 117921:                    // 'insert' 'schema-attribute'
    case 118433:                    // 'insert' 'schema-element'
    case 118945:                    // 'insert' 'score'
    case 119457:                    // 'insert' 'select'
    case 119969:                    // 'insert' 'self'
    case 122529:                    // 'insert' 'sliding'
    case 123041:                    // 'insert' 'some'
    case 123553:                    // 'insert' 'stable'
    case 124065:                    // 'insert' 'start'
    case 125601:                    // 'insert' 'strict'
    case 126625:                    // 'insert' 'structured-item'
    case 127137:                    // 'insert' 'switch'
    case 127649:                    // 'insert' 'text'
    case 129697:                    // 'insert' 'to'
    case 130209:                    // 'insert' 'treat'
    case 130721:                    // 'insert' 'true'
    case 131233:                    // 'insert' 'try'
    case 131745:                    // 'insert' 'tumbling'
    case 132257:                    // 'insert' 'type'
    case 132769:                    // 'insert' 'typeswitch'
    case 133281:                    // 'insert' 'union'
    case 134305:                    // 'insert' 'unordered'
    case 134817:                    // 'insert' 'updating'
    case 136353:                    // 'insert' 'validate'
    case 136865:                    // 'insert' 'value'
    case 137377:                    // 'insert' 'variable'
    case 137889:                    // 'insert' 'version'
    case 139425:                    // 'insert' 'where'
    case 139937:                    // 'insert' 'while'
    case 141473:                    // 'insert' 'with'
    case 144033:                    // 'insert' '{'
    case 145057:                    // 'insert' '{|'
      try_JSONInsertExpr();
      break;
    case -10:
    case 3294:                      // 'rename' EQName^Token
    case 4318:                      // 'rename' IntegerLiteral
    case 4830:                      // 'rename' DecimalLiteral
    case 5342:                      // 'rename' DoubleLiteral
    case 5854:                      // 'rename' StringLiteral
    case 16094:                     // 'rename' '$'
    case 16606:                     // 'rename' '$$'
    case 17118:                     // 'rename' '%'
    case 28382:                     // 'rename' '<'
    case 28894:                     // 'rename' '<!--'
    case 30942:                     // 'rename' '<?'
    case 35550:                     // 'rename' '['
    case 36574:                     // 'rename' 'after'
    case 37598:                     // 'rename' 'allowing'
    case 38110:                     // 'rename' 'ancestor'
    case 38622:                     // 'rename' 'ancestor-or-self'
    case 39134:                     // 'rename' 'and'
    case 40158:                     // 'rename' 'append'
    case 40670:                     // 'rename' 'array'
    case 41182:                     // 'rename' 'as'
    case 41694:                     // 'rename' 'ascending'
    case 42206:                     // 'rename' 'at'
    case 42718:                     // 'rename' 'attribute'
    case 43230:                     // 'rename' 'base-uri'
    case 43742:                     // 'rename' 'before'
    case 44254:                     // 'rename' 'boundary-space'
    case 44766:                     // 'rename' 'break'
    case 45790:                     // 'rename' 'case'
    case 46302:                     // 'rename' 'cast'
    case 46814:                     // 'rename' 'castable'
    case 47326:                     // 'rename' 'catch'
    case 48350:                     // 'rename' 'child'
    case 48862:                     // 'rename' 'collation'
    case 49886:                     // 'rename' 'comment'
    case 50398:                     // 'rename' 'constraint'
    case 50910:                     // 'rename' 'construction'
    case 52446:                     // 'rename' 'context'
    case 52958:                     // 'rename' 'continue'
    case 53470:                     // 'rename' 'copy'
    case 53982:                     // 'rename' 'copy-namespaces'
    case 54494:                     // 'rename' 'count'
    case 55006:                     // 'rename' 'decimal-format'
    case 56030:                     // 'rename' 'declare'
    case 56542:                     // 'rename' 'default'
    case 57054:                     // 'rename' 'delete'
    case 57566:                     // 'rename' 'descendant'
    case 58078:                     // 'rename' 'descendant-or-self'
    case 58590:                     // 'rename' 'descending'
    case 61150:                     // 'rename' 'div'
    case 61662:                     // 'rename' 'document'
    case 62174:                     // 'rename' 'document-node'
    case 62686:                     // 'rename' 'element'
    case 63198:                     // 'rename' 'else'
    case 63710:                     // 'rename' 'empty'
    case 64222:                     // 'rename' 'empty-sequence'
    case 64734:                     // 'rename' 'encoding'
    case 65246:                     // 'rename' 'end'
    case 66270:                     // 'rename' 'eq'
    case 66782:                     // 'rename' 'every'
    case 67806:                     // 'rename' 'except'
    case 68318:                     // 'rename' 'exit'
    case 68830:                     // 'rename' 'external'
    case 69342:                     // 'rename' 'false'
    case 69854:                     // 'rename' 'first'
    case 70366:                     // 'rename' 'following'
    case 70878:                     // 'rename' 'following-sibling'
    case 71390:                     // 'rename' 'for'
    case 72926:                     // 'rename' 'from'
    case 73438:                     // 'rename' 'ft-option'
    case 75486:                     // 'rename' 'function'
    case 75998:                     // 'rename' 'ge'
    case 77022:                     // 'rename' 'group'
    case 78046:                     // 'rename' 'gt'
    case 78558:                     // 'rename' 'idiv'
    case 79070:                     // 'rename' 'if'
    case 79582:                     // 'rename' 'import'
    case 80094:                     // 'rename' 'in'
    case 80606:                     // 'rename' 'index'
    case 82654:                     // 'rename' 'insert'
    case 83166:                     // 'rename' 'instance'
    case 83678:                     // 'rename' 'integrity'
    case 84190:                     // 'rename' 'intersect'
    case 84702:                     // 'rename' 'into'
    case 85214:                     // 'rename' 'is'
    case 85726:                     // 'rename' 'item'
    case 86238:                     // 'rename' 'json'
    case 86750:                     // 'rename' 'json-item'
    case 87262:                     // 'rename' 'jsoniq'
    case 88798:                     // 'rename' 'last'
    case 89310:                     // 'rename' 'lax'
    case 89822:                     // 'rename' 'le'
    case 90846:                     // 'rename' 'let'
    case 91870:                     // 'rename' 'loop'
    case 92894:                     // 'rename' 'lt'
    case 93918:                     // 'rename' 'mod'
    case 94430:                     // 'rename' 'modify'
    case 94942:                     // 'rename' 'module'
    case 95966:                     // 'rename' 'namespace'
    case 96478:                     // 'rename' 'namespace-node'
    case 96990:                     // 'rename' 'ne'
    case 100062:                    // 'rename' 'nodes'
    case 101086:                    // 'rename' 'null'
    case 101598:                    // 'rename' 'object'
    case 103646:                    // 'rename' 'only'
    case 104158:                    // 'rename' 'option'
    case 104670:                    // 'rename' 'or'
    case 105182:                    // 'rename' 'order'
    case 105694:                    // 'rename' 'ordered'
    case 106206:                    // 'rename' 'ordering'
    case 107742:                    // 'rename' 'parent'
    case 110814:                    // 'rename' 'preceding'
    case 111326:                    // 'rename' 'preceding-sibling'
    case 112862:                    // 'rename' 'processing-instruction'
    case 113886:                    // 'rename' 'rename'
    case 114398:                    // 'rename' 'replace'
    case 114910:                    // 'rename' 'return'
    case 115422:                    // 'rename' 'returning'
    case 115934:                    // 'rename' 'revalidation'
    case 116958:                    // 'rename' 'satisfies'
    case 117470:                    // 'rename' 'schema'
    case 117982:                    // 'rename' 'schema-attribute'
    case 118494:                    // 'rename' 'schema-element'
    case 119006:                    // 'rename' 'score'
    case 119518:                    // 'rename' 'select'
    case 120030:                    // 'rename' 'self'
    case 122590:                    // 'rename' 'sliding'
    case 123102:                    // 'rename' 'some'
    case 123614:                    // 'rename' 'stable'
    case 124126:                    // 'rename' 'start'
    case 125662:                    // 'rename' 'strict'
    case 126686:                    // 'rename' 'structured-item'
    case 127198:                    // 'rename' 'switch'
    case 127710:                    // 'rename' 'text'
    case 129758:                    // 'rename' 'to'
    case 130270:                    // 'rename' 'treat'
    case 130782:                    // 'rename' 'true'
    case 131294:                    // 'rename' 'try'
    case 131806:                    // 'rename' 'tumbling'
    case 132318:                    // 'rename' 'type'
    case 132830:                    // 'rename' 'typeswitch'
    case 133342:                    // 'rename' 'union'
    case 134366:                    // 'rename' 'unordered'
    case 134878:                    // 'rename' 'updating'
    case 136414:                    // 'rename' 'validate'
    case 136926:                    // 'rename' 'value'
    case 137438:                    // 'rename' 'variable'
    case 137950:                    // 'rename' 'version'
    case 139486:                    // 'rename' 'where'
    case 139998:                    // 'rename' 'while'
    case 141534:                    // 'rename' 'with'
    case 144094:                    // 'rename' '{'
    case 145118:                    // 'rename' '{|'
      try_JSONRenameExpr();
      break;
    case -11:
      try_JSONReplaceExpr();
      break;
    case -12:
    case 3150:                      // 'append' EQName^Token
    case 4174:                      // 'append' IntegerLiteral
    case 4686:                      // 'append' DecimalLiteral
    case 5198:                      // 'append' DoubleLiteral
    case 5710:                      // 'append' StringLiteral
    case 15950:                     // 'append' '$'
    case 16462:                     // 'append' '$$'
    case 16974:                     // 'append' '%'
    case 18510:                     // 'append' '(#'
    case 21070:                     // 'append' '+'
    case 22094:                     // 'append' '-'
    case 24142:                     // 'append' '/'
    case 24654:                     // 'append' '//'
    case 28238:                     // 'append' '<'
    case 28750:                     // 'append' '<!--'
    case 30798:                     // 'append' '<?'
    case 35406:                     // 'append' '['
    case 36430:                     // 'append' 'after'
    case 37454:                     // 'append' 'allowing'
    case 37966:                     // 'append' 'ancestor'
    case 38478:                     // 'append' 'ancestor-or-self'
    case 38990:                     // 'append' 'and'
    case 40014:                     // 'append' 'append'
    case 40526:                     // 'append' 'array'
    case 41038:                     // 'append' 'as'
    case 41550:                     // 'append' 'ascending'
    case 42062:                     // 'append' 'at'
    case 42574:                     // 'append' 'attribute'
    case 43086:                     // 'append' 'base-uri'
    case 43598:                     // 'append' 'before'
    case 44110:                     // 'append' 'boundary-space'
    case 44622:                     // 'append' 'break'
    case 45646:                     // 'append' 'case'
    case 46158:                     // 'append' 'cast'
    case 46670:                     // 'append' 'castable'
    case 47182:                     // 'append' 'catch'
    case 48206:                     // 'append' 'child'
    case 48718:                     // 'append' 'collation'
    case 49742:                     // 'append' 'comment'
    case 50254:                     // 'append' 'constraint'
    case 50766:                     // 'append' 'construction'
    case 52302:                     // 'append' 'context'
    case 52814:                     // 'append' 'continue'
    case 53326:                     // 'append' 'copy'
    case 53838:                     // 'append' 'copy-namespaces'
    case 54350:                     // 'append' 'count'
    case 54862:                     // 'append' 'decimal-format'
    case 55886:                     // 'append' 'declare'
    case 56398:                     // 'append' 'default'
    case 56910:                     // 'append' 'delete'
    case 57422:                     // 'append' 'descendant'
    case 57934:                     // 'append' 'descendant-or-self'
    case 58446:                     // 'append' 'descending'
    case 61006:                     // 'append' 'div'
    case 61518:                     // 'append' 'document'
    case 62030:                     // 'append' 'document-node'
    case 62542:                     // 'append' 'element'
    case 63054:                     // 'append' 'else'
    case 63566:                     // 'append' 'empty'
    case 64078:                     // 'append' 'empty-sequence'
    case 64590:                     // 'append' 'encoding'
    case 65102:                     // 'append' 'end'
    case 66126:                     // 'append' 'eq'
    case 66638:                     // 'append' 'every'
    case 67662:                     // 'append' 'except'
    case 68174:                     // 'append' 'exit'
    case 68686:                     // 'append' 'external'
    case 69198:                     // 'append' 'false'
    case 69710:                     // 'append' 'first'
    case 70222:                     // 'append' 'following'
    case 70734:                     // 'append' 'following-sibling'
    case 71246:                     // 'append' 'for'
    case 72782:                     // 'append' 'from'
    case 73294:                     // 'append' 'ft-option'
    case 75342:                     // 'append' 'function'
    case 75854:                     // 'append' 'ge'
    case 76878:                     // 'append' 'group'
    case 77902:                     // 'append' 'gt'
    case 78414:                     // 'append' 'idiv'
    case 78926:                     // 'append' 'if'
    case 79438:                     // 'append' 'import'
    case 79950:                     // 'append' 'in'
    case 80462:                     // 'append' 'index'
    case 82510:                     // 'append' 'insert'
    case 83022:                     // 'append' 'instance'
    case 83534:                     // 'append' 'integrity'
    case 84046:                     // 'append' 'intersect'
    case 84558:                     // 'append' 'into'
    case 85070:                     // 'append' 'is'
    case 85582:                     // 'append' 'item'
    case 86094:                     // 'append' 'json'
    case 86606:                     // 'append' 'json-item'
    case 87118:                     // 'append' 'jsoniq'
    case 88654:                     // 'append' 'last'
    case 89166:                     // 'append' 'lax'
    case 89678:                     // 'append' 'le'
    case 90702:                     // 'append' 'let'
    case 91726:                     // 'append' 'loop'
    case 92750:                     // 'append' 'lt'
    case 93774:                     // 'append' 'mod'
    case 94286:                     // 'append' 'modify'
    case 94798:                     // 'append' 'module'
    case 95822:                     // 'append' 'namespace'
    case 96334:                     // 'append' 'namespace-node'
    case 96846:                     // 'append' 'ne'
    case 99406:                     // 'append' 'node'
    case 99918:                     // 'append' 'nodes'
    case 100430:                    // 'append' 'not'
    case 100942:                    // 'append' 'null'
    case 101454:                    // 'append' 'object'
    case 103502:                    // 'append' 'only'
    case 104014:                    // 'append' 'option'
    case 104526:                    // 'append' 'or'
    case 105038:                    // 'append' 'order'
    case 105550:                    // 'append' 'ordered'
    case 106062:                    // 'append' 'ordering'
    case 107598:                    // 'append' 'parent'
    case 110670:                    // 'append' 'preceding'
    case 111182:                    // 'append' 'preceding-sibling'
    case 112718:                    // 'append' 'processing-instruction'
    case 113742:                    // 'append' 'rename'
    case 114254:                    // 'append' 'replace'
    case 114766:                    // 'append' 'return'
    case 115278:                    // 'append' 'returning'
    case 115790:                    // 'append' 'revalidation'
    case 116814:                    // 'append' 'satisfies'
    case 117326:                    // 'append' 'schema'
    case 117838:                    // 'append' 'schema-attribute'
    case 118350:                    // 'append' 'schema-element'
    case 118862:                    // 'append' 'score'
    case 119374:                    // 'append' 'select'
    case 119886:                    // 'append' 'self'
    case 122446:                    // 'append' 'sliding'
    case 122958:                    // 'append' 'some'
    case 123470:                    // 'append' 'stable'
    case 123982:                    // 'append' 'start'
    case 125518:                    // 'append' 'strict'
    case 126542:                    // 'append' 'structured-item'
    case 127054:                    // 'append' 'switch'
    case 127566:                    // 'append' 'text'
    case 129614:                    // 'append' 'to'
    case 130126:                    // 'append' 'treat'
    case 130638:                    // 'append' 'true'
    case 131150:                    // 'append' 'try'
    case 131662:                    // 'append' 'tumbling'
    case 132174:                    // 'append' 'type'
    case 132686:                    // 'append' 'typeswitch'
    case 133198:                    // 'append' 'union'
    case 134222:                    // 'append' 'unordered'
    case 134734:                    // 'append' 'updating'
    case 136270:                    // 'append' 'validate'
    case 136782:                    // 'append' 'value'
    case 137294:                    // 'append' 'variable'
    case 137806:                    // 'append' 'version'
    case 139342:                    // 'append' 'where'
    case 139854:                    // 'append' 'while'
    case 141390:                    // 'append' 'with'
    case 143950:                    // 'append' '{'
    case 144974:                    // 'append' '{|'
      try_JSONAppendExpr();
      break;
    case -13:
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    shift(111);                     // 'delete'
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(261);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(11, e0, lk);
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 40616                 // 'json' 'array'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62120                 // 'json' 'document-node'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64168                 // 'json' 'empty-sequence'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 85672                 // 'json' 'item'
     || lk == 86184                 // 'json' 'json'
     || lk == 86696                 // 'json' 'json-item'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96424                 // 'json' 'namespace-node'
     || lk == 96936                 // 'json' 'ne'
     || lk == 99496                 // 'json' 'node'
     || lk == 100008                // 'json' 'nodes'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 117928                // 'json' 'schema-attribute'
     || lk == 118440                // 'json' 'schema-element'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 126632                // 'json' 'structured-item'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shift(168);                   // 'json'
    }
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    shiftT(111);                    // 'delete'
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(261);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          memoize(11, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 40616                 // 'json' 'array'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62120                 // 'json' 'document-node'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64168                 // 'json' 'empty-sequence'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 85672                 // 'json' 'item'
     || lk == 86184                 // 'json' 'json'
     || lk == 86696                 // 'json' 'json-item'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96424                 // 'json' 'namespace-node'
     || lk == 96936                 // 'json' 'ne'
     || lk == 99496                 // 'json' 'node'
     || lk == 100008                // 'json' 'nodes'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 117928                // 'json' 'schema-attribute'
     || lk == 118440                // 'json' 'schema-element'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 126632                // 'json' 'structured-item'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shiftT(168);                  // 'json'
    }
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    switch (l1)
    {
    case 161:                       // 'insert'
      lookahead2W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk != 9889)                 // 'insert' NCName^Token
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(161);              // 'insert'
          lookahead1W(267);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
          switch (l1)
          {
          case 168:                 // 'json'
            lookahead2W(269);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
            break;
          default:
            lk = l1;
          }
          if (lk == 18088)          // 'json' '('
          {
            lk = memoized(13, e0);
            if (lk == 0)
            {
              var b0B = b0; var e0B = e0; var l1B = l1;
              var b1B = b1; var e1B = e1; var l2B = l2;
              var b2B = b2; var e2B = e2;
              try
              {
                shiftT(168);        // 'json'
                memoize(13, e0B, -1);
              }
              catch (p1B)
              {
                b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                b2 = b2B; e2 = e2B; end = e2B; }}
                memoize(13, e0B, -2);
              }
              lk = -2;
            }
          }
          if (lk == -1
           || lk == 3240            // 'json' EQName^Token
           || lk == 4264            // 'json' IntegerLiteral
           || lk == 4776            // 'json' DecimalLiteral
           || lk == 5288            // 'json' DoubleLiteral
           || lk == 5800            // 'json' StringLiteral
           || lk == 16040           // 'json' '$'
           || lk == 16552           // 'json' '$$'
           || lk == 17064           // 'json' '%'
           || lk == 18600           // 'json' '(#'
           || lk == 21160           // 'json' '+'
           || lk == 22184           // 'json' '-'
           || lk == 24232           // 'json' '/'
           || lk == 24744           // 'json' '//'
           || lk == 28328           // 'json' '<'
           || lk == 28840           // 'json' '<!--'
           || lk == 30888           // 'json' '<?'
           || lk == 35496           // 'json' '['
           || lk == 36520           // 'json' 'after'
           || lk == 37544           // 'json' 'allowing'
           || lk == 38056           // 'json' 'ancestor'
           || lk == 38568           // 'json' 'ancestor-or-self'
           || lk == 39080           // 'json' 'and'
           || lk == 40104           // 'json' 'append'
           || lk == 40616           // 'json' 'array'
           || lk == 41128           // 'json' 'as'
           || lk == 41640           // 'json' 'ascending'
           || lk == 42152           // 'json' 'at'
           || lk == 42664           // 'json' 'attribute'
           || lk == 43176           // 'json' 'base-uri'
           || lk == 43688           // 'json' 'before'
           || lk == 44200           // 'json' 'boundary-space'
           || lk == 44712           // 'json' 'break'
           || lk == 45736           // 'json' 'case'
           || lk == 46248           // 'json' 'cast'
           || lk == 46760           // 'json' 'castable'
           || lk == 47272           // 'json' 'catch'
           || lk == 48296           // 'json' 'child'
           || lk == 48808           // 'json' 'collation'
           || lk == 49832           // 'json' 'comment'
           || lk == 50344           // 'json' 'constraint'
           || lk == 50856           // 'json' 'construction'
           || lk == 52392           // 'json' 'context'
           || lk == 52904           // 'json' 'continue'
           || lk == 53416           // 'json' 'copy'
           || lk == 53928           // 'json' 'copy-namespaces'
           || lk == 54440           // 'json' 'count'
           || lk == 54952           // 'json' 'decimal-format'
           || lk == 55976           // 'json' 'declare'
           || lk == 56488           // 'json' 'default'
           || lk == 57000           // 'json' 'delete'
           || lk == 57512           // 'json' 'descendant'
           || lk == 58024           // 'json' 'descendant-or-self'
           || lk == 58536           // 'json' 'descending'
           || lk == 61096           // 'json' 'div'
           || lk == 61608           // 'json' 'document'
           || lk == 62120           // 'json' 'document-node'
           || lk == 62632           // 'json' 'element'
           || lk == 63144           // 'json' 'else'
           || lk == 63656           // 'json' 'empty'
           || lk == 64168           // 'json' 'empty-sequence'
           || lk == 64680           // 'json' 'encoding'
           || lk == 65192           // 'json' 'end'
           || lk == 66216           // 'json' 'eq'
           || lk == 66728           // 'json' 'every'
           || lk == 67752           // 'json' 'except'
           || lk == 68264           // 'json' 'exit'
           || lk == 68776           // 'json' 'external'
           || lk == 69288           // 'json' 'false'
           || lk == 69800           // 'json' 'first'
           || lk == 70312           // 'json' 'following'
           || lk == 70824           // 'json' 'following-sibling'
           || lk == 71336           // 'json' 'for'
           || lk == 72872           // 'json' 'from'
           || lk == 73384           // 'json' 'ft-option'
           || lk == 75432           // 'json' 'function'
           || lk == 75944           // 'json' 'ge'
           || lk == 76968           // 'json' 'group'
           || lk == 77992           // 'json' 'gt'
           || lk == 78504           // 'json' 'idiv'
           || lk == 79016           // 'json' 'if'
           || lk == 79528           // 'json' 'import'
           || lk == 80040           // 'json' 'in'
           || lk == 80552           // 'json' 'index'
           || lk == 82600           // 'json' 'insert'
           || lk == 83112           // 'json' 'instance'
           || lk == 83624           // 'json' 'integrity'
           || lk == 84136           // 'json' 'intersect'
           || lk == 84648           // 'json' 'into'
           || lk == 85160           // 'json' 'is'
           || lk == 85672           // 'json' 'item'
           || lk == 86184           // 'json' 'json'
           || lk == 86696           // 'json' 'json-item'
           || lk == 87208           // 'json' 'jsoniq'
           || lk == 88744           // 'json' 'last'
           || lk == 89256           // 'json' 'lax'
           || lk == 89768           // 'json' 'le'
           || lk == 90792           // 'json' 'let'
           || lk == 91816           // 'json' 'loop'
           || lk == 92840           // 'json' 'lt'
           || lk == 93864           // 'json' 'mod'
           || lk == 94376           // 'json' 'modify'
           || lk == 94888           // 'json' 'module'
           || lk == 95912           // 'json' 'namespace'
           || lk == 96424           // 'json' 'namespace-node'
           || lk == 96936           // 'json' 'ne'
           || lk == 99496           // 'json' 'node'
           || lk == 100008          // 'json' 'nodes'
           || lk == 100520          // 'json' 'not'
           || lk == 101032          // 'json' 'null'
           || lk == 101544          // 'json' 'object'
           || lk == 103592          // 'json' 'only'
           || lk == 104104          // 'json' 'option'
           || lk == 104616          // 'json' 'or'
           || lk == 105128          // 'json' 'order'
           || lk == 105640          // 'json' 'ordered'
           || lk == 106152          // 'json' 'ordering'
           || lk == 107688          // 'json' 'parent'
           || lk == 110760          // 'json' 'preceding'
           || lk == 111272          // 'json' 'preceding-sibling'
           || lk == 112808          // 'json' 'processing-instruction'
           || lk == 113832          // 'json' 'rename'
           || lk == 114344          // 'json' 'replace'
           || lk == 114856          // 'json' 'return'
           || lk == 115368          // 'json' 'returning'
           || lk == 115880          // 'json' 'revalidation'
           || lk == 116904          // 'json' 'satisfies'
           || lk == 117416          // 'json' 'schema'
           || lk == 117928          // 'json' 'schema-attribute'
           || lk == 118440          // 'json' 'schema-element'
           || lk == 118952          // 'json' 'score'
           || lk == 119464          // 'json' 'select'
           || lk == 119976          // 'json' 'self'
           || lk == 122536          // 'json' 'sliding'
           || lk == 123048          // 'json' 'some'
           || lk == 123560          // 'json' 'stable'
           || lk == 124072          // 'json' 'start'
           || lk == 125608          // 'json' 'strict'
           || lk == 126632          // 'json' 'structured-item'
           || lk == 127144          // 'json' 'switch'
           || lk == 127656          // 'json' 'text'
           || lk == 129704          // 'json' 'to'
           || lk == 130216          // 'json' 'treat'
           || lk == 130728          // 'json' 'true'
           || lk == 131240          // 'json' 'try'
           || lk == 131752          // 'json' 'tumbling'
           || lk == 132264          // 'json' 'type'
           || lk == 132776          // 'json' 'typeswitch'
           || lk == 133288          // 'json' 'union'
           || lk == 134312          // 'json' 'unordered'
           || lk == 134824          // 'json' 'updating'
           || lk == 136360          // 'json' 'validate'
           || lk == 136872          // 'json' 'value'
           || lk == 137384          // 'json' 'variable'
           || lk == 137896          // 'json' 'version'
           || lk == 139432          // 'json' 'where'
           || lk == 139944          // 'json' 'while'
           || lk == 141480          // 'json' 'with'
           || lk == 144040          // 'json' '{'
           || lk == 145064)         // 'json' '{|'
          {
            shiftT(168);            // 'json'
          }
          lookahead1W(267);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
          try_ExprSingle();
          shiftT(165);              // 'into'
          lookahead1W(267);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
          try_ExprSingle();
          switch (l1)
          {
          case 82:                  // 'at'
            lookahead2W(72);        // S^WS | '(:' | 'position'
            break;
          default:
            lk = l1;
          }
          if (lk == 110162)         // 'at' 'position'
          {
            lk = memoized(14, e0);
            if (lk == 0)
            {
              var b0B = b0; var e0B = e0; var l1B = l1;
              var b1B = b1; var e1B = e1; var l2B = l2;
              var b2B = b2; var e2B = e2;
              try
              {
                shiftT(82);         // 'at'
                lookahead1W(72);    // S^WS | '(:' | 'position'
                shiftT(215);        // 'position'
                lookahead1W(267);   // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                try_ExprSingle();
                memoize(14, e0B, -1);
              }
              catch (p1B)
              {
                b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                b2 = b2B; e2 = e2B; end = e2B; }}
                memoize(14, e0B, -2);
              }
              lk = -2;
            }
          }
          if (lk == -1)
          {
            shiftT(82);             // 'at'
            lookahead1W(72);        // S^WS | '(:' | 'position'
            shiftT(215);            // 'position'
            lookahead1W(267);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
            try_ExprSingle();
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(12, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(161);                   // 'insert'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      switch (l1)
      {
      case 168:                     // 'json'
        lookahead2W(269);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      default:
        lk = l1;
      }
      if (lk == 18088)              // 'json' '('
      {
        lk = memoized(13, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(168);            // 'json'
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(13, e0, lk);
        }
      }
      if (lk == -1
       || lk == 3240                // 'json' EQName^Token
       || lk == 4264                // 'json' IntegerLiteral
       || lk == 4776                // 'json' DecimalLiteral
       || lk == 5288                // 'json' DoubleLiteral
       || lk == 5800                // 'json' StringLiteral
       || lk == 16040               // 'json' '$'
       || lk == 16552               // 'json' '$$'
       || lk == 17064               // 'json' '%'
       || lk == 18600               // 'json' '(#'
       || lk == 21160               // 'json' '+'
       || lk == 22184               // 'json' '-'
       || lk == 24232               // 'json' '/'
       || lk == 24744               // 'json' '//'
       || lk == 28328               // 'json' '<'
       || lk == 28840               // 'json' '<!--'
       || lk == 30888               // 'json' '<?'
       || lk == 35496               // 'json' '['
       || lk == 36520               // 'json' 'after'
       || lk == 37544               // 'json' 'allowing'
       || lk == 38056               // 'json' 'ancestor'
       || lk == 38568               // 'json' 'ancestor-or-self'
       || lk == 39080               // 'json' 'and'
       || lk == 40104               // 'json' 'append'
       || lk == 40616               // 'json' 'array'
       || lk == 41128               // 'json' 'as'
       || lk == 41640               // 'json' 'ascending'
       || lk == 42152               // 'json' 'at'
       || lk == 42664               // 'json' 'attribute'
       || lk == 43176               // 'json' 'base-uri'
       || lk == 43688               // 'json' 'before'
       || lk == 44200               // 'json' 'boundary-space'
       || lk == 44712               // 'json' 'break'
       || lk == 45736               // 'json' 'case'
       || lk == 46248               // 'json' 'cast'
       || lk == 46760               // 'json' 'castable'
       || lk == 47272               // 'json' 'catch'
       || lk == 48296               // 'json' 'child'
       || lk == 48808               // 'json' 'collation'
       || lk == 49832               // 'json' 'comment'
       || lk == 50344               // 'json' 'constraint'
       || lk == 50856               // 'json' 'construction'
       || lk == 52392               // 'json' 'context'
       || lk == 52904               // 'json' 'continue'
       || lk == 53416               // 'json' 'copy'
       || lk == 53928               // 'json' 'copy-namespaces'
       || lk == 54440               // 'json' 'count'
       || lk == 54952               // 'json' 'decimal-format'
       || lk == 55976               // 'json' 'declare'
       || lk == 56488               // 'json' 'default'
       || lk == 57000               // 'json' 'delete'
       || lk == 57512               // 'json' 'descendant'
       || lk == 58024               // 'json' 'descendant-or-self'
       || lk == 58536               // 'json' 'descending'
       || lk == 61096               // 'json' 'div'
       || lk == 61608               // 'json' 'document'
       || lk == 62120               // 'json' 'document-node'
       || lk == 62632               // 'json' 'element'
       || lk == 63144               // 'json' 'else'
       || lk == 63656               // 'json' 'empty'
       || lk == 64168               // 'json' 'empty-sequence'
       || lk == 64680               // 'json' 'encoding'
       || lk == 65192               // 'json' 'end'
       || lk == 66216               // 'json' 'eq'
       || lk == 66728               // 'json' 'every'
       || lk == 67752               // 'json' 'except'
       || lk == 68264               // 'json' 'exit'
       || lk == 68776               // 'json' 'external'
       || lk == 69288               // 'json' 'false'
       || lk == 69800               // 'json' 'first'
       || lk == 70312               // 'json' 'following'
       || lk == 70824               // 'json' 'following-sibling'
       || lk == 71336               // 'json' 'for'
       || lk == 72872               // 'json' 'from'
       || lk == 73384               // 'json' 'ft-option'
       || lk == 75432               // 'json' 'function'
       || lk == 75944               // 'json' 'ge'
       || lk == 76968               // 'json' 'group'
       || lk == 77992               // 'json' 'gt'
       || lk == 78504               // 'json' 'idiv'
       || lk == 79016               // 'json' 'if'
       || lk == 79528               // 'json' 'import'
       || lk == 80040               // 'json' 'in'
       || lk == 80552               // 'json' 'index'
       || lk == 82600               // 'json' 'insert'
       || lk == 83112               // 'json' 'instance'
       || lk == 83624               // 'json' 'integrity'
       || lk == 84136               // 'json' 'intersect'
       || lk == 84648               // 'json' 'into'
       || lk == 85160               // 'json' 'is'
       || lk == 85672               // 'json' 'item'
       || lk == 86184               // 'json' 'json'
       || lk == 86696               // 'json' 'json-item'
       || lk == 87208               // 'json' 'jsoniq'
       || lk == 88744               // 'json' 'last'
       || lk == 89256               // 'json' 'lax'
       || lk == 89768               // 'json' 'le'
       || lk == 90792               // 'json' 'let'
       || lk == 91816               // 'json' 'loop'
       || lk == 92840               // 'json' 'lt'
       || lk == 93864               // 'json' 'mod'
       || lk == 94376               // 'json' 'modify'
       || lk == 94888               // 'json' 'module'
       || lk == 95912               // 'json' 'namespace'
       || lk == 96424               // 'json' 'namespace-node'
       || lk == 96936               // 'json' 'ne'
       || lk == 99496               // 'json' 'node'
       || lk == 100008              // 'json' 'nodes'
       || lk == 100520              // 'json' 'not'
       || lk == 101032              // 'json' 'null'
       || lk == 101544              // 'json' 'object'
       || lk == 103592              // 'json' 'only'
       || lk == 104104              // 'json' 'option'
       || lk == 104616              // 'json' 'or'
       || lk == 105128              // 'json' 'order'
       || lk == 105640              // 'json' 'ordered'
       || lk == 106152              // 'json' 'ordering'
       || lk == 107688              // 'json' 'parent'
       || lk == 110760              // 'json' 'preceding'
       || lk == 111272              // 'json' 'preceding-sibling'
       || lk == 112808              // 'json' 'processing-instruction'
       || lk == 113832              // 'json' 'rename'
       || lk == 114344              // 'json' 'replace'
       || lk == 114856              // 'json' 'return'
       || lk == 115368              // 'json' 'returning'
       || lk == 115880              // 'json' 'revalidation'
       || lk == 116904              // 'json' 'satisfies'
       || lk == 117416              // 'json' 'schema'
       || lk == 117928              // 'json' 'schema-attribute'
       || lk == 118440              // 'json' 'schema-element'
       || lk == 118952              // 'json' 'score'
       || lk == 119464              // 'json' 'select'
       || lk == 119976              // 'json' 'self'
       || lk == 122536              // 'json' 'sliding'
       || lk == 123048              // 'json' 'some'
       || lk == 123560              // 'json' 'stable'
       || lk == 124072              // 'json' 'start'
       || lk == 125608              // 'json' 'strict'
       || lk == 126632              // 'json' 'structured-item'
       || lk == 127144              // 'json' 'switch'
       || lk == 127656              // 'json' 'text'
       || lk == 129704              // 'json' 'to'
       || lk == 130216              // 'json' 'treat'
       || lk == 130728              // 'json' 'true'
       || lk == 131240              // 'json' 'try'
       || lk == 131752              // 'json' 'tumbling'
       || lk == 132264              // 'json' 'type'
       || lk == 132776              // 'json' 'typeswitch'
       || lk == 133288              // 'json' 'union'
       || lk == 134312              // 'json' 'unordered'
       || lk == 134824              // 'json' 'updating'
       || lk == 136360              // 'json' 'validate'
       || lk == 136872              // 'json' 'value'
       || lk == 137384              // 'json' 'variable'
       || lk == 137896              // 'json' 'version'
       || lk == 139432              // 'json' 'where'
       || lk == 139944              // 'json' 'while'
       || lk == 141480              // 'json' 'with'
       || lk == 144040              // 'json' '{'
       || lk == 145064)             // 'json' '{|'
      {
        shift(168);                 // 'json'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_ExprSingle();
      shift(165);                   // 'into'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_ExprSingle();
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(72);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 110162)             // 'at' 'position'
      {
        lk = memoized(14, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(82);             // 'at'
            lookahead1W(72);        // S^WS | '(:' | 'position'
            shiftT(215);            // 'position'
            lookahead1W(267);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
            try_ExprSingle();
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(14, e0, lk);
        }
      }
      if (lk == -1)
      {
        shift(82);                  // 'at'
        lookahead1W(72);            // S^WS | '(:' | 'position'
        shift(215);                 // 'position'
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        whitespace();
        parse_ExprSingle();
      }
      break;
    default:
      shift(161);                   // 'insert'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      switch (l1)
      {
      case 168:                     // 'json'
        lookahead2W(282);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      default:
        lk = l1;
      }
      if (lk == 18088)              // 'json' '('
      {
        lk = memoized(15, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(168);            // 'json'
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(15, e0, lk);
        }
      }
      if (lk == -1
       || lk == 3240                // 'json' EQName^Token
       || lk == 4264                // 'json' IntegerLiteral
       || lk == 4776                // 'json' DecimalLiteral
       || lk == 5288                // 'json' DoubleLiteral
       || lk == 5800                // 'json' StringLiteral
       || lk == 9896                // 'json' NCName^Token
       || lk == 16040               // 'json' '$'
       || lk == 16552               // 'json' '$$'
       || lk == 17064               // 'json' '%'
       || lk == 18600               // 'json' '(#'
       || lk == 21160               // 'json' '+'
       || lk == 22184               // 'json' '-'
       || lk == 24232               // 'json' '/'
       || lk == 24744               // 'json' '//'
       || lk == 28328               // 'json' '<'
       || lk == 28840               // 'json' '<!--'
       || lk == 30888               // 'json' '<?'
       || lk == 35496               // 'json' '['
       || lk == 36520               // 'json' 'after'
       || lk == 37544               // 'json' 'allowing'
       || lk == 38056               // 'json' 'ancestor'
       || lk == 38568               // 'json' 'ancestor-or-self'
       || lk == 39080               // 'json' 'and'
       || lk == 40104               // 'json' 'append'
       || lk == 40616               // 'json' 'array'
       || lk == 41128               // 'json' 'as'
       || lk == 41640               // 'json' 'ascending'
       || lk == 42152               // 'json' 'at'
       || lk == 42664               // 'json' 'attribute'
       || lk == 43176               // 'json' 'base-uri'
       || lk == 43688               // 'json' 'before'
       || lk == 44200               // 'json' 'boundary-space'
       || lk == 44712               // 'json' 'break'
       || lk == 45736               // 'json' 'case'
       || lk == 46248               // 'json' 'cast'
       || lk == 46760               // 'json' 'castable'
       || lk == 47272               // 'json' 'catch'
       || lk == 48296               // 'json' 'child'
       || lk == 48808               // 'json' 'collation'
       || lk == 49832               // 'json' 'comment'
       || lk == 50344               // 'json' 'constraint'
       || lk == 50856               // 'json' 'construction'
       || lk == 52392               // 'json' 'context'
       || lk == 52904               // 'json' 'continue'
       || lk == 53416               // 'json' 'copy'
       || lk == 53928               // 'json' 'copy-namespaces'
       || lk == 54440               // 'json' 'count'
       || lk == 54952               // 'json' 'decimal-format'
       || lk == 55976               // 'json' 'declare'
       || lk == 56488               // 'json' 'default'
       || lk == 57000               // 'json' 'delete'
       || lk == 57512               // 'json' 'descendant'
       || lk == 58024               // 'json' 'descendant-or-self'
       || lk == 58536               // 'json' 'descending'
       || lk == 61096               // 'json' 'div'
       || lk == 61608               // 'json' 'document'
       || lk == 62120               // 'json' 'document-node'
       || lk == 62632               // 'json' 'element'
       || lk == 63144               // 'json' 'else'
       || lk == 63656               // 'json' 'empty'
       || lk == 64168               // 'json' 'empty-sequence'
       || lk == 64680               // 'json' 'encoding'
       || lk == 65192               // 'json' 'end'
       || lk == 66216               // 'json' 'eq'
       || lk == 66728               // 'json' 'every'
       || lk == 67752               // 'json' 'except'
       || lk == 68264               // 'json' 'exit'
       || lk == 68776               // 'json' 'external'
       || lk == 69288               // 'json' 'false'
       || lk == 69800               // 'json' 'first'
       || lk == 70312               // 'json' 'following'
       || lk == 70824               // 'json' 'following-sibling'
       || lk == 71336               // 'json' 'for'
       || lk == 72872               // 'json' 'from'
       || lk == 73384               // 'json' 'ft-option'
       || lk == 75432               // 'json' 'function'
       || lk == 75944               // 'json' 'ge'
       || lk == 76968               // 'json' 'group'
       || lk == 77992               // 'json' 'gt'
       || lk == 78504               // 'json' 'idiv'
       || lk == 79016               // 'json' 'if'
       || lk == 79528               // 'json' 'import'
       || lk == 80040               // 'json' 'in'
       || lk == 80552               // 'json' 'index'
       || lk == 82600               // 'json' 'insert'
       || lk == 83112               // 'json' 'instance'
       || lk == 83624               // 'json' 'integrity'
       || lk == 84136               // 'json' 'intersect'
       || lk == 84648               // 'json' 'into'
       || lk == 85160               // 'json' 'is'
       || lk == 85672               // 'json' 'item'
       || lk == 86184               // 'json' 'json'
       || lk == 86696               // 'json' 'json-item'
       || lk == 87208               // 'json' 'jsoniq'
       || lk == 88744               // 'json' 'last'
       || lk == 89256               // 'json' 'lax'
       || lk == 89768               // 'json' 'le'
       || lk == 90792               // 'json' 'let'
       || lk == 91816               // 'json' 'loop'
       || lk == 92840               // 'json' 'lt'
       || lk == 93864               // 'json' 'mod'
       || lk == 94376               // 'json' 'modify'
       || lk == 94888               // 'json' 'module'
       || lk == 95912               // 'json' 'namespace'
       || lk == 96424               // 'json' 'namespace-node'
       || lk == 96936               // 'json' 'ne'
       || lk == 99496               // 'json' 'node'
       || lk == 100008              // 'json' 'nodes'
       || lk == 100520              // 'json' 'not'
       || lk == 101032              // 'json' 'null'
       || lk == 101544              // 'json' 'object'
       || lk == 103592              // 'json' 'only'
       || lk == 104104              // 'json' 'option'
       || lk == 104616              // 'json' 'or'
       || lk == 105128              // 'json' 'order'
       || lk == 105640              // 'json' 'ordered'
       || lk == 106152              // 'json' 'ordering'
       || lk == 107688              // 'json' 'parent'
       || lk == 110760              // 'json' 'preceding'
       || lk == 111272              // 'json' 'preceding-sibling'
       || lk == 112808              // 'json' 'processing-instruction'
       || lk == 113832              // 'json' 'rename'
       || lk == 114344              // 'json' 'replace'
       || lk == 114856              // 'json' 'return'
       || lk == 115368              // 'json' 'returning'
       || lk == 115880              // 'json' 'revalidation'
       || lk == 116904              // 'json' 'satisfies'
       || lk == 117416              // 'json' 'schema'
       || lk == 117928              // 'json' 'schema-attribute'
       || lk == 118440              // 'json' 'schema-element'
       || lk == 118952              // 'json' 'score'
       || lk == 119464              // 'json' 'select'
       || lk == 119976              // 'json' 'self'
       || lk == 122536              // 'json' 'sliding'
       || lk == 123048              // 'json' 'some'
       || lk == 123560              // 'json' 'stable'
       || lk == 124072              // 'json' 'start'
       || lk == 125608              // 'json' 'strict'
       || lk == 126632              // 'json' 'structured-item'
       || lk == 127144              // 'json' 'switch'
       || lk == 127656              // 'json' 'text'
       || lk == 129704              // 'json' 'to'
       || lk == 130216              // 'json' 'treat'
       || lk == 130728              // 'json' 'true'
       || lk == 131240              // 'json' 'try'
       || lk == 131752              // 'json' 'tumbling'
       || lk == 132264              // 'json' 'type'
       || lk == 132776              // 'json' 'typeswitch'
       || lk == 133288              // 'json' 'union'
       || lk == 134312              // 'json' 'unordered'
       || lk == 134824              // 'json' 'updating'
       || lk == 136360              // 'json' 'validate'
       || lk == 136872              // 'json' 'value'
       || lk == 137384              // 'json' 'variable'
       || lk == 137896              // 'json' 'version'
       || lk == 139432              // 'json' 'where'
       || lk == 139944              // 'json' 'while'
       || lk == 141480              // 'json' 'with'
       || lk == 144040              // 'json' '{'
       || lk == 145064)             // 'json' '{|'
      {
        shift(168);                 // 'json'
      }
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_PairConstructorList();
      shift(165);                   // 'into'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    switch (l1)
    {
    case 161:                       // 'insert'
      lookahead2W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk != 9889)                 // 'insert' NCName^Token
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(161);              // 'insert'
          lookahead1W(267);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
          switch (l1)
          {
          case 168:                 // 'json'
            lookahead2W(269);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
            break;
          default:
            lk = l1;
          }
          if (lk == 18088)          // 'json' '('
          {
            lk = memoized(13, e0);
            if (lk == 0)
            {
              var b0B = b0; var e0B = e0; var l1B = l1;
              var b1B = b1; var e1B = e1; var l2B = l2;
              var b2B = b2; var e2B = e2;
              try
              {
                shiftT(168);        // 'json'
                memoize(13, e0B, -1);
              }
              catch (p1B)
              {
                b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                b2 = b2B; e2 = e2B; end = e2B; }}
                memoize(13, e0B, -2);
              }
              lk = -2;
            }
          }
          if (lk == -1
           || lk == 3240            // 'json' EQName^Token
           || lk == 4264            // 'json' IntegerLiteral
           || lk == 4776            // 'json' DecimalLiteral
           || lk == 5288            // 'json' DoubleLiteral
           || lk == 5800            // 'json' StringLiteral
           || lk == 16040           // 'json' '$'
           || lk == 16552           // 'json' '$$'
           || lk == 17064           // 'json' '%'
           || lk == 18600           // 'json' '(#'
           || lk == 21160           // 'json' '+'
           || lk == 22184           // 'json' '-'
           || lk == 24232           // 'json' '/'
           || lk == 24744           // 'json' '//'
           || lk == 28328           // 'json' '<'
           || lk == 28840           // 'json' '<!--'
           || lk == 30888           // 'json' '<?'
           || lk == 35496           // 'json' '['
           || lk == 36520           // 'json' 'after'
           || lk == 37544           // 'json' 'allowing'
           || lk == 38056           // 'json' 'ancestor'
           || lk == 38568           // 'json' 'ancestor-or-self'
           || lk == 39080           // 'json' 'and'
           || lk == 40104           // 'json' 'append'
           || lk == 40616           // 'json' 'array'
           || lk == 41128           // 'json' 'as'
           || lk == 41640           // 'json' 'ascending'
           || lk == 42152           // 'json' 'at'
           || lk == 42664           // 'json' 'attribute'
           || lk == 43176           // 'json' 'base-uri'
           || lk == 43688           // 'json' 'before'
           || lk == 44200           // 'json' 'boundary-space'
           || lk == 44712           // 'json' 'break'
           || lk == 45736           // 'json' 'case'
           || lk == 46248           // 'json' 'cast'
           || lk == 46760           // 'json' 'castable'
           || lk == 47272           // 'json' 'catch'
           || lk == 48296           // 'json' 'child'
           || lk == 48808           // 'json' 'collation'
           || lk == 49832           // 'json' 'comment'
           || lk == 50344           // 'json' 'constraint'
           || lk == 50856           // 'json' 'construction'
           || lk == 52392           // 'json' 'context'
           || lk == 52904           // 'json' 'continue'
           || lk == 53416           // 'json' 'copy'
           || lk == 53928           // 'json' 'copy-namespaces'
           || lk == 54440           // 'json' 'count'
           || lk == 54952           // 'json' 'decimal-format'
           || lk == 55976           // 'json' 'declare'
           || lk == 56488           // 'json' 'default'
           || lk == 57000           // 'json' 'delete'
           || lk == 57512           // 'json' 'descendant'
           || lk == 58024           // 'json' 'descendant-or-self'
           || lk == 58536           // 'json' 'descending'
           || lk == 61096           // 'json' 'div'
           || lk == 61608           // 'json' 'document'
           || lk == 62120           // 'json' 'document-node'
           || lk == 62632           // 'json' 'element'
           || lk == 63144           // 'json' 'else'
           || lk == 63656           // 'json' 'empty'
           || lk == 64168           // 'json' 'empty-sequence'
           || lk == 64680           // 'json' 'encoding'
           || lk == 65192           // 'json' 'end'
           || lk == 66216           // 'json' 'eq'
           || lk == 66728           // 'json' 'every'
           || lk == 67752           // 'json' 'except'
           || lk == 68264           // 'json' 'exit'
           || lk == 68776           // 'json' 'external'
           || lk == 69288           // 'json' 'false'
           || lk == 69800           // 'json' 'first'
           || lk == 70312           // 'json' 'following'
           || lk == 70824           // 'json' 'following-sibling'
           || lk == 71336           // 'json' 'for'
           || lk == 72872           // 'json' 'from'
           || lk == 73384           // 'json' 'ft-option'
           || lk == 75432           // 'json' 'function'
           || lk == 75944           // 'json' 'ge'
           || lk == 76968           // 'json' 'group'
           || lk == 77992           // 'json' 'gt'
           || lk == 78504           // 'json' 'idiv'
           || lk == 79016           // 'json' 'if'
           || lk == 79528           // 'json' 'import'
           || lk == 80040           // 'json' 'in'
           || lk == 80552           // 'json' 'index'
           || lk == 82600           // 'json' 'insert'
           || lk == 83112           // 'json' 'instance'
           || lk == 83624           // 'json' 'integrity'
           || lk == 84136           // 'json' 'intersect'
           || lk == 84648           // 'json' 'into'
           || lk == 85160           // 'json' 'is'
           || lk == 85672           // 'json' 'item'
           || lk == 86184           // 'json' 'json'
           || lk == 86696           // 'json' 'json-item'
           || lk == 87208           // 'json' 'jsoniq'
           || lk == 88744           // 'json' 'last'
           || lk == 89256           // 'json' 'lax'
           || lk == 89768           // 'json' 'le'
           || lk == 90792           // 'json' 'let'
           || lk == 91816           // 'json' 'loop'
           || lk == 92840           // 'json' 'lt'
           || lk == 93864           // 'json' 'mod'
           || lk == 94376           // 'json' 'modify'
           || lk == 94888           // 'json' 'module'
           || lk == 95912           // 'json' 'namespace'
           || lk == 96424           // 'json' 'namespace-node'
           || lk == 96936           // 'json' 'ne'
           || lk == 99496           // 'json' 'node'
           || lk == 100008          // 'json' 'nodes'
           || lk == 100520          // 'json' 'not'
           || lk == 101032          // 'json' 'null'
           || lk == 101544          // 'json' 'object'
           || lk == 103592          // 'json' 'only'
           || lk == 104104          // 'json' 'option'
           || lk == 104616          // 'json' 'or'
           || lk == 105128          // 'json' 'order'
           || lk == 105640          // 'json' 'ordered'
           || lk == 106152          // 'json' 'ordering'
           || lk == 107688          // 'json' 'parent'
           || lk == 110760          // 'json' 'preceding'
           || lk == 111272          // 'json' 'preceding-sibling'
           || lk == 112808          // 'json' 'processing-instruction'
           || lk == 113832          // 'json' 'rename'
           || lk == 114344          // 'json' 'replace'
           || lk == 114856          // 'json' 'return'
           || lk == 115368          // 'json' 'returning'
           || lk == 115880          // 'json' 'revalidation'
           || lk == 116904          // 'json' 'satisfies'
           || lk == 117416          // 'json' 'schema'
           || lk == 117928          // 'json' 'schema-attribute'
           || lk == 118440          // 'json' 'schema-element'
           || lk == 118952          // 'json' 'score'
           || lk == 119464          // 'json' 'select'
           || lk == 119976          // 'json' 'self'
           || lk == 122536          // 'json' 'sliding'
           || lk == 123048          // 'json' 'some'
           || lk == 123560          // 'json' 'stable'
           || lk == 124072          // 'json' 'start'
           || lk == 125608          // 'json' 'strict'
           || lk == 126632          // 'json' 'structured-item'
           || lk == 127144          // 'json' 'switch'
           || lk == 127656          // 'json' 'text'
           || lk == 129704          // 'json' 'to'
           || lk == 130216          // 'json' 'treat'
           || lk == 130728          // 'json' 'true'
           || lk == 131240          // 'json' 'try'
           || lk == 131752          // 'json' 'tumbling'
           || lk == 132264          // 'json' 'type'
           || lk == 132776          // 'json' 'typeswitch'
           || lk == 133288          // 'json' 'union'
           || lk == 134312          // 'json' 'unordered'
           || lk == 134824          // 'json' 'updating'
           || lk == 136360          // 'json' 'validate'
           || lk == 136872          // 'json' 'value'
           || lk == 137384          // 'json' 'variable'
           || lk == 137896          // 'json' 'version'
           || lk == 139432          // 'json' 'where'
           || lk == 139944          // 'json' 'while'
           || lk == 141480          // 'json' 'with'
           || lk == 144040          // 'json' '{'
           || lk == 145064)         // 'json' '{|'
          {
            shiftT(168);            // 'json'
          }
          lookahead1W(267);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
          try_ExprSingle();
          shiftT(165);              // 'into'
          lookahead1W(267);         // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
          try_ExprSingle();
          switch (l1)
          {
          case 82:                  // 'at'
            lookahead2W(72);        // S^WS | '(:' | 'position'
            break;
          default:
            lk = l1;
          }
          if (lk == 110162)         // 'at' 'position'
          {
            lk = memoized(14, e0);
            if (lk == 0)
            {
              var b0B = b0; var e0B = e0; var l1B = l1;
              var b1B = b1; var e1B = e1; var l2B = l2;
              var b2B = b2; var e2B = e2;
              try
              {
                shiftT(82);         // 'at'
                lookahead1W(72);    // S^WS | '(:' | 'position'
                shiftT(215);        // 'position'
                lookahead1W(267);   // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                try_ExprSingle();
                memoize(14, e0B, -1);
              }
              catch (p1B)
              {
                b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
                b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
                b2 = b2B; e2 = e2B; end = e2B; }}
                memoize(14, e0B, -2);
              }
              lk = -2;
            }
          }
          if (lk == -1)
          {
            shiftT(82);             // 'at'
            lookahead1W(72);        // S^WS | '(:' | 'position'
            shiftT(215);            // 'position'
            lookahead1W(267);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
            try_ExprSingle();
          }
          memoize(12, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(161);                  // 'insert'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      switch (l1)
      {
      case 168:                     // 'json'
        lookahead2W(269);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      default:
        lk = l1;
      }
      if (lk == 18088)              // 'json' '('
      {
        lk = memoized(13, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(168);            // 'json'
            memoize(13, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(13, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1
       || lk == 3240                // 'json' EQName^Token
       || lk == 4264                // 'json' IntegerLiteral
       || lk == 4776                // 'json' DecimalLiteral
       || lk == 5288                // 'json' DoubleLiteral
       || lk == 5800                // 'json' StringLiteral
       || lk == 16040               // 'json' '$'
       || lk == 16552               // 'json' '$$'
       || lk == 17064               // 'json' '%'
       || lk == 18600               // 'json' '(#'
       || lk == 21160               // 'json' '+'
       || lk == 22184               // 'json' '-'
       || lk == 24232               // 'json' '/'
       || lk == 24744               // 'json' '//'
       || lk == 28328               // 'json' '<'
       || lk == 28840               // 'json' '<!--'
       || lk == 30888               // 'json' '<?'
       || lk == 35496               // 'json' '['
       || lk == 36520               // 'json' 'after'
       || lk == 37544               // 'json' 'allowing'
       || lk == 38056               // 'json' 'ancestor'
       || lk == 38568               // 'json' 'ancestor-or-self'
       || lk == 39080               // 'json' 'and'
       || lk == 40104               // 'json' 'append'
       || lk == 40616               // 'json' 'array'
       || lk == 41128               // 'json' 'as'
       || lk == 41640               // 'json' 'ascending'
       || lk == 42152               // 'json' 'at'
       || lk == 42664               // 'json' 'attribute'
       || lk == 43176               // 'json' 'base-uri'
       || lk == 43688               // 'json' 'before'
       || lk == 44200               // 'json' 'boundary-space'
       || lk == 44712               // 'json' 'break'
       || lk == 45736               // 'json' 'case'
       || lk == 46248               // 'json' 'cast'
       || lk == 46760               // 'json' 'castable'
       || lk == 47272               // 'json' 'catch'
       || lk == 48296               // 'json' 'child'
       || lk == 48808               // 'json' 'collation'
       || lk == 49832               // 'json' 'comment'
       || lk == 50344               // 'json' 'constraint'
       || lk == 50856               // 'json' 'construction'
       || lk == 52392               // 'json' 'context'
       || lk == 52904               // 'json' 'continue'
       || lk == 53416               // 'json' 'copy'
       || lk == 53928               // 'json' 'copy-namespaces'
       || lk == 54440               // 'json' 'count'
       || lk == 54952               // 'json' 'decimal-format'
       || lk == 55976               // 'json' 'declare'
       || lk == 56488               // 'json' 'default'
       || lk == 57000               // 'json' 'delete'
       || lk == 57512               // 'json' 'descendant'
       || lk == 58024               // 'json' 'descendant-or-self'
       || lk == 58536               // 'json' 'descending'
       || lk == 61096               // 'json' 'div'
       || lk == 61608               // 'json' 'document'
       || lk == 62120               // 'json' 'document-node'
       || lk == 62632               // 'json' 'element'
       || lk == 63144               // 'json' 'else'
       || lk == 63656               // 'json' 'empty'
       || lk == 64168               // 'json' 'empty-sequence'
       || lk == 64680               // 'json' 'encoding'
       || lk == 65192               // 'json' 'end'
       || lk == 66216               // 'json' 'eq'
       || lk == 66728               // 'json' 'every'
       || lk == 67752               // 'json' 'except'
       || lk == 68264               // 'json' 'exit'
       || lk == 68776               // 'json' 'external'
       || lk == 69288               // 'json' 'false'
       || lk == 69800               // 'json' 'first'
       || lk == 70312               // 'json' 'following'
       || lk == 70824               // 'json' 'following-sibling'
       || lk == 71336               // 'json' 'for'
       || lk == 72872               // 'json' 'from'
       || lk == 73384               // 'json' 'ft-option'
       || lk == 75432               // 'json' 'function'
       || lk == 75944               // 'json' 'ge'
       || lk == 76968               // 'json' 'group'
       || lk == 77992               // 'json' 'gt'
       || lk == 78504               // 'json' 'idiv'
       || lk == 79016               // 'json' 'if'
       || lk == 79528               // 'json' 'import'
       || lk == 80040               // 'json' 'in'
       || lk == 80552               // 'json' 'index'
       || lk == 82600               // 'json' 'insert'
       || lk == 83112               // 'json' 'instance'
       || lk == 83624               // 'json' 'integrity'
       || lk == 84136               // 'json' 'intersect'
       || lk == 84648               // 'json' 'into'
       || lk == 85160               // 'json' 'is'
       || lk == 85672               // 'json' 'item'
       || lk == 86184               // 'json' 'json'
       || lk == 86696               // 'json' 'json-item'
       || lk == 87208               // 'json' 'jsoniq'
       || lk == 88744               // 'json' 'last'
       || lk == 89256               // 'json' 'lax'
       || lk == 89768               // 'json' 'le'
       || lk == 90792               // 'json' 'let'
       || lk == 91816               // 'json' 'loop'
       || lk == 92840               // 'json' 'lt'
       || lk == 93864               // 'json' 'mod'
       || lk == 94376               // 'json' 'modify'
       || lk == 94888               // 'json' 'module'
       || lk == 95912               // 'json' 'namespace'
       || lk == 96424               // 'json' 'namespace-node'
       || lk == 96936               // 'json' 'ne'
       || lk == 99496               // 'json' 'node'
       || lk == 100008              // 'json' 'nodes'
       || lk == 100520              // 'json' 'not'
       || lk == 101032              // 'json' 'null'
       || lk == 101544              // 'json' 'object'
       || lk == 103592              // 'json' 'only'
       || lk == 104104              // 'json' 'option'
       || lk == 104616              // 'json' 'or'
       || lk == 105128              // 'json' 'order'
       || lk == 105640              // 'json' 'ordered'
       || lk == 106152              // 'json' 'ordering'
       || lk == 107688              // 'json' 'parent'
       || lk == 110760              // 'json' 'preceding'
       || lk == 111272              // 'json' 'preceding-sibling'
       || lk == 112808              // 'json' 'processing-instruction'
       || lk == 113832              // 'json' 'rename'
       || lk == 114344              // 'json' 'replace'
       || lk == 114856              // 'json' 'return'
       || lk == 115368              // 'json' 'returning'
       || lk == 115880              // 'json' 'revalidation'
       || lk == 116904              // 'json' 'satisfies'
       || lk == 117416              // 'json' 'schema'
       || lk == 117928              // 'json' 'schema-attribute'
       || lk == 118440              // 'json' 'schema-element'
       || lk == 118952              // 'json' 'score'
       || lk == 119464              // 'json' 'select'
       || lk == 119976              // 'json' 'self'
       || lk == 122536              // 'json' 'sliding'
       || lk == 123048              // 'json' 'some'
       || lk == 123560              // 'json' 'stable'
       || lk == 124072              // 'json' 'start'
       || lk == 125608              // 'json' 'strict'
       || lk == 126632              // 'json' 'structured-item'
       || lk == 127144              // 'json' 'switch'
       || lk == 127656              // 'json' 'text'
       || lk == 129704              // 'json' 'to'
       || lk == 130216              // 'json' 'treat'
       || lk == 130728              // 'json' 'true'
       || lk == 131240              // 'json' 'try'
       || lk == 131752              // 'json' 'tumbling'
       || lk == 132264              // 'json' 'type'
       || lk == 132776              // 'json' 'typeswitch'
       || lk == 133288              // 'json' 'union'
       || lk == 134312              // 'json' 'unordered'
       || lk == 134824              // 'json' 'updating'
       || lk == 136360              // 'json' 'validate'
       || lk == 136872              // 'json' 'value'
       || lk == 137384              // 'json' 'variable'
       || lk == 137896              // 'json' 'version'
       || lk == 139432              // 'json' 'where'
       || lk == 139944              // 'json' 'while'
       || lk == 141480              // 'json' 'with'
       || lk == 144040              // 'json' '{'
       || lk == 145064)             // 'json' '{|'
      {
        shiftT(168);                // 'json'
      }
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_ExprSingle();
      shiftT(165);                  // 'into'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_ExprSingle();
      switch (l1)
      {
      case 82:                      // 'at'
        lookahead2W(72);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 110162)             // 'at' 'position'
      {
        lk = memoized(14, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(82);             // 'at'
            lookahead1W(72);        // S^WS | '(:' | 'position'
            shiftT(215);            // 'position'
            lookahead1W(267);       // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
            try_ExprSingle();
            memoize(14, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(14, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1)
      {
        shiftT(82);                 // 'at'
        lookahead1W(72);            // S^WS | '(:' | 'position'
        shiftT(215);                // 'position'
        lookahead1W(267);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        try_ExprSingle();
      }
      break;
    case -3:
      break;
    default:
      shiftT(161);                  // 'insert'
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      switch (l1)
      {
      case 168:                     // 'json'
        lookahead2W(282);           // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
        break;
      default:
        lk = l1;
      }
      if (lk == 18088)              // 'json' '('
      {
        lk = memoized(15, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(168);            // 'json'
            memoize(15, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(15, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1
       || lk == 3240                // 'json' EQName^Token
       || lk == 4264                // 'json' IntegerLiteral
       || lk == 4776                // 'json' DecimalLiteral
       || lk == 5288                // 'json' DoubleLiteral
       || lk == 5800                // 'json' StringLiteral
       || lk == 9896                // 'json' NCName^Token
       || lk == 16040               // 'json' '$'
       || lk == 16552               // 'json' '$$'
       || lk == 17064               // 'json' '%'
       || lk == 18600               // 'json' '(#'
       || lk == 21160               // 'json' '+'
       || lk == 22184               // 'json' '-'
       || lk == 24232               // 'json' '/'
       || lk == 24744               // 'json' '//'
       || lk == 28328               // 'json' '<'
       || lk == 28840               // 'json' '<!--'
       || lk == 30888               // 'json' '<?'
       || lk == 35496               // 'json' '['
       || lk == 36520               // 'json' 'after'
       || lk == 37544               // 'json' 'allowing'
       || lk == 38056               // 'json' 'ancestor'
       || lk == 38568               // 'json' 'ancestor-or-self'
       || lk == 39080               // 'json' 'and'
       || lk == 40104               // 'json' 'append'
       || lk == 40616               // 'json' 'array'
       || lk == 41128               // 'json' 'as'
       || lk == 41640               // 'json' 'ascending'
       || lk == 42152               // 'json' 'at'
       || lk == 42664               // 'json' 'attribute'
       || lk == 43176               // 'json' 'base-uri'
       || lk == 43688               // 'json' 'before'
       || lk == 44200               // 'json' 'boundary-space'
       || lk == 44712               // 'json' 'break'
       || lk == 45736               // 'json' 'case'
       || lk == 46248               // 'json' 'cast'
       || lk == 46760               // 'json' 'castable'
       || lk == 47272               // 'json' 'catch'
       || lk == 48296               // 'json' 'child'
       || lk == 48808               // 'json' 'collation'
       || lk == 49832               // 'json' 'comment'
       || lk == 50344               // 'json' 'constraint'
       || lk == 50856               // 'json' 'construction'
       || lk == 52392               // 'json' 'context'
       || lk == 52904               // 'json' 'continue'
       || lk == 53416               // 'json' 'copy'
       || lk == 53928               // 'json' 'copy-namespaces'
       || lk == 54440               // 'json' 'count'
       || lk == 54952               // 'json' 'decimal-format'
       || lk == 55976               // 'json' 'declare'
       || lk == 56488               // 'json' 'default'
       || lk == 57000               // 'json' 'delete'
       || lk == 57512               // 'json' 'descendant'
       || lk == 58024               // 'json' 'descendant-or-self'
       || lk == 58536               // 'json' 'descending'
       || lk == 61096               // 'json' 'div'
       || lk == 61608               // 'json' 'document'
       || lk == 62120               // 'json' 'document-node'
       || lk == 62632               // 'json' 'element'
       || lk == 63144               // 'json' 'else'
       || lk == 63656               // 'json' 'empty'
       || lk == 64168               // 'json' 'empty-sequence'
       || lk == 64680               // 'json' 'encoding'
       || lk == 65192               // 'json' 'end'
       || lk == 66216               // 'json' 'eq'
       || lk == 66728               // 'json' 'every'
       || lk == 67752               // 'json' 'except'
       || lk == 68264               // 'json' 'exit'
       || lk == 68776               // 'json' 'external'
       || lk == 69288               // 'json' 'false'
       || lk == 69800               // 'json' 'first'
       || lk == 70312               // 'json' 'following'
       || lk == 70824               // 'json' 'following-sibling'
       || lk == 71336               // 'json' 'for'
       || lk == 72872               // 'json' 'from'
       || lk == 73384               // 'json' 'ft-option'
       || lk == 75432               // 'json' 'function'
       || lk == 75944               // 'json' 'ge'
       || lk == 76968               // 'json' 'group'
       || lk == 77992               // 'json' 'gt'
       || lk == 78504               // 'json' 'idiv'
       || lk == 79016               // 'json' 'if'
       || lk == 79528               // 'json' 'import'
       || lk == 80040               // 'json' 'in'
       || lk == 80552               // 'json' 'index'
       || lk == 82600               // 'json' 'insert'
       || lk == 83112               // 'json' 'instance'
       || lk == 83624               // 'json' 'integrity'
       || lk == 84136               // 'json' 'intersect'
       || lk == 84648               // 'json' 'into'
       || lk == 85160               // 'json' 'is'
       || lk == 85672               // 'json' 'item'
       || lk == 86184               // 'json' 'json'
       || lk == 86696               // 'json' 'json-item'
       || lk == 87208               // 'json' 'jsoniq'
       || lk == 88744               // 'json' 'last'
       || lk == 89256               // 'json' 'lax'
       || lk == 89768               // 'json' 'le'
       || lk == 90792               // 'json' 'let'
       || lk == 91816               // 'json' 'loop'
       || lk == 92840               // 'json' 'lt'
       || lk == 93864               // 'json' 'mod'
       || lk == 94376               // 'json' 'modify'
       || lk == 94888               // 'json' 'module'
       || lk == 95912               // 'json' 'namespace'
       || lk == 96424               // 'json' 'namespace-node'
       || lk == 96936               // 'json' 'ne'
       || lk == 99496               // 'json' 'node'
       || lk == 100008              // 'json' 'nodes'
       || lk == 100520              // 'json' 'not'
       || lk == 101032              // 'json' 'null'
       || lk == 101544              // 'json' 'object'
       || lk == 103592              // 'json' 'only'
       || lk == 104104              // 'json' 'option'
       || lk == 104616              // 'json' 'or'
       || lk == 105128              // 'json' 'order'
       || lk == 105640              // 'json' 'ordered'
       || lk == 106152              // 'json' 'ordering'
       || lk == 107688              // 'json' 'parent'
       || lk == 110760              // 'json' 'preceding'
       || lk == 111272              // 'json' 'preceding-sibling'
       || lk == 112808              // 'json' 'processing-instruction'
       || lk == 113832              // 'json' 'rename'
       || lk == 114344              // 'json' 'replace'
       || lk == 114856              // 'json' 'return'
       || lk == 115368              // 'json' 'returning'
       || lk == 115880              // 'json' 'revalidation'
       || lk == 116904              // 'json' 'satisfies'
       || lk == 117416              // 'json' 'schema'
       || lk == 117928              // 'json' 'schema-attribute'
       || lk == 118440              // 'json' 'schema-element'
       || lk == 118952              // 'json' 'score'
       || lk == 119464              // 'json' 'select'
       || lk == 119976              // 'json' 'self'
       || lk == 122536              // 'json' 'sliding'
       || lk == 123048              // 'json' 'some'
       || lk == 123560              // 'json' 'stable'
       || lk == 124072              // 'json' 'start'
       || lk == 125608              // 'json' 'strict'
       || lk == 126632              // 'json' 'structured-item'
       || lk == 127144              // 'json' 'switch'
       || lk == 127656              // 'json' 'text'
       || lk == 129704              // 'json' 'to'
       || lk == 130216              // 'json' 'treat'
       || lk == 130728              // 'json' 'true'
       || lk == 131240              // 'json' 'try'
       || lk == 131752              // 'json' 'tumbling'
       || lk == 132264              // 'json' 'type'
       || lk == 132776              // 'json' 'typeswitch'
       || lk == 133288              // 'json' 'union'
       || lk == 134312              // 'json' 'unordered'
       || lk == 134824              // 'json' 'updating'
       || lk == 136360              // 'json' 'validate'
       || lk == 136872              // 'json' 'value'
       || lk == 137384              // 'json' 'variable'
       || lk == 137896              // 'json' 'version'
       || lk == 139432              // 'json' 'where'
       || lk == 139944              // 'json' 'while'
       || lk == 141480              // 'json' 'with'
       || lk == 144040              // 'json' '{'
       || lk == 145064)             // 'json' '{|'
      {
        shiftT(168);                // 'json'
      }
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_PairConstructorList();
      shiftT(165);                  // 'into'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    shift(222);                     // 'rename'
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(261);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(16, e0, lk);
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 40616                 // 'json' 'array'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62120                 // 'json' 'document-node'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64168                 // 'json' 'empty-sequence'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 85672                 // 'json' 'item'
     || lk == 86184                 // 'json' 'json'
     || lk == 86696                 // 'json' 'json-item'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96424                 // 'json' 'namespace-node'
     || lk == 96936                 // 'json' 'ne'
     || lk == 99496                 // 'json' 'node'
     || lk == 100008                // 'json' 'nodes'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 117928                // 'json' 'schema-attribute'
     || lk == 118440                // 'json' 'schema-element'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 126632                // 'json' 'structured-item'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shift(168);                   // 'json'
    }
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_PostfixExpr();
    shift(80);                      // 'as'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    shiftT(222);                    // 'rename'
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(261);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          memoize(16, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(16, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 40616                 // 'json' 'array'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62120                 // 'json' 'document-node'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64168                 // 'json' 'empty-sequence'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 85672                 // 'json' 'item'
     || lk == 86184                 // 'json' 'json'
     || lk == 86696                 // 'json' 'json-item'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96424                 // 'json' 'namespace-node'
     || lk == 96936                 // 'json' 'ne'
     || lk == 99496                 // 'json' 'node'
     || lk == 100008                // 'json' 'nodes'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 117928                // 'json' 'schema-attribute'
     || lk == 118440                // 'json' 'schema-element'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 126632                // 'json' 'structured-item'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shiftT(168);                  // 'json'
    }
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_PostfixExpr();
    shiftT(80);                     // 'as'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    shift(223);                     // 'replace'
    lookahead1W(85);                // S^WS | '(:' | 'value'
    shift(267);                     // 'value'
    lookahead1W(67);                // S^WS | '(:' | 'of'
    shift(200);                     // 'of'
    lookahead1W(59);                // S^WS | '(:' | 'json'
    shift(168);                     // 'json'
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_PostfixExpr();
    shift(276);                     // 'with'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    shiftT(223);                    // 'replace'
    lookahead1W(85);                // S^WS | '(:' | 'value'
    shiftT(267);                    // 'value'
    lookahead1W(67);                // S^WS | '(:' | 'of'
    shiftT(200);                    // 'of'
    lookahead1W(59);                // S^WS | '(:' | 'json'
    shiftT(168);                    // 'json'
    lookahead1W(260);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_PostfixExpr();
    shiftT(276);                    // 'with'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    shift(78);                      // 'append'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(269);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(17, e0, lk);
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 18600                 // 'json' '(#'
     || lk == 21160                 // 'json' '+'
     || lk == 22184                 // 'json' '-'
     || lk == 24232                 // 'json' '/'
     || lk == 24744                 // 'json' '//'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 40616                 // 'json' 'array'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62120                 // 'json' 'document-node'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64168                 // 'json' 'empty-sequence'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 85672                 // 'json' 'item'
     || lk == 86184                 // 'json' 'json'
     || lk == 86696                 // 'json' 'json-item'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96424                 // 'json' 'namespace-node'
     || lk == 96936                 // 'json' 'ne'
     || lk == 99496                 // 'json' 'node'
     || lk == 100008                // 'json' 'nodes'
     || lk == 100520                // 'json' 'not'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 117928                // 'json' 'schema-attribute'
     || lk == 118440                // 'json' 'schema-element'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 126632                // 'json' 'structured-item'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shift(168);                   // 'json'
    }
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    shift(165);                     // 'into'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    shiftT(78);                     // 'append'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    switch (l1)
    {
    case 168:                       // 'json'
      lookahead2W(269);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 18088)                // 'json' '('
    {
      lk = memoized(17, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(168);              // 'json'
          memoize(17, e0A, -1);
        }
        catch (p1A)
        {
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(17, e0A, -2);
        }
        lk = -2;
      }
    }
    if (lk == -1
     || lk == 3240                  // 'json' EQName^Token
     || lk == 4264                  // 'json' IntegerLiteral
     || lk == 4776                  // 'json' DecimalLiteral
     || lk == 5288                  // 'json' DoubleLiteral
     || lk == 5800                  // 'json' StringLiteral
     || lk == 16040                 // 'json' '$'
     || lk == 16552                 // 'json' '$$'
     || lk == 17064                 // 'json' '%'
     || lk == 18600                 // 'json' '(#'
     || lk == 21160                 // 'json' '+'
     || lk == 22184                 // 'json' '-'
     || lk == 24232                 // 'json' '/'
     || lk == 24744                 // 'json' '//'
     || lk == 28328                 // 'json' '<'
     || lk == 28840                 // 'json' '<!--'
     || lk == 30888                 // 'json' '<?'
     || lk == 35496                 // 'json' '['
     || lk == 36520                 // 'json' 'after'
     || lk == 37544                 // 'json' 'allowing'
     || lk == 38056                 // 'json' 'ancestor'
     || lk == 38568                 // 'json' 'ancestor-or-self'
     || lk == 39080                 // 'json' 'and'
     || lk == 40104                 // 'json' 'append'
     || lk == 40616                 // 'json' 'array'
     || lk == 41128                 // 'json' 'as'
     || lk == 41640                 // 'json' 'ascending'
     || lk == 42152                 // 'json' 'at'
     || lk == 42664                 // 'json' 'attribute'
     || lk == 43176                 // 'json' 'base-uri'
     || lk == 43688                 // 'json' 'before'
     || lk == 44200                 // 'json' 'boundary-space'
     || lk == 44712                 // 'json' 'break'
     || lk == 45736                 // 'json' 'case'
     || lk == 46248                 // 'json' 'cast'
     || lk == 46760                 // 'json' 'castable'
     || lk == 47272                 // 'json' 'catch'
     || lk == 48296                 // 'json' 'child'
     || lk == 48808                 // 'json' 'collation'
     || lk == 49832                 // 'json' 'comment'
     || lk == 50344                 // 'json' 'constraint'
     || lk == 50856                 // 'json' 'construction'
     || lk == 52392                 // 'json' 'context'
     || lk == 52904                 // 'json' 'continue'
     || lk == 53416                 // 'json' 'copy'
     || lk == 53928                 // 'json' 'copy-namespaces'
     || lk == 54440                 // 'json' 'count'
     || lk == 54952                 // 'json' 'decimal-format'
     || lk == 55976                 // 'json' 'declare'
     || lk == 56488                 // 'json' 'default'
     || lk == 57000                 // 'json' 'delete'
     || lk == 57512                 // 'json' 'descendant'
     || lk == 58024                 // 'json' 'descendant-or-self'
     || lk == 58536                 // 'json' 'descending'
     || lk == 61096                 // 'json' 'div'
     || lk == 61608                 // 'json' 'document'
     || lk == 62120                 // 'json' 'document-node'
     || lk == 62632                 // 'json' 'element'
     || lk == 63144                 // 'json' 'else'
     || lk == 63656                 // 'json' 'empty'
     || lk == 64168                 // 'json' 'empty-sequence'
     || lk == 64680                 // 'json' 'encoding'
     || lk == 65192                 // 'json' 'end'
     || lk == 66216                 // 'json' 'eq'
     || lk == 66728                 // 'json' 'every'
     || lk == 67752                 // 'json' 'except'
     || lk == 68264                 // 'json' 'exit'
     || lk == 68776                 // 'json' 'external'
     || lk == 69288                 // 'json' 'false'
     || lk == 69800                 // 'json' 'first'
     || lk == 70312                 // 'json' 'following'
     || lk == 70824                 // 'json' 'following-sibling'
     || lk == 71336                 // 'json' 'for'
     || lk == 72872                 // 'json' 'from'
     || lk == 73384                 // 'json' 'ft-option'
     || lk == 75432                 // 'json' 'function'
     || lk == 75944                 // 'json' 'ge'
     || lk == 76968                 // 'json' 'group'
     || lk == 77992                 // 'json' 'gt'
     || lk == 78504                 // 'json' 'idiv'
     || lk == 79016                 // 'json' 'if'
     || lk == 79528                 // 'json' 'import'
     || lk == 80040                 // 'json' 'in'
     || lk == 80552                 // 'json' 'index'
     || lk == 82600                 // 'json' 'insert'
     || lk == 83112                 // 'json' 'instance'
     || lk == 83624                 // 'json' 'integrity'
     || lk == 84136                 // 'json' 'intersect'
     || lk == 84648                 // 'json' 'into'
     || lk == 85160                 // 'json' 'is'
     || lk == 85672                 // 'json' 'item'
     || lk == 86184                 // 'json' 'json'
     || lk == 86696                 // 'json' 'json-item'
     || lk == 87208                 // 'json' 'jsoniq'
     || lk == 88744                 // 'json' 'last'
     || lk == 89256                 // 'json' 'lax'
     || lk == 89768                 // 'json' 'le'
     || lk == 90792                 // 'json' 'let'
     || lk == 91816                 // 'json' 'loop'
     || lk == 92840                 // 'json' 'lt'
     || lk == 93864                 // 'json' 'mod'
     || lk == 94376                 // 'json' 'modify'
     || lk == 94888                 // 'json' 'module'
     || lk == 95912                 // 'json' 'namespace'
     || lk == 96424                 // 'json' 'namespace-node'
     || lk == 96936                 // 'json' 'ne'
     || lk == 99496                 // 'json' 'node'
     || lk == 100008                // 'json' 'nodes'
     || lk == 100520                // 'json' 'not'
     || lk == 101032                // 'json' 'null'
     || lk == 101544                // 'json' 'object'
     || lk == 103592                // 'json' 'only'
     || lk == 104104                // 'json' 'option'
     || lk == 104616                // 'json' 'or'
     || lk == 105128                // 'json' 'order'
     || lk == 105640                // 'json' 'ordered'
     || lk == 106152                // 'json' 'ordering'
     || lk == 107688                // 'json' 'parent'
     || lk == 110760                // 'json' 'preceding'
     || lk == 111272                // 'json' 'preceding-sibling'
     || lk == 112808                // 'json' 'processing-instruction'
     || lk == 113832                // 'json' 'rename'
     || lk == 114344                // 'json' 'replace'
     || lk == 114856                // 'json' 'return'
     || lk == 115368                // 'json' 'returning'
     || lk == 115880                // 'json' 'revalidation'
     || lk == 116904                // 'json' 'satisfies'
     || lk == 117416                // 'json' 'schema'
     || lk == 117928                // 'json' 'schema-attribute'
     || lk == 118440                // 'json' 'schema-element'
     || lk == 118952                // 'json' 'score'
     || lk == 119464                // 'json' 'select'
     || lk == 119976                // 'json' 'self'
     || lk == 122536                // 'json' 'sliding'
     || lk == 123048                // 'json' 'some'
     || lk == 123560                // 'json' 'stable'
     || lk == 124072                // 'json' 'start'
     || lk == 125608                // 'json' 'strict'
     || lk == 126632                // 'json' 'structured-item'
     || lk == 127144                // 'json' 'switch'
     || lk == 127656                // 'json' 'text'
     || lk == 129704                // 'json' 'to'
     || lk == 130216                // 'json' 'treat'
     || lk == 130728                // 'json' 'true'
     || lk == 131240                // 'json' 'try'
     || lk == 131752                // 'json' 'tumbling'
     || lk == 132264                // 'json' 'type'
     || lk == 132776                // 'json' 'typeswitch'
     || lk == 133288                // 'json' 'union'
     || lk == 134312                // 'json' 'unordered'
     || lk == 134824                // 'json' 'updating'
     || lk == 136360                // 'json' 'validate'
     || lk == 136872                // 'json' 'value'
     || lk == 137384                // 'json' 'variable'
     || lk == 137896                // 'json' 'version'
     || lk == 139432                // 'json' 'where'
     || lk == 139944                // 'json' 'while'
     || lk == 141480                // 'json' 'with'
     || lk == 144040                // 'json' '{'
     || lk == 145064)               // 'json' '{|'
    {
      shiftT(168);                  // 'json'
    }
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
    shiftT(165);                    // 'into'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      shift(12);                    // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      shift(23);                    // CharRef
      break;
    case 282:                       // '{{'
      shift(282);                   // '{{'
      break;
    case 288:                       // '}}'
      shift(288);                   // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      shiftT(12);                   // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      shiftT(23);                   // CharRef
      break;
    case 282:                       // '{{'
      shiftT(282);                  // '{{'
      break;
    case 288:                       // '}}'
      shiftT(288);                  // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    shift(120);                     // 'document'
    lookahead1W(90);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    shiftT(120);                    // 'document'
    lookahead1W(90);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    shift(83);                      // 'attribute'
    lookahead1W(250);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_Expr();
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(90);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      lookahead2W(281);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 147225)               // '{' '}'
    {
      lk = memoized(18, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(281);              // '{'
          lookahead1W(91);          // S^WS | '(:' | '}'
          shiftT(287);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(18, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(281);                   // '{'
      lookahead1W(91);              // S^WS | '(:' | '}'
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    shiftT(83);                     // 'attribute'
    lookahead1W(250);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 281:                       // '{'
      shiftT(281);                  // '{'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_Expr();
      shiftT(287);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(90);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      lookahead2W(281);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 147225)               // '{' '}'
    {
      lk = memoized(18, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(281);              // '{'
          lookahead1W(91);          // S^WS | '(:' | '}'
          shiftT(287);              // '}'
          memoize(18, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(18, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(281);                  // '{'
      lookahead1W(91);              // S^WS | '(:' | '}'
      shiftT(287);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    shift(220);                     // 'processing-instruction'
    lookahead1W(242);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_Expr();
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(90);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      lookahead2W(281);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 147225)               // '{' '}'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(281);              // '{'
          lookahead1W(91);          // S^WS | '(:' | '}'
          shiftT(287);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(19, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(281);                   // '{'
      lookahead1W(91);              // S^WS | '(:' | '}'
      shift(287);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    shiftT(220);                    // 'processing-instruction'
    lookahead1W(242);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 281:                       // '{'
      shiftT(281);                  // '{'
      lookahead1W(267);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_Expr();
      shiftT(287);                  // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(90);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      lookahead2W(281);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 147225)               // '{' '}'
    {
      lk = memoized(19, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(281);              // '{'
          lookahead1W(91);          // S^WS | '(:' | '}'
          shiftT(287);              // '}'
          memoize(19, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(19, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(281);                  // '{'
      lookahead1W(91);              // S^WS | '(:' | '}'
      shiftT(287);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    shift(97);                      // 'comment'
    lookahead1W(90);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    shiftT(97);                     // 'comment'
    lookahead1W(90);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    shift(249);                     // 'text'
    lookahead1W(90);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    shiftT(249);                    // 'text'
    lookahead1W(90);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 187:                       // 'namespace'
      lookahead2W(247);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 220:                       // 'processing-instruction'
      lookahead2W(245);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 281:                       // '{'
      lookahead2W(283);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 83:                        // 'attribute'
    case 122:                       // 'element'
      lookahead2W(253);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 97:                        // 'comment'
    case 249:                       // 'text'
      lookahead2W(97);              // S^WS | '#' | '(:' | '{'
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 262:                       // 'unordered'
      lookahead2W(148);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 161:                       // 'insert'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 222:                       // 'rename'
    case 223:                       // 'replace'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 240:                       // 'some'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(95);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 3353                  // '{' EQName^Token
     || lk == 4377                  // '{' IntegerLiteral
     || lk == 4889                  // '{' DecimalLiteral
     || lk == 5401                  // '{' DoubleLiteral
     || lk == 5913                  // '{' StringLiteral
     || lk == 16153                 // '{' '$'
     || lk == 16665                 // '{' '$$'
     || lk == 17177                 // '{' '%'
     || lk == 18055                 // 'false' '('
     || lk == 18117                 // 'null' '('
     || lk == 18175                 // 'true' '('
     || lk == 18201                 // '{' '('
     || lk == 18713                 // '{' '(#'
     || lk == 21273                 // '{' '+'
     || lk == 22297                 // '{' '-'
     || lk == 24345                 // '{' '/'
     || lk == 24857                 // '{' '//'
     || lk == 28441                 // '{' '<'
     || lk == 28953                 // '{' '<!--'
     || lk == 31001                 // '{' '<?'
     || lk == 35609                 // '{' '['
     || lk == 36633                 // '{' 'after'
     || lk == 37657                 // '{' 'allowing'
     || lk == 38169                 // '{' 'ancestor'
     || lk == 38681                 // '{' 'ancestor-or-self'
     || lk == 39193                 // '{' 'and'
     || lk == 40217                 // '{' 'append'
     || lk == 40729                 // '{' 'array'
     || lk == 41241                 // '{' 'as'
     || lk == 41753                 // '{' 'ascending'
     || lk == 42265                 // '{' 'at'
     || lk == 42777                 // '{' 'attribute'
     || lk == 43289                 // '{' 'base-uri'
     || lk == 43801                 // '{' 'before'
     || lk == 44313                 // '{' 'boundary-space'
     || lk == 44825                 // '{' 'break'
     || lk == 45849                 // '{' 'case'
     || lk == 46361                 // '{' 'cast'
     || lk == 46873                 // '{' 'castable'
     || lk == 47385                 // '{' 'catch'
     || lk == 48409                 // '{' 'child'
     || lk == 48921                 // '{' 'collation'
     || lk == 49945                 // '{' 'comment'
     || lk == 50457                 // '{' 'constraint'
     || lk == 50969                 // '{' 'construction'
     || lk == 52505                 // '{' 'context'
     || lk == 53017                 // '{' 'continue'
     || lk == 53529                 // '{' 'copy'
     || lk == 54041                 // '{' 'copy-namespaces'
     || lk == 54553                 // '{' 'count'
     || lk == 55065                 // '{' 'decimal-format'
     || lk == 56089                 // '{' 'declare'
     || lk == 56601                 // '{' 'default'
     || lk == 57113                 // '{' 'delete'
     || lk == 57625                 // '{' 'descendant'
     || lk == 58137                 // '{' 'descendant-or-self'
     || lk == 58649                 // '{' 'descending'
     || lk == 61209                 // '{' 'div'
     || lk == 61721                 // '{' 'document'
     || lk == 62233                 // '{' 'document-node'
     || lk == 62745                 // '{' 'element'
     || lk == 63257                 // '{' 'else'
     || lk == 63769                 // '{' 'empty'
     || lk == 64281                 // '{' 'empty-sequence'
     || lk == 64793                 // '{' 'encoding'
     || lk == 65305                 // '{' 'end'
     || lk == 66329                 // '{' 'eq'
     || lk == 66841                 // '{' 'every'
     || lk == 67865                 // '{' 'except'
     || lk == 68377                 // '{' 'exit'
     || lk == 68889                 // '{' 'external'
     || lk == 69401                 // '{' 'false'
     || lk == 69913                 // '{' 'first'
     || lk == 70425                 // '{' 'following'
     || lk == 70937                 // '{' 'following-sibling'
     || lk == 71449                 // '{' 'for'
     || lk == 72985                 // '{' 'from'
     || lk == 73497                 // '{' 'ft-option'
     || lk == 75545                 // '{' 'function'
     || lk == 76057                 // '{' 'ge'
     || lk == 77081                 // '{' 'group'
     || lk == 78105                 // '{' 'gt'
     || lk == 78617                 // '{' 'idiv'
     || lk == 79129                 // '{' 'if'
     || lk == 79641                 // '{' 'import'
     || lk == 80153                 // '{' 'in'
     || lk == 80665                 // '{' 'index'
     || lk == 82713                 // '{' 'insert'
     || lk == 83225                 // '{' 'instance'
     || lk == 83737                 // '{' 'integrity'
     || lk == 84249                 // '{' 'intersect'
     || lk == 84761                 // '{' 'into'
     || lk == 85273                 // '{' 'is'
     || lk == 85785                 // '{' 'item'
     || lk == 86297                 // '{' 'json'
     || lk == 86809                 // '{' 'json-item'
     || lk == 87321                 // '{' 'jsoniq'
     || lk == 88857                 // '{' 'last'
     || lk == 89369                 // '{' 'lax'
     || lk == 89881                 // '{' 'le'
     || lk == 90905                 // '{' 'let'
     || lk == 91929                 // '{' 'loop'
     || lk == 92953                 // '{' 'lt'
     || lk == 93977                 // '{' 'mod'
     || lk == 94489                 // '{' 'modify'
     || lk == 95001                 // '{' 'module'
     || lk == 96025                 // '{' 'namespace'
     || lk == 96537                 // '{' 'namespace-node'
     || lk == 97049                 // '{' 'ne'
     || lk == 99609                 // '{' 'node'
     || lk == 100121                // '{' 'nodes'
     || lk == 100633                // '{' 'not'
     || lk == 101145                // '{' 'null'
     || lk == 101657                // '{' 'object'
     || lk == 103705                // '{' 'only'
     || lk == 104217                // '{' 'option'
     || lk == 104729                // '{' 'or'
     || lk == 105241                // '{' 'order'
     || lk == 105753                // '{' 'ordered'
     || lk == 106265                // '{' 'ordering'
     || lk == 107801                // '{' 'parent'
     || lk == 110873                // '{' 'preceding'
     || lk == 111385                // '{' 'preceding-sibling'
     || lk == 112921                // '{' 'processing-instruction'
     || lk == 113945                // '{' 'rename'
     || lk == 114457                // '{' 'replace'
     || lk == 114969                // '{' 'return'
     || lk == 115481                // '{' 'returning'
     || lk == 115993                // '{' 'revalidation'
     || lk == 117017                // '{' 'satisfies'
     || lk == 117529                // '{' 'schema'
     || lk == 118041                // '{' 'schema-attribute'
     || lk == 118553                // '{' 'schema-element'
     || lk == 119065                // '{' 'score'
     || lk == 119577                // '{' 'select'
     || lk == 120089                // '{' 'self'
     || lk == 122649                // '{' 'sliding'
     || lk == 123161                // '{' 'some'
     || lk == 123673                // '{' 'stable'
     || lk == 124185                // '{' 'start'
     || lk == 125721                // '{' 'strict'
     || lk == 126745                // '{' 'structured-item'
     || lk == 127257                // '{' 'switch'
     || lk == 127769                // '{' 'text'
     || lk == 129817                // '{' 'to'
     || lk == 130329                // '{' 'treat'
     || lk == 130841                // '{' 'true'
     || lk == 131353                // '{' 'try'
     || lk == 131865                // '{' 'tumbling'
     || lk == 132377                // '{' 'type'
     || lk == 132889                // '{' 'typeswitch'
     || lk == 133401                // '{' 'union'
     || lk == 134425                // '{' 'unordered'
     || lk == 134937                // '{' 'updating'
     || lk == 136473                // '{' 'validate'
     || lk == 136985                // '{' 'value'
     || lk == 137497                // '{' 'variable'
     || lk == 138009                // '{' 'version'
     || lk == 139545                // '{' 'where'
     || lk == 140057                // '{' 'while'
     || lk == 141593                // '{' 'with'
     || lk == 144153                // '{' '{'
     || lk == 145177                // '{' '{|'
     || lk == 147225)               // '{' '}'
    {
      lk = memoized(20, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_Literal();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_FunctionCall();
            lk = -5;
          }
          catch (p5A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockExpr();
              lk = -10;
            }
            catch (p10A)
            {
              lk = -11;
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(20, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 12935:                     // 'false' EOF
    case 12997:                     // 'null' EOF
    case 13055:                     // 'true' EOF
    case 13447:                     // 'false' '!'
    case 13509:                     // 'null' '!'
    case 13567:                     // 'true' '!'
    case 13959:                     // 'false' '!='
    case 14021:                     // 'null' '!='
    case 14079:                     // 'true' '!='
    case 19591:                     // 'false' ')'
    case 19653:                     // 'null' ')'
    case 19711:                     // 'true' ')'
    case 20103:                     // 'false' '*'
    case 20165:                     // 'null' '*'
    case 20223:                     // 'true' '*'
    case 21127:                     // 'false' '+'
    case 21189:                     // 'null' '+'
    case 21247:                     // 'true' '+'
    case 21639:                     // 'false' ','
    case 21701:                     // 'null' ','
    case 21759:                     // 'true' ','
    case 22151:                     // 'false' '-'
    case 22213:                     // 'null' '-'
    case 22271:                     // 'true' '-'
    case 23175:                     // 'false' '.'
    case 23237:                     // 'null' '.'
    case 23295:                     // 'true' '.'
    case 24199:                     // 'false' '/'
    case 24261:                     // 'null' '/'
    case 24319:                     // 'true' '/'
    case 24711:                     // 'false' '//'
    case 24773:                     // 'null' '//'
    case 24831:                     // 'true' '//'
    case 25735:                     // 'false' ':'
    case 25797:                     // 'null' ':'
    case 25855:                     // 'true' ':'
    case 27783:                     // 'false' ';'
    case 27845:                     // 'null' ';'
    case 27903:                     // 'true' ';'
    case 28295:                     // 'false' '<'
    case 28357:                     // 'null' '<'
    case 28415:                     // 'true' '<'
    case 29831:                     // 'false' '<<'
    case 29893:                     // 'null' '<<'
    case 29951:                     // 'true' '<<'
    case 30343:                     // 'false' '<='
    case 30405:                     // 'null' '<='
    case 30463:                     // 'true' '<='
    case 31367:                     // 'false' '='
    case 31429:                     // 'null' '='
    case 31487:                     // 'true' '='
    case 31879:                     // 'false' '>'
    case 31941:                     // 'null' '>'
    case 31999:                     // 'true' '>'
    case 32391:                     // 'false' '>='
    case 32453:                     // 'null' '>='
    case 32511:                     // 'true' '>='
    case 32903:                     // 'false' '>>'
    case 32965:                     // 'null' '>>'
    case 33023:                     // 'true' '>>'
    case 35463:                     // 'false' '['
    case 35525:                     // 'null' '['
    case 35583:                     // 'true' '['
    case 35975:                     // 'false' ']'
    case 36037:                     // 'null' ']'
    case 36095:                     // 'true' ']'
    case 36487:                     // 'false' 'after'
    case 36549:                     // 'null' 'after'
    case 36607:                     // 'true' 'after'
    case 39047:                     // 'false' 'and'
    case 39109:                     // 'null' 'and'
    case 39167:                     // 'true' 'and'
    case 41095:                     // 'false' 'as'
    case 41157:                     // 'null' 'as'
    case 41215:                     // 'true' 'as'
    case 41607:                     // 'false' 'ascending'
    case 41669:                     // 'null' 'ascending'
    case 41727:                     // 'true' 'ascending'
    case 42119:                     // 'false' 'at'
    case 42181:                     // 'null' 'at'
    case 42239:                     // 'true' 'at'
    case 43655:                     // 'false' 'before'
    case 43717:                     // 'null' 'before'
    case 43775:                     // 'true' 'before'
    case 45191:                     // 'false' 'by'
    case 45253:                     // 'null' 'by'
    case 45311:                     // 'true' 'by'
    case 45703:                     // 'false' 'case'
    case 45765:                     // 'null' 'case'
    case 45823:                     // 'true' 'case'
    case 46215:                     // 'false' 'cast'
    case 46277:                     // 'null' 'cast'
    case 46335:                     // 'true' 'cast'
    case 46727:                     // 'false' 'castable'
    case 46789:                     // 'null' 'castable'
    case 46847:                     // 'true' 'castable'
    case 48775:                     // 'false' 'collation'
    case 48837:                     // 'null' 'collation'
    case 48895:                     // 'true' 'collation'
    case 51335:                     // 'false' 'contains'
    case 51397:                     // 'null' 'contains'
    case 51455:                     // 'true' 'contains'
    case 54407:                     // 'false' 'count'
    case 54469:                     // 'null' 'count'
    case 54527:                     // 'true' 'count'
    case 56455:                     // 'false' 'default'
    case 56517:                     // 'null' 'default'
    case 56575:                     // 'true' 'default'
    case 58503:                     // 'false' 'descending'
    case 58565:                     // 'null' 'descending'
    case 58623:                     // 'true' 'descending'
    case 61063:                     // 'false' 'div'
    case 61125:                     // 'null' 'div'
    case 61183:                     // 'true' 'div'
    case 63111:                     // 'false' 'else'
    case 63173:                     // 'null' 'else'
    case 63231:                     // 'true' 'else'
    case 63623:                     // 'false' 'empty'
    case 63685:                     // 'null' 'empty'
    case 63743:                     // 'true' 'empty'
    case 65159:                     // 'false' 'end'
    case 65221:                     // 'null' 'end'
    case 65279:                     // 'true' 'end'
    case 66183:                     // 'false' 'eq'
    case 66245:                     // 'null' 'eq'
    case 66303:                     // 'true' 'eq'
    case 67719:                     // 'false' 'except'
    case 67781:                     // 'null' 'except'
    case 67839:                     // 'true' 'except'
    case 71303:                     // 'false' 'for'
    case 71365:                     // 'null' 'for'
    case 71423:                     // 'true' 'for'
    case 75911:                     // 'false' 'ge'
    case 75973:                     // 'null' 'ge'
    case 76031:                     // 'true' 'ge'
    case 76935:                     // 'false' 'group'
    case 76997:                     // 'null' 'group'
    case 77055:                     // 'true' 'group'
    case 77959:                     // 'false' 'gt'
    case 78021:                     // 'null' 'gt'
    case 78079:                     // 'true' 'gt'
    case 78471:                     // 'false' 'idiv'
    case 78533:                     // 'null' 'idiv'
    case 78591:                     // 'true' 'idiv'
    case 83079:                     // 'false' 'instance'
    case 83141:                     // 'null' 'instance'
    case 83199:                     // 'true' 'instance'
    case 84103:                     // 'false' 'intersect'
    case 84165:                     // 'null' 'intersect'
    case 84223:                     // 'true' 'intersect'
    case 84615:                     // 'false' 'into'
    case 84677:                     // 'null' 'into'
    case 84735:                     // 'true' 'into'
    case 85127:                     // 'false' 'is'
    case 85189:                     // 'null' 'is'
    case 85247:                     // 'true' 'is'
    case 89735:                     // 'false' 'le'
    case 89797:                     // 'null' 'le'
    case 89855:                     // 'true' 'le'
    case 90759:                     // 'false' 'let'
    case 90821:                     // 'null' 'let'
    case 90879:                     // 'true' 'let'
    case 92807:                     // 'false' 'lt'
    case 92869:                     // 'null' 'lt'
    case 92927:                     // 'true' 'lt'
    case 93831:                     // 'false' 'mod'
    case 93893:                     // 'null' 'mod'
    case 93951:                     // 'true' 'mod'
    case 94343:                     // 'false' 'modify'
    case 94405:                     // 'null' 'modify'
    case 94463:                     // 'true' 'modify'
    case 96903:                     // 'false' 'ne'
    case 96965:                     // 'null' 'ne'
    case 97023:                     // 'true' 'ne'
    case 103559:                    // 'false' 'only'
    case 103621:                    // 'null' 'only'
    case 103679:                    // 'true' 'only'
    case 104583:                    // 'false' 'or'
    case 104645:                    // 'null' 'or'
    case 104703:                    // 'true' 'or'
    case 105095:                    // 'false' 'order'
    case 105157:                    // 'null' 'order'
    case 105215:                    // 'true' 'order'
    case 107143:                    // 'false' 'paragraphs'
    case 107205:                    // 'null' 'paragraphs'
    case 107263:                    // 'true' 'paragraphs'
    case 114823:                    // 'false' 'return'
    case 114885:                    // 'null' 'return'
    case 114943:                    // 'true' 'return'
    case 116871:                    // 'false' 'satisfies'
    case 116933:                    // 'null' 'satisfies'
    case 116991:                    // 'true' 'satisfies'
    case 121479:                    // 'false' 'sentences'
    case 121541:                    // 'null' 'sentences'
    case 121599:                    // 'true' 'sentences'
    case 123527:                    // 'false' 'stable'
    case 123589:                    // 'null' 'stable'
    case 123647:                    // 'true' 'stable'
    case 124039:                    // 'false' 'start'
    case 124101:                    // 'null' 'start'
    case 124159:                    // 'true' 'start'
    case 129159:                    // 'false' 'times'
    case 129221:                    // 'null' 'times'
    case 129279:                    // 'true' 'times'
    case 129671:                    // 'false' 'to'
    case 129733:                    // 'null' 'to'
    case 129791:                    // 'true' 'to'
    case 130183:                    // 'false' 'treat'
    case 130245:                    // 'null' 'treat'
    case 130303:                    // 'true' 'treat'
    case 133255:                    // 'false' 'union'
    case 133317:                    // 'null' 'union'
    case 133375:                    // 'true' 'union'
    case 139399:                    // 'false' 'where'
    case 139461:                    // 'null' 'where'
    case 139519:                    // 'true' 'where'
    case 141447:                    // 'false' 'with'
    case 141509:                    // 'null' 'with'
    case 141567:                    // 'true' 'with'
    case 142983:                    // 'false' 'words'
    case 143045:                    // 'null' 'words'
    case 143103:                    // 'true' 'words'
    case 145543:                    // 'false' '|'
    case 145605:                    // 'null' '|'
    case 145663:                    // 'true' '|'
    case 146055:                    // 'false' '||'
    case 146117:                    // 'null' '||'
    case 146175:                    // 'true' '||'
    case 146567:                    // 'false' '|}'
    case 146629:                    // 'null' '|}'
    case 146687:                    // 'true' '|}'
    case 147079:                    // 'false' '}'
    case 147141:                    // 'null' '}'
    case 147199:                    // 'true' '}'
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 32:                        // '$$'
      parse_ContextItemExpr();
      break;
    case -5:
    case 17926:                     // EQName^Token '('
    case 17991:                     // 'after' '('
    case 17993:                     // 'allowing' '('
    case 17994:                     // 'ancestor' '('
    case 17995:                     // 'ancestor-or-self' '('
    case 17996:                     // 'and' '('
    case 17998:                     // 'append' '('
    case 18000:                     // 'as' '('
    case 18001:                     // 'ascending' '('
    case 18002:                     // 'at' '('
    case 18004:                     // 'base-uri' '('
    case 18005:                     // 'before' '('
    case 18006:                     // 'boundary-space' '('
    case 18007:                     // 'break' '('
    case 18009:                     // 'case' '('
    case 18010:                     // 'cast' '('
    case 18011:                     // 'castable' '('
    case 18012:                     // 'catch' '('
    case 18014:                     // 'child' '('
    case 18015:                     // 'collation' '('
    case 18018:                     // 'constraint' '('
    case 18019:                     // 'construction' '('
    case 18022:                     // 'context' '('
    case 18023:                     // 'continue' '('
    case 18024:                     // 'copy' '('
    case 18025:                     // 'copy-namespaces' '('
    case 18026:                     // 'count' '('
    case 18027:                     // 'decimal-format' '('
    case 18029:                     // 'declare' '('
    case 18030:                     // 'default' '('
    case 18031:                     // 'delete' '('
    case 18032:                     // 'descendant' '('
    case 18033:                     // 'descendant-or-self' '('
    case 18034:                     // 'descending' '('
    case 18039:                     // 'div' '('
    case 18040:                     // 'document' '('
    case 18043:                     // 'else' '('
    case 18044:                     // 'empty' '('
    case 18046:                     // 'encoding' '('
    case 18047:                     // 'end' '('
    case 18049:                     // 'eq' '('
    case 18050:                     // 'every' '('
    case 18052:                     // 'except' '('
    case 18053:                     // 'exit' '('
    case 18054:                     // 'external' '('
    case 18056:                     // 'first' '('
    case 18057:                     // 'following' '('
    case 18058:                     // 'following-sibling' '('
    case 18059:                     // 'for' '('
    case 18062:                     // 'from' '('
    case 18063:                     // 'ft-option' '('
    case 18068:                     // 'ge' '('
    case 18070:                     // 'group' '('
    case 18072:                     // 'gt' '('
    case 18073:                     // 'idiv' '('
    case 18075:                     // 'import' '('
    case 18076:                     // 'in' '('
    case 18077:                     // 'index' '('
    case 18081:                     // 'insert' '('
    case 18082:                     // 'instance' '('
    case 18083:                     // 'integrity' '('
    case 18084:                     // 'intersect' '('
    case 18085:                     // 'into' '('
    case 18086:                     // 'is' '('
    case 18088:                     // 'json' '('
    case 18090:                     // 'jsoniq' '('
    case 18093:                     // 'last' '('
    case 18094:                     // 'lax' '('
    case 18095:                     // 'le' '('
    case 18097:                     // 'let' '('
    case 18099:                     // 'loop' '('
    case 18101:                     // 'lt' '('
    case 18103:                     // 'mod' '('
    case 18104:                     // 'modify' '('
    case 18105:                     // 'module' '('
    case 18107:                     // 'namespace' '('
    case 18109:                     // 'ne' '('
    case 18115:                     // 'nodes' '('
    case 18118:                     // 'object' '('
    case 18122:                     // 'only' '('
    case 18123:                     // 'option' '('
    case 18124:                     // 'or' '('
    case 18125:                     // 'order' '('
    case 18126:                     // 'ordered' '('
    case 18127:                     // 'ordering' '('
    case 18130:                     // 'parent' '('
    case 18136:                     // 'preceding' '('
    case 18137:                     // 'preceding-sibling' '('
    case 18142:                     // 'rename' '('
    case 18143:                     // 'replace' '('
    case 18144:                     // 'return' '('
    case 18145:                     // 'returning' '('
    case 18146:                     // 'revalidation' '('
    case 18148:                     // 'satisfies' '('
    case 18149:                     // 'schema' '('
    case 18152:                     // 'score' '('
    case 18153:                     // 'select' '('
    case 18154:                     // 'self' '('
    case 18159:                     // 'sliding' '('
    case 18160:                     // 'some' '('
    case 18161:                     // 'stable' '('
    case 18162:                     // 'start' '('
    case 18165:                     // 'strict' '('
    case 18173:                     // 'to' '('
    case 18174:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
      parse_FunctionCall();
      break;
    case 144078:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 144134:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 79:                        // 'array'
    case 121:                       // 'document-node'
    case 125:                       // 'empty-sequence'
    case 147:                       // 'function'
    case 154:                       // 'if'
    case 167:                       // 'item'
    case 169:                       // 'json-item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 247:                       // 'structured-item'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14931:                     // 'attribute' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14970:                     // 'element' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'false' '#'
    case 14984:                     // 'first' '#'
    case 14985:                     // 'following' '#'
    case 14986:                     // 'following-sibling' '#'
    case 14987:                     // 'for' '#'
    case 14990:                     // 'from' '#'
    case 14991:                     // 'ft-option' '#'
    case 14996:                     // 'ge' '#'
    case 14998:                     // 'group' '#'
    case 15000:                     // 'gt' '#'
    case 15001:                     // 'idiv' '#'
    case 15003:                     // 'import' '#'
    case 15004:                     // 'in' '#'
    case 15005:                     // 'index' '#'
    case 15009:                     // 'insert' '#'
    case 15010:                     // 'instance' '#'
    case 15011:                     // 'integrity' '#'
    case 15012:                     // 'intersect' '#'
    case 15013:                     // 'into' '#'
    case 15014:                     // 'is' '#'
    case 15016:                     // 'json' '#'
    case 15018:                     // 'jsoniq' '#'
    case 15021:                     // 'last' '#'
    case 15022:                     // 'lax' '#'
    case 15023:                     // 'le' '#'
    case 15025:                     // 'let' '#'
    case 15027:                     // 'loop' '#'
    case 15029:                     // 'lt' '#'
    case 15031:                     // 'mod' '#'
    case 15032:                     // 'modify' '#'
    case 15033:                     // 'module' '#'
    case 15035:                     // 'namespace' '#'
    case 15037:                     // 'ne' '#'
    case 15043:                     // 'nodes' '#'
    case 15045:                     // 'null' '#'
    case 15046:                     // 'object' '#'
    case 15050:                     // 'only' '#'
    case 15051:                     // 'option' '#'
    case 15052:                     // 'or' '#'
    case 15053:                     // 'order' '#'
    case 15054:                     // 'ordered' '#'
    case 15055:                     // 'ordering' '#'
    case 15058:                     // 'parent' '#'
    case 15064:                     // 'preceding' '#'
    case 15065:                     // 'preceding-sibling' '#'
    case 15068:                     // 'processing-instruction' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15072:                     // 'return' '#'
    case 15073:                     // 'returning' '#'
    case 15074:                     // 'revalidation' '#'
    case 15076:                     // 'satisfies' '#'
    case 15077:                     // 'schema' '#'
    case 15080:                     // 'score' '#'
    case 15081:                     // 'select' '#'
    case 15082:                     // 'self' '#'
    case 15087:                     // 'sliding' '#'
    case 15088:                     // 'some' '#'
    case 15089:                     // 'stable' '#'
    case 15090:                     // 'start' '#'
    case 15093:                     // 'strict' '#'
    case 15097:                     // 'text' '#'
    case 15101:                     // 'to' '#'
    case 15102:                     // 'treat' '#'
    case 15103:                     // 'true' '#'
    case 15104:                     // 'try' '#'
    case 15105:                     // 'tumbling' '#'
    case 15106:                     // 'type' '#'
    case 15108:                     // 'union' '#'
    case 15110:                     // 'unordered' '#'
    case 15111:                     // 'updating' '#'
    case 15114:                     // 'validate' '#'
    case 15115:                     // 'value' '#'
    case 15116:                     // 'variable' '#'
    case 15117:                     // 'version' '#'
    case 15120:                     // 'where' '#'
    case 15121:                     // 'while' '#'
    case 15124:                     // 'with' '#'
      parse_FunctionItemExpr();
      break;
    case -10:
    case 27929:                     // '{' ';'
      parse_BlockExpr();
      break;
    case -11:
    case 10009:                     // '{' NCName^Token
      parse_ObjectConstructor();
      break;
    case 69:                        // '['
      parse_ArrayConstructor();
      break;
    case 283:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 187:                       // 'namespace'
      lookahead2W(247);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 220:                       // 'processing-instruction'
      lookahead2W(245);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 281:                       // '{'
      lookahead2W(283);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 83:                        // 'attribute'
    case 122:                       // 'element'
      lookahead2W(253);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 97:                        // 'comment'
    case 249:                       // 'text'
      lookahead2W(97);              // S^WS | '#' | '(:' | '{'
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 262:                       // 'unordered'
      lookahead2W(148);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '.' |
      break;
    case 6:                         // EQName^Token
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 78:                        // 'append'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 104:                       // 'copy'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 111:                       // 'delete'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 130:                       // 'every'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 139:                       // 'for'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 161:                       // 'insert'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 177:                       // 'let'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 222:                       // 'rename'
    case 223:                       // 'replace'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 240:                       // 'some'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(95);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 3353                  // '{' EQName^Token
     || lk == 4377                  // '{' IntegerLiteral
     || lk == 4889                  // '{' DecimalLiteral
     || lk == 5401                  // '{' DoubleLiteral
     || lk == 5913                  // '{' StringLiteral
     || lk == 16153                 // '{' '$'
     || lk == 16665                 // '{' '$$'
     || lk == 17177                 // '{' '%'
     || lk == 18055                 // 'false' '('
     || lk == 18117                 // 'null' '('
     || lk == 18175                 // 'true' '('
     || lk == 18201                 // '{' '('
     || lk == 18713                 // '{' '(#'
     || lk == 21273                 // '{' '+'
     || lk == 22297                 // '{' '-'
     || lk == 24345                 // '{' '/'
     || lk == 24857                 // '{' '//'
     || lk == 28441                 // '{' '<'
     || lk == 28953                 // '{' '<!--'
     || lk == 31001                 // '{' '<?'
     || lk == 35609                 // '{' '['
     || lk == 36633                 // '{' 'after'
     || lk == 37657                 // '{' 'allowing'
     || lk == 38169                 // '{' 'ancestor'
     || lk == 38681                 // '{' 'ancestor-or-self'
     || lk == 39193                 // '{' 'and'
     || lk == 40217                 // '{' 'append'
     || lk == 40729                 // '{' 'array'
     || lk == 41241                 // '{' 'as'
     || lk == 41753                 // '{' 'ascending'
     || lk == 42265                 // '{' 'at'
     || lk == 42777                 // '{' 'attribute'
     || lk == 43289                 // '{' 'base-uri'
     || lk == 43801                 // '{' 'before'
     || lk == 44313                 // '{' 'boundary-space'
     || lk == 44825                 // '{' 'break'
     || lk == 45849                 // '{' 'case'
     || lk == 46361                 // '{' 'cast'
     || lk == 46873                 // '{' 'castable'
     || lk == 47385                 // '{' 'catch'
     || lk == 48409                 // '{' 'child'
     || lk == 48921                 // '{' 'collation'
     || lk == 49945                 // '{' 'comment'
     || lk == 50457                 // '{' 'constraint'
     || lk == 50969                 // '{' 'construction'
     || lk == 52505                 // '{' 'context'
     || lk == 53017                 // '{' 'continue'
     || lk == 53529                 // '{' 'copy'
     || lk == 54041                 // '{' 'copy-namespaces'
     || lk == 54553                 // '{' 'count'
     || lk == 55065                 // '{' 'decimal-format'
     || lk == 56089                 // '{' 'declare'
     || lk == 56601                 // '{' 'default'
     || lk == 57113                 // '{' 'delete'
     || lk == 57625                 // '{' 'descendant'
     || lk == 58137                 // '{' 'descendant-or-self'
     || lk == 58649                 // '{' 'descending'
     || lk == 61209                 // '{' 'div'
     || lk == 61721                 // '{' 'document'
     || lk == 62233                 // '{' 'document-node'
     || lk == 62745                 // '{' 'element'
     || lk == 63257                 // '{' 'else'
     || lk == 63769                 // '{' 'empty'
     || lk == 64281                 // '{' 'empty-sequence'
     || lk == 64793                 // '{' 'encoding'
     || lk == 65305                 // '{' 'end'
     || lk == 66329                 // '{' 'eq'
     || lk == 66841                 // '{' 'every'
     || lk == 67865                 // '{' 'except'
     || lk == 68377                 // '{' 'exit'
     || lk == 68889                 // '{' 'external'
     || lk == 69401                 // '{' 'false'
     || lk == 69913                 // '{' 'first'
     || lk == 70425                 // '{' 'following'
     || lk == 70937                 // '{' 'following-sibling'
     || lk == 71449                 // '{' 'for'
     || lk == 72985                 // '{' 'from'
     || lk == 73497                 // '{' 'ft-option'
     || lk == 75545                 // '{' 'function'
     || lk == 76057                 // '{' 'ge'
     || lk == 77081                 // '{' 'group'
     || lk == 78105                 // '{' 'gt'
     || lk == 78617                 // '{' 'idiv'
     || lk == 79129                 // '{' 'if'
     || lk == 79641                 // '{' 'import'
     || lk == 80153                 // '{' 'in'
     || lk == 80665                 // '{' 'index'
     || lk == 82713                 // '{' 'insert'
     || lk == 83225                 // '{' 'instance'
     || lk == 83737                 // '{' 'integrity'
     || lk == 84249                 // '{' 'intersect'
     || lk == 84761                 // '{' 'into'
     || lk == 85273                 // '{' 'is'
     || lk == 85785                 // '{' 'item'
     || lk == 86297                 // '{' 'json'
     || lk == 86809                 // '{' 'json-item'
     || lk == 87321                 // '{' 'jsoniq'
     || lk == 88857                 // '{' 'last'
     || lk == 89369                 // '{' 'lax'
     || lk == 89881                 // '{' 'le'
     || lk == 90905                 // '{' 'let'
     || lk == 91929                 // '{' 'loop'
     || lk == 92953                 // '{' 'lt'
     || lk == 93977                 // '{' 'mod'
     || lk == 94489                 // '{' 'modify'
     || lk == 95001                 // '{' 'module'
     || lk == 96025                 // '{' 'namespace'
     || lk == 96537                 // '{' 'namespace-node'
     || lk == 97049                 // '{' 'ne'
     || lk == 99609                 // '{' 'node'
     || lk == 100121                // '{' 'nodes'
     || lk == 100633                // '{' 'not'
     || lk == 101145                // '{' 'null'
     || lk == 101657                // '{' 'object'
     || lk == 103705                // '{' 'only'
     || lk == 104217                // '{' 'option'
     || lk == 104729                // '{' 'or'
     || lk == 105241                // '{' 'order'
     || lk == 105753                // '{' 'ordered'
     || lk == 106265                // '{' 'ordering'
     || lk == 107801                // '{' 'parent'
     || lk == 110873                // '{' 'preceding'
     || lk == 111385                // '{' 'preceding-sibling'
     || lk == 112921                // '{' 'processing-instruction'
     || lk == 113945                // '{' 'rename'
     || lk == 114457                // '{' 'replace'
     || lk == 114969                // '{' 'return'
     || lk == 115481                // '{' 'returning'
     || lk == 115993                // '{' 'revalidation'
     || lk == 117017                // '{' 'satisfies'
     || lk == 117529                // '{' 'schema'
     || lk == 118041                // '{' 'schema-attribute'
     || lk == 118553                // '{' 'schema-element'
     || lk == 119065                // '{' 'score'
     || lk == 119577                // '{' 'select'
     || lk == 120089                // '{' 'self'
     || lk == 122649                // '{' 'sliding'
     || lk == 123161                // '{' 'some'
     || lk == 123673                // '{' 'stable'
     || lk == 124185                // '{' 'start'
     || lk == 125721                // '{' 'strict'
     || lk == 126745                // '{' 'structured-item'
     || lk == 127257                // '{' 'switch'
     || lk == 127769                // '{' 'text'
     || lk == 129817                // '{' 'to'
     || lk == 130329                // '{' 'treat'
     || lk == 130841                // '{' 'true'
     || lk == 131353                // '{' 'try'
     || lk == 131865                // '{' 'tumbling'
     || lk == 132377                // '{' 'type'
     || lk == 132889                // '{' 'typeswitch'
     || lk == 133401                // '{' 'union'
     || lk == 134425                // '{' 'unordered'
     || lk == 134937                // '{' 'updating'
     || lk == 136473                // '{' 'validate'
     || lk == 136985                // '{' 'value'
     || lk == 137497                // '{' 'variable'
     || lk == 138009                // '{' 'version'
     || lk == 139545                // '{' 'where'
     || lk == 140057                // '{' 'while'
     || lk == 141593                // '{' 'with'
     || lk == 144153                // '{' '{'
     || lk == 145177                // '{' '{|'
     || lk == 147225)               // '{' '}'
    {
      lk = memoized(20, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_Literal();
          memoize(20, e0A, -1);
          lk = -14;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_FunctionCall();
            memoize(20, e0A, -5);
            lk = -14;
          }
          catch (p5A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockExpr();
              memoize(20, e0A, -10);
              lk = -14;
            }
            catch (p10A)
            {
              lk = -11;
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              memoize(20, e0A, -11);
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 12935:                     // 'false' EOF
    case 12997:                     // 'null' EOF
    case 13055:                     // 'true' EOF
    case 13447:                     // 'false' '!'
    case 13509:                     // 'null' '!'
    case 13567:                     // 'true' '!'
    case 13959:                     // 'false' '!='
    case 14021:                     // 'null' '!='
    case 14079:                     // 'true' '!='
    case 19591:                     // 'false' ')'
    case 19653:                     // 'null' ')'
    case 19711:                     // 'true' ')'
    case 20103:                     // 'false' '*'
    case 20165:                     // 'null' '*'
    case 20223:                     // 'true' '*'
    case 21127:                     // 'false' '+'
    case 21189:                     // 'null' '+'
    case 21247:                     // 'true' '+'
    case 21639:                     // 'false' ','
    case 21701:                     // 'null' ','
    case 21759:                     // 'true' ','
    case 22151:                     // 'false' '-'
    case 22213:                     // 'null' '-'
    case 22271:                     // 'true' '-'
    case 23175:                     // 'false' '.'
    case 23237:                     // 'null' '.'
    case 23295:                     // 'true' '.'
    case 24199:                     // 'false' '/'
    case 24261:                     // 'null' '/'
    case 24319:                     // 'true' '/'
    case 24711:                     // 'false' '//'
    case 24773:                     // 'null' '//'
    case 24831:                     // 'true' '//'
    case 25735:                     // 'false' ':'
    case 25797:                     // 'null' ':'
    case 25855:                     // 'true' ':'
    case 27783:                     // 'false' ';'
    case 27845:                     // 'null' ';'
    case 27903:                     // 'true' ';'
    case 28295:                     // 'false' '<'
    case 28357:                     // 'null' '<'
    case 28415:                     // 'true' '<'
    case 29831:                     // 'false' '<<'
    case 29893:                     // 'null' '<<'
    case 29951:                     // 'true' '<<'
    case 30343:                     // 'false' '<='
    case 30405:                     // 'null' '<='
    case 30463:                     // 'true' '<='
    case 31367:                     // 'false' '='
    case 31429:                     // 'null' '='
    case 31487:                     // 'true' '='
    case 31879:                     // 'false' '>'
    case 31941:                     // 'null' '>'
    case 31999:                     // 'true' '>'
    case 32391:                     // 'false' '>='
    case 32453:                     // 'null' '>='
    case 32511:                     // 'true' '>='
    case 32903:                     // 'false' '>>'
    case 32965:                     // 'null' '>>'
    case 33023:                     // 'true' '>>'
    case 35463:                     // 'false' '['
    case 35525:                     // 'null' '['
    case 35583:                     // 'true' '['
    case 35975:                     // 'false' ']'
    case 36037:                     // 'null' ']'
    case 36095:                     // 'true' ']'
    case 36487:                     // 'false' 'after'
    case 36549:                     // 'null' 'after'
    case 36607:                     // 'true' 'after'
    case 39047:                     // 'false' 'and'
    case 39109:                     // 'null' 'and'
    case 39167:                     // 'true' 'and'
    case 41095:                     // 'false' 'as'
    case 41157:                     // 'null' 'as'
    case 41215:                     // 'true' 'as'
    case 41607:                     // 'false' 'ascending'
    case 41669:                     // 'null' 'ascending'
    case 41727:                     // 'true' 'ascending'
    case 42119:                     // 'false' 'at'
    case 42181:                     // 'null' 'at'
    case 42239:                     // 'true' 'at'
    case 43655:                     // 'false' 'before'
    case 43717:                     // 'null' 'before'
    case 43775:                     // 'true' 'before'
    case 45191:                     // 'false' 'by'
    case 45253:                     // 'null' 'by'
    case 45311:                     // 'true' 'by'
    case 45703:                     // 'false' 'case'
    case 45765:                     // 'null' 'case'
    case 45823:                     // 'true' 'case'
    case 46215:                     // 'false' 'cast'
    case 46277:                     // 'null' 'cast'
    case 46335:                     // 'true' 'cast'
    case 46727:                     // 'false' 'castable'
    case 46789:                     // 'null' 'castable'
    case 46847:                     // 'true' 'castable'
    case 48775:                     // 'false' 'collation'
    case 48837:                     // 'null' 'collation'
    case 48895:                     // 'true' 'collation'
    case 51335:                     // 'false' 'contains'
    case 51397:                     // 'null' 'contains'
    case 51455:                     // 'true' 'contains'
    case 54407:                     // 'false' 'count'
    case 54469:                     // 'null' 'count'
    case 54527:                     // 'true' 'count'
    case 56455:                     // 'false' 'default'
    case 56517:                     // 'null' 'default'
    case 56575:                     // 'true' 'default'
    case 58503:                     // 'false' 'descending'
    case 58565:                     // 'null' 'descending'
    case 58623:                     // 'true' 'descending'
    case 61063:                     // 'false' 'div'
    case 61125:                     // 'null' 'div'
    case 61183:                     // 'true' 'div'
    case 63111:                     // 'false' 'else'
    case 63173:                     // 'null' 'else'
    case 63231:                     // 'true' 'else'
    case 63623:                     // 'false' 'empty'
    case 63685:                     // 'null' 'empty'
    case 63743:                     // 'true' 'empty'
    case 65159:                     // 'false' 'end'
    case 65221:                     // 'null' 'end'
    case 65279:                     // 'true' 'end'
    case 66183:                     // 'false' 'eq'
    case 66245:                     // 'null' 'eq'
    case 66303:                     // 'true' 'eq'
    case 67719:                     // 'false' 'except'
    case 67781:                     // 'null' 'except'
    case 67839:                     // 'true' 'except'
    case 71303:                     // 'false' 'for'
    case 71365:                     // 'null' 'for'
    case 71423:                     // 'true' 'for'
    case 75911:                     // 'false' 'ge'
    case 75973:                     // 'null' 'ge'
    case 76031:                     // 'true' 'ge'
    case 76935:                     // 'false' 'group'
    case 76997:                     // 'null' 'group'
    case 77055:                     // 'true' 'group'
    case 77959:                     // 'false' 'gt'
    case 78021:                     // 'null' 'gt'
    case 78079:                     // 'true' 'gt'
    case 78471:                     // 'false' 'idiv'
    case 78533:                     // 'null' 'idiv'
    case 78591:                     // 'true' 'idiv'
    case 83079:                     // 'false' 'instance'
    case 83141:                     // 'null' 'instance'
    case 83199:                     // 'true' 'instance'
    case 84103:                     // 'false' 'intersect'
    case 84165:                     // 'null' 'intersect'
    case 84223:                     // 'true' 'intersect'
    case 84615:                     // 'false' 'into'
    case 84677:                     // 'null' 'into'
    case 84735:                     // 'true' 'into'
    case 85127:                     // 'false' 'is'
    case 85189:                     // 'null' 'is'
    case 85247:                     // 'true' 'is'
    case 89735:                     // 'false' 'le'
    case 89797:                     // 'null' 'le'
    case 89855:                     // 'true' 'le'
    case 90759:                     // 'false' 'let'
    case 90821:                     // 'null' 'let'
    case 90879:                     // 'true' 'let'
    case 92807:                     // 'false' 'lt'
    case 92869:                     // 'null' 'lt'
    case 92927:                     // 'true' 'lt'
    case 93831:                     // 'false' 'mod'
    case 93893:                     // 'null' 'mod'
    case 93951:                     // 'true' 'mod'
    case 94343:                     // 'false' 'modify'
    case 94405:                     // 'null' 'modify'
    case 94463:                     // 'true' 'modify'
    case 96903:                     // 'false' 'ne'
    case 96965:                     // 'null' 'ne'
    case 97023:                     // 'true' 'ne'
    case 103559:                    // 'false' 'only'
    case 103621:                    // 'null' 'only'
    case 103679:                    // 'true' 'only'
    case 104583:                    // 'false' 'or'
    case 104645:                    // 'null' 'or'
    case 104703:                    // 'true' 'or'
    case 105095:                    // 'false' 'order'
    case 105157:                    // 'null' 'order'
    case 105215:                    // 'true' 'order'
    case 107143:                    // 'false' 'paragraphs'
    case 107205:                    // 'null' 'paragraphs'
    case 107263:                    // 'true' 'paragraphs'
    case 114823:                    // 'false' 'return'
    case 114885:                    // 'null' 'return'
    case 114943:                    // 'true' 'return'
    case 116871:                    // 'false' 'satisfies'
    case 116933:                    // 'null' 'satisfies'
    case 116991:                    // 'true' 'satisfies'
    case 121479:                    // 'false' 'sentences'
    case 121541:                    // 'null' 'sentences'
    case 121599:                    // 'true' 'sentences'
    case 123527:                    // 'false' 'stable'
    case 123589:                    // 'null' 'stable'
    case 123647:                    // 'true' 'stable'
    case 124039:                    // 'false' 'start'
    case 124101:                    // 'null' 'start'
    case 124159:                    // 'true' 'start'
    case 129159:                    // 'false' 'times'
    case 129221:                    // 'null' 'times'
    case 129279:                    // 'true' 'times'
    case 129671:                    // 'false' 'to'
    case 129733:                    // 'null' 'to'
    case 129791:                    // 'true' 'to'
    case 130183:                    // 'false' 'treat'
    case 130245:                    // 'null' 'treat'
    case 130303:                    // 'true' 'treat'
    case 133255:                    // 'false' 'union'
    case 133317:                    // 'null' 'union'
    case 133375:                    // 'true' 'union'
    case 139399:                    // 'false' 'where'
    case 139461:                    // 'null' 'where'
    case 139519:                    // 'true' 'where'
    case 141447:                    // 'false' 'with'
    case 141509:                    // 'null' 'with'
    case 141567:                    // 'true' 'with'
    case 142983:                    // 'false' 'words'
    case 143045:                    // 'null' 'words'
    case 143103:                    // 'true' 'words'
    case 145543:                    // 'false' '|'
    case 145605:                    // 'null' '|'
    case 145663:                    // 'true' '|'
    case 146055:                    // 'false' '||'
    case 146117:                    // 'null' '||'
    case 146175:                    // 'true' '||'
    case 146567:                    // 'false' '|}'
    case 146629:                    // 'null' '|}'
    case 146687:                    // 'true' '|}'
    case 147079:                    // 'false' '}'
    case 147141:                    // 'null' '}'
    case 147199:                    // 'true' '}'
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 32:                        // '$$'
      try_ContextItemExpr();
      break;
    case -5:
    case 17926:                     // EQName^Token '('
    case 17991:                     // 'after' '('
    case 17993:                     // 'allowing' '('
    case 17994:                     // 'ancestor' '('
    case 17995:                     // 'ancestor-or-self' '('
    case 17996:                     // 'and' '('
    case 17998:                     // 'append' '('
    case 18000:                     // 'as' '('
    case 18001:                     // 'ascending' '('
    case 18002:                     // 'at' '('
    case 18004:                     // 'base-uri' '('
    case 18005:                     // 'before' '('
    case 18006:                     // 'boundary-space' '('
    case 18007:                     // 'break' '('
    case 18009:                     // 'case' '('
    case 18010:                     // 'cast' '('
    case 18011:                     // 'castable' '('
    case 18012:                     // 'catch' '('
    case 18014:                     // 'child' '('
    case 18015:                     // 'collation' '('
    case 18018:                     // 'constraint' '('
    case 18019:                     // 'construction' '('
    case 18022:                     // 'context' '('
    case 18023:                     // 'continue' '('
    case 18024:                     // 'copy' '('
    case 18025:                     // 'copy-namespaces' '('
    case 18026:                     // 'count' '('
    case 18027:                     // 'decimal-format' '('
    case 18029:                     // 'declare' '('
    case 18030:                     // 'default' '('
    case 18031:                     // 'delete' '('
    case 18032:                     // 'descendant' '('
    case 18033:                     // 'descendant-or-self' '('
    case 18034:                     // 'descending' '('
    case 18039:                     // 'div' '('
    case 18040:                     // 'document' '('
    case 18043:                     // 'else' '('
    case 18044:                     // 'empty' '('
    case 18046:                     // 'encoding' '('
    case 18047:                     // 'end' '('
    case 18049:                     // 'eq' '('
    case 18050:                     // 'every' '('
    case 18052:                     // 'except' '('
    case 18053:                     // 'exit' '('
    case 18054:                     // 'external' '('
    case 18056:                     // 'first' '('
    case 18057:                     // 'following' '('
    case 18058:                     // 'following-sibling' '('
    case 18059:                     // 'for' '('
    case 18062:                     // 'from' '('
    case 18063:                     // 'ft-option' '('
    case 18068:                     // 'ge' '('
    case 18070:                     // 'group' '('
    case 18072:                     // 'gt' '('
    case 18073:                     // 'idiv' '('
    case 18075:                     // 'import' '('
    case 18076:                     // 'in' '('
    case 18077:                     // 'index' '('
    case 18081:                     // 'insert' '('
    case 18082:                     // 'instance' '('
    case 18083:                     // 'integrity' '('
    case 18084:                     // 'intersect' '('
    case 18085:                     // 'into' '('
    case 18086:                     // 'is' '('
    case 18088:                     // 'json' '('
    case 18090:                     // 'jsoniq' '('
    case 18093:                     // 'last' '('
    case 18094:                     // 'lax' '('
    case 18095:                     // 'le' '('
    case 18097:                     // 'let' '('
    case 18099:                     // 'loop' '('
    case 18101:                     // 'lt' '('
    case 18103:                     // 'mod' '('
    case 18104:                     // 'modify' '('
    case 18105:                     // 'module' '('
    case 18107:                     // 'namespace' '('
    case 18109:                     // 'ne' '('
    case 18115:                     // 'nodes' '('
    case 18118:                     // 'object' '('
    case 18122:                     // 'only' '('
    case 18123:                     // 'option' '('
    case 18124:                     // 'or' '('
    case 18125:                     // 'order' '('
    case 18126:                     // 'ordered' '('
    case 18127:                     // 'ordering' '('
    case 18130:                     // 'parent' '('
    case 18136:                     // 'preceding' '('
    case 18137:                     // 'preceding-sibling' '('
    case 18142:                     // 'rename' '('
    case 18143:                     // 'replace' '('
    case 18144:                     // 'return' '('
    case 18145:                     // 'returning' '('
    case 18146:                     // 'revalidation' '('
    case 18148:                     // 'satisfies' '('
    case 18149:                     // 'schema' '('
    case 18152:                     // 'score' '('
    case 18153:                     // 'select' '('
    case 18154:                     // 'self' '('
    case 18159:                     // 'sliding' '('
    case 18160:                     // 'some' '('
    case 18161:                     // 'stable' '('
    case 18162:                     // 'start' '('
    case 18165:                     // 'strict' '('
    case 18173:                     // 'to' '('
    case 18174:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
      try_FunctionCall();
      break;
    case 144078:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 144134:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 79:                        // 'array'
    case 121:                       // 'document-node'
    case 125:                       // 'empty-sequence'
    case 147:                       // 'function'
    case 154:                       // 'if'
    case 167:                       // 'item'
    case 169:                       // 'json-item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
    case 247:                       // 'structured-item'
    case 248:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14919:                     // 'after' '#'
    case 14921:                     // 'allowing' '#'
    case 14922:                     // 'ancestor' '#'
    case 14923:                     // 'ancestor-or-self' '#'
    case 14924:                     // 'and' '#'
    case 14926:                     // 'append' '#'
    case 14928:                     // 'as' '#'
    case 14929:                     // 'ascending' '#'
    case 14930:                     // 'at' '#'
    case 14931:                     // 'attribute' '#'
    case 14932:                     // 'base-uri' '#'
    case 14933:                     // 'before' '#'
    case 14934:                     // 'boundary-space' '#'
    case 14935:                     // 'break' '#'
    case 14937:                     // 'case' '#'
    case 14938:                     // 'cast' '#'
    case 14939:                     // 'castable' '#'
    case 14940:                     // 'catch' '#'
    case 14942:                     // 'child' '#'
    case 14943:                     // 'collation' '#'
    case 14945:                     // 'comment' '#'
    case 14946:                     // 'constraint' '#'
    case 14947:                     // 'construction' '#'
    case 14950:                     // 'context' '#'
    case 14951:                     // 'continue' '#'
    case 14952:                     // 'copy' '#'
    case 14953:                     // 'copy-namespaces' '#'
    case 14954:                     // 'count' '#'
    case 14955:                     // 'decimal-format' '#'
    case 14957:                     // 'declare' '#'
    case 14958:                     // 'default' '#'
    case 14959:                     // 'delete' '#'
    case 14960:                     // 'descendant' '#'
    case 14961:                     // 'descendant-or-self' '#'
    case 14962:                     // 'descending' '#'
    case 14967:                     // 'div' '#'
    case 14968:                     // 'document' '#'
    case 14970:                     // 'element' '#'
    case 14971:                     // 'else' '#'
    case 14972:                     // 'empty' '#'
    case 14974:                     // 'encoding' '#'
    case 14975:                     // 'end' '#'
    case 14977:                     // 'eq' '#'
    case 14978:                     // 'every' '#'
    case 14980:                     // 'except' '#'
    case 14981:                     // 'exit' '#'
    case 14982:                     // 'external' '#'
    case 14983:                     // 'false' '#'
    case 14984:                     // 'first' '#'
    case 14985:                     // 'following' '#'
    case 14986:                     // 'following-sibling' '#'
    case 14987:                     // 'for' '#'
    case 14990:                     // 'from' '#'
    case 14991:                     // 'ft-option' '#'
    case 14996:                     // 'ge' '#'
    case 14998:                     // 'group' '#'
    case 15000:                     // 'gt' '#'
    case 15001:                     // 'idiv' '#'
    case 15003:                     // 'import' '#'
    case 15004:                     // 'in' '#'
    case 15005:                     // 'index' '#'
    case 15009:                     // 'insert' '#'
    case 15010:                     // 'instance' '#'
    case 15011:                     // 'integrity' '#'
    case 15012:                     // 'intersect' '#'
    case 15013:                     // 'into' '#'
    case 15014:                     // 'is' '#'
    case 15016:                     // 'json' '#'
    case 15018:                     // 'jsoniq' '#'
    case 15021:                     // 'last' '#'
    case 15022:                     // 'lax' '#'
    case 15023:                     // 'le' '#'
    case 15025:                     // 'let' '#'
    case 15027:                     // 'loop' '#'
    case 15029:                     // 'lt' '#'
    case 15031:                     // 'mod' '#'
    case 15032:                     // 'modify' '#'
    case 15033:                     // 'module' '#'
    case 15035:                     // 'namespace' '#'
    case 15037:                     // 'ne' '#'
    case 15043:                     // 'nodes' '#'
    case 15045:                     // 'null' '#'
    case 15046:                     // 'object' '#'
    case 15050:                     // 'only' '#'
    case 15051:                     // 'option' '#'
    case 15052:                     // 'or' '#'
    case 15053:                     // 'order' '#'
    case 15054:                     // 'ordered' '#'
    case 15055:                     // 'ordering' '#'
    case 15058:                     // 'parent' '#'
    case 15064:                     // 'preceding' '#'
    case 15065:                     // 'preceding-sibling' '#'
    case 15068:                     // 'processing-instruction' '#'
    case 15070:                     // 'rename' '#'
    case 15071:                     // 'replace' '#'
    case 15072:                     // 'return' '#'
    case 15073:                     // 'returning' '#'
    case 15074:                     // 'revalidation' '#'
    case 15076:                     // 'satisfies' '#'
    case 15077:                     // 'schema' '#'
    case 15080:                     // 'score' '#'
    case 15081:                     // 'select' '#'
    case 15082:                     // 'self' '#'
    case 15087:                     // 'sliding' '#'
    case 15088:                     // 'some' '#'
    case 15089:                     // 'stable' '#'
    case 15090:                     // 'start' '#'
    case 15093:                     // 'strict' '#'
    case 15097:                     // 'text' '#'
    case 15101:                     // 'to' '#'
    case 15102:                     // 'treat' '#'
    case 15103:                     // 'true' '#'
    case 15104:                     // 'try' '#'
    case 15105:                     // 'tumbling' '#'
    case 15106:                     // 'type' '#'
    case 15108:                     // 'union' '#'
    case 15110:                     // 'unordered' '#'
    case 15111:                     // 'updating' '#'
    case 15114:                     // 'validate' '#'
    case 15115:                     // 'value' '#'
    case 15116:                     // 'variable' '#'
    case 15117:                     // 'version' '#'
    case 15120:                     // 'where' '#'
    case 15121:                     // 'while' '#'
    case 15124:                     // 'with' '#'
      try_FunctionItemExpr();
      break;
    case -10:
    case 27929:                     // '{' ';'
      try_BlockExpr();
      break;
    case -11:
    case 10009:                     // '{' NCName^Token
      try_ObjectConstructor();
      break;
    case 69:                        // '['
      try_ArrayConstructor();
      break;
    case 283:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    case -14:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    shift(283);                     // '{|'
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 286)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    shift(286);                     // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    shiftT(283);                    // '{|'
    lookahead1W(274);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 286)                  // '|}'
    {
      try_Expr();
    }
    shiftT(286);                    // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    shift(281);                     // '{'
    lookahead1W(277);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 287)                  // '}'
    {
      whitespace();
      parse_PairConstructorList();
    }
    shift(287);                     // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    shiftT(281);                    // '{'
    lookahead1W(277);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 287)                  // '}'
    {
      try_PairConstructorList();
    }
    shiftT(287);                    // '}'
  }

  function parse_PairConstructorList()
  {
    eventHandler.startNonterminal("PairConstructorList", e0);
    parse_PairConstructor();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shift(42);                    // ','
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_PairConstructor();
    }
    eventHandler.endNonterminal("PairConstructorList", e0);
  }

  function try_PairConstructorList()
  {
    try_PairConstructor();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      shiftT(42);                   // ','
      lookahead1W(268);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      try_PairConstructor();
    }
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(279);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 139:                       // 'for'
      lookahead2W(187);             // S^WS | '#' | '$' | '(' | '(:' | ':' | 'sliding' | 'tumbling'
      break;
    case 161:                       // 'insert'
      lookahead2W(282);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 177:                       // 'let'
      lookahead2W(178);             // S^WS | '#' | '$' | '(' | '(:' | ':' | 'score'
      break;
    case 187:                       // 'namespace'
      lookahead2W(252);             // NCName^Token | S^WS | '#' | '(' | '(:' | ':' | 'after' | 'allowing' |
      break;
    case 220:                       // 'processing-instruction'
      lookahead2W(248);             // NCName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 223:                       // 'replace'
      lookahead2W(180);             // S^WS | '#' | '(' | '(:' | ':' | 'node' | 'value'
      break;
    case 266:                       // 'validate'
      lookahead2W(191);             // S^WS | '#' | '(' | '(:' | ':' | 'lax' | 'strict' | 'type' | '{'
      break;
    case 83:                        // 'attribute'
    case 122:                       // 'element'
      lookahead2W(257);             // EQName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 97:                        // 'comment'
    case 249:                       // 'text'
      lookahead2W(149);             // S^WS | '#' | '(:' | ':' | '{'
      break;
    case 111:                       // 'delete'
    case 222:                       // 'rename'
      lookahead2W(262);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 240:                       // 'some'
      lookahead2W(165);             // S^WS | '#' | '$' | '(' | '(:' | ':'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(209);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '.' | '/' | '//' | ':' |
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 256:                       // 'try'
    case 262:                       // 'unordered'
      lookahead2W(167);             // S^WS | '#' | '(' | '(:' | ':' | '{'
      break;
    case 121:                       // 'document-node'
    case 125:                       // 'empty-sequence'
    case 167:                       // 'item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
      lookahead2W(96);              // S^WS | '#' | '(:' | ':'
      break;
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 147:                       // 'function'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 154:                       // 'if'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 248:                       // 'switch'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 259:                       // 'typeswitch'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(144);             // S^WS | '#' | '(' | '(:' | ':'
      break;
    default:
      lk = l1;
    }
    if (lk == 25735                 // 'false' ':'
     || lk == 25797                 // 'null' ':'
     || lk == 25855)                // 'true' ':'
    {
      lk = memoized(21, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ExprSingle();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(21, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
    case 19:                        // NCName^Token
    case 25671:                     // 'after' ':'
    case 25673:                     // 'allowing' ':'
    case 25674:                     // 'ancestor' ':'
    case 25675:                     // 'ancestor-or-self' ':'
    case 25676:                     // 'and' ':'
    case 25678:                     // 'append' ':'
    case 25680:                     // 'as' ':'
    case 25681:                     // 'ascending' ':'
    case 25682:                     // 'at' ':'
    case 25683:                     // 'attribute' ':'
    case 25684:                     // 'base-uri' ':'
    case 25685:                     // 'before' ':'
    case 25686:                     // 'boundary-space' ':'
    case 25687:                     // 'break' ':'
    case 25689:                     // 'case' ':'
    case 25690:                     // 'cast' ':'
    case 25691:                     // 'castable' ':'
    case 25692:                     // 'catch' ':'
    case 25694:                     // 'child' ':'
    case 25695:                     // 'collation' ':'
    case 25697:                     // 'comment' ':'
    case 25698:                     // 'constraint' ':'
    case 25699:                     // 'construction' ':'
    case 25702:                     // 'context' ':'
    case 25703:                     // 'continue' ':'
    case 25704:                     // 'copy' ':'
    case 25705:                     // 'copy-namespaces' ':'
    case 25706:                     // 'count' ':'
    case 25707:                     // 'decimal-format' ':'
    case 25709:                     // 'declare' ':'
    case 25710:                     // 'default' ':'
    case 25711:                     // 'delete' ':'
    case 25712:                     // 'descendant' ':'
    case 25713:                     // 'descendant-or-self' ':'
    case 25714:                     // 'descending' ':'
    case 25719:                     // 'div' ':'
    case 25720:                     // 'document' ':'
    case 25721:                     // 'document-node' ':'
    case 25722:                     // 'element' ':'
    case 25723:                     // 'else' ':'
    case 25724:                     // 'empty' ':'
    case 25725:                     // 'empty-sequence' ':'
    case 25726:                     // 'encoding' ':'
    case 25727:                     // 'end' ':'
    case 25729:                     // 'eq' ':'
    case 25730:                     // 'every' ':'
    case 25732:                     // 'except' ':'
    case 25733:                     // 'exit' ':'
    case 25734:                     // 'external' ':'
    case 25736:                     // 'first' ':'
    case 25737:                     // 'following' ':'
    case 25738:                     // 'following-sibling' ':'
    case 25739:                     // 'for' ':'
    case 25742:                     // 'from' ':'
    case 25743:                     // 'ft-option' ':'
    case 25747:                     // 'function' ':'
    case 25748:                     // 'ge' ':'
    case 25750:                     // 'group' ':'
    case 25752:                     // 'gt' ':'
    case 25753:                     // 'idiv' ':'
    case 25754:                     // 'if' ':'
    case 25755:                     // 'import' ':'
    case 25756:                     // 'in' ':'
    case 25757:                     // 'index' ':'
    case 25761:                     // 'insert' ':'
    case 25762:                     // 'instance' ':'
    case 25763:                     // 'integrity' ':'
    case 25764:                     // 'intersect' ':'
    case 25765:                     // 'into' ':'
    case 25766:                     // 'is' ':'
    case 25767:                     // 'item' ':'
    case 25768:                     // 'json' ':'
    case 25770:                     // 'jsoniq' ':'
    case 25773:                     // 'last' ':'
    case 25774:                     // 'lax' ':'
    case 25775:                     // 'le' ':'
    case 25777:                     // 'let' ':'
    case 25779:                     // 'loop' ':'
    case 25781:                     // 'lt' ':'
    case 25783:                     // 'mod' ':'
    case 25784:                     // 'modify' ':'
    case 25785:                     // 'module' ':'
    case 25787:                     // 'namespace' ':'
    case 25788:                     // 'namespace-node' ':'
    case 25789:                     // 'ne' ':'
    case 25794:                     // 'node' ':'
    case 25795:                     // 'nodes' ':'
    case 25798:                     // 'object' ':'
    case 25802:                     // 'only' ':'
    case 25803:                     // 'option' ':'
    case 25804:                     // 'or' ':'
    case 25805:                     // 'order' ':'
    case 25806:                     // 'ordered' ':'
    case 25807:                     // 'ordering' ':'
    case 25810:                     // 'parent' ':'
    case 25816:                     // 'preceding' ':'
    case 25817:                     // 'preceding-sibling' ':'
    case 25820:                     // 'processing-instruction' ':'
    case 25822:                     // 'rename' ':'
    case 25823:                     // 'replace' ':'
    case 25824:                     // 'return' ':'
    case 25825:                     // 'returning' ':'
    case 25826:                     // 'revalidation' ':'
    case 25828:                     // 'satisfies' ':'
    case 25829:                     // 'schema' ':'
    case 25830:                     // 'schema-attribute' ':'
    case 25831:                     // 'schema-element' ':'
    case 25832:                     // 'score' ':'
    case 25833:                     // 'select' ':'
    case 25834:                     // 'self' ':'
    case 25839:                     // 'sliding' ':'
    case 25840:                     // 'some' ':'
    case 25841:                     // 'stable' ':'
    case 25842:                     // 'start' ':'
    case 25845:                     // 'strict' ':'
    case 25848:                     // 'switch' ':'
    case 25849:                     // 'text' ':'
    case 25853:                     // 'to' ':'
    case 25854:                     // 'treat' ':'
    case 25856:                     // 'try' ':'
    case 25857:                     // 'tumbling' ':'
    case 25858:                     // 'type' ':'
    case 25859:                     // 'typeswitch' ':'
    case 25860:                     // 'union' ':'
    case 25862:                     // 'unordered' ':'
    case 25863:                     // 'updating' ':'
    case 25866:                     // 'validate' ':'
    case 25867:                     // 'value' ':'
    case 25868:                     // 'variable' ':'
    case 25869:                     // 'version' ':'
    case 25872:                     // 'where' ':'
    case 25873:                     // 'while' ':'
    case 25876:                     // 'with' ':'
      parse_NCName();
      break;
    default:
      parse_ExprSingle();
    }
    lookahead1W(26);                // S^WS | '(:' | ':'
    shift(50);                      // ':'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    switch (l1)
    {
    case 78:                        // 'append'
      lookahead2W(279);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 139:                       // 'for'
      lookahead2W(187);             // S^WS | '#' | '$' | '(' | '(:' | ':' | 'sliding' | 'tumbling'
      break;
    case 161:                       // 'insert'
      lookahead2W(282);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 177:                       // 'let'
      lookahead2W(178);             // S^WS | '#' | '$' | '(' | '(:' | ':' | 'score'
      break;
    case 187:                       // 'namespace'
      lookahead2W(252);             // NCName^Token | S^WS | '#' | '(' | '(:' | ':' | 'after' | 'allowing' |
      break;
    case 220:                       // 'processing-instruction'
      lookahead2W(248);             // NCName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 223:                       // 'replace'
      lookahead2W(180);             // S^WS | '#' | '(' | '(:' | ':' | 'node' | 'value'
      break;
    case 266:                       // 'validate'
      lookahead2W(191);             // S^WS | '#' | '(' | '(:' | ':' | 'lax' | 'strict' | 'type' | '{'
      break;
    case 83:                        // 'attribute'
    case 122:                       // 'element'
      lookahead2W(257);             // EQName^Token | S^WS | '#' | '(:' | ':' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 97:                        // 'comment'
    case 249:                       // 'text'
      lookahead2W(149);             // S^WS | '#' | '(:' | ':' | '{'
      break;
    case 111:                       // 'delete'
    case 222:                       // 'rename'
      lookahead2W(262);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      break;
    case 104:                       // 'copy'
    case 130:                       // 'every'
    case 240:                       // 'some'
      lookahead2W(165);             // S^WS | '#' | '$' | '(' | '(:' | ':'
      break;
    case 135:                       // 'false'
    case 197:                       // 'null'
    case 255:                       // 'true'
      lookahead2W(209);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '.' | '/' | '//' | ':' |
      break;
    case 120:                       // 'document'
    case 206:                       // 'ordered'
    case 256:                       // 'try'
    case 262:                       // 'unordered'
      lookahead2W(167);             // S^WS | '#' | '(' | '(:' | ':' | '{'
      break;
    case 121:                       // 'document-node'
    case 125:                       // 'empty-sequence'
    case 167:                       // 'item'
    case 188:                       // 'namespace-node'
    case 194:                       // 'node'
    case 230:                       // 'schema-attribute'
    case 231:                       // 'schema-element'
      lookahead2W(96);              // S^WS | '#' | '(:' | ':'
      break;
    case 71:                        // 'after'
    case 73:                        // 'allowing'
    case 74:                        // 'ancestor'
    case 75:                        // 'ancestor-or-self'
    case 76:                        // 'and'
    case 80:                        // 'as'
    case 81:                        // 'ascending'
    case 82:                        // 'at'
    case 84:                        // 'base-uri'
    case 85:                        // 'before'
    case 86:                        // 'boundary-space'
    case 87:                        // 'break'
    case 89:                        // 'case'
    case 90:                        // 'cast'
    case 91:                        // 'castable'
    case 92:                        // 'catch'
    case 94:                        // 'child'
    case 95:                        // 'collation'
    case 98:                        // 'constraint'
    case 99:                        // 'construction'
    case 102:                       // 'context'
    case 103:                       // 'continue'
    case 105:                       // 'copy-namespaces'
    case 106:                       // 'count'
    case 107:                       // 'decimal-format'
    case 109:                       // 'declare'
    case 110:                       // 'default'
    case 112:                       // 'descendant'
    case 113:                       // 'descendant-or-self'
    case 114:                       // 'descending'
    case 119:                       // 'div'
    case 123:                       // 'else'
    case 124:                       // 'empty'
    case 126:                       // 'encoding'
    case 127:                       // 'end'
    case 129:                       // 'eq'
    case 132:                       // 'except'
    case 133:                       // 'exit'
    case 134:                       // 'external'
    case 136:                       // 'first'
    case 137:                       // 'following'
    case 138:                       // 'following-sibling'
    case 142:                       // 'from'
    case 143:                       // 'ft-option'
    case 147:                       // 'function'
    case 148:                       // 'ge'
    case 150:                       // 'group'
    case 152:                       // 'gt'
    case 153:                       // 'idiv'
    case 154:                       // 'if'
    case 155:                       // 'import'
    case 156:                       // 'in'
    case 157:                       // 'index'
    case 162:                       // 'instance'
    case 163:                       // 'integrity'
    case 164:                       // 'intersect'
    case 165:                       // 'into'
    case 166:                       // 'is'
    case 168:                       // 'json'
    case 170:                       // 'jsoniq'
    case 173:                       // 'last'
    case 174:                       // 'lax'
    case 175:                       // 'le'
    case 179:                       // 'loop'
    case 181:                       // 'lt'
    case 183:                       // 'mod'
    case 184:                       // 'modify'
    case 185:                       // 'module'
    case 189:                       // 'ne'
    case 195:                       // 'nodes'
    case 198:                       // 'object'
    case 202:                       // 'only'
    case 203:                       // 'option'
    case 204:                       // 'or'
    case 205:                       // 'order'
    case 207:                       // 'ordering'
    case 210:                       // 'parent'
    case 216:                       // 'preceding'
    case 217:                       // 'preceding-sibling'
    case 224:                       // 'return'
    case 225:                       // 'returning'
    case 226:                       // 'revalidation'
    case 228:                       // 'satisfies'
    case 229:                       // 'schema'
    case 232:                       // 'score'
    case 233:                       // 'select'
    case 234:                       // 'self'
    case 239:                       // 'sliding'
    case 241:                       // 'stable'
    case 242:                       // 'start'
    case 245:                       // 'strict'
    case 248:                       // 'switch'
    case 253:                       // 'to'
    case 254:                       // 'treat'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 259:                       // 'typeswitch'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
      lookahead2W(144);             // S^WS | '#' | '(' | '(:' | ':'
      break;
    default:
      lk = l1;
    }
    if (lk == 25735                 // 'false' ':'
     || lk == 25797                 // 'null' ':'
     || lk == 25855)                // 'true' ':'
    {
      lk = memoized(21, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ExprSingle();
          memoize(21, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(21, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -2:
    case 19:                        // NCName^Token
    case 25671:                     // 'after' ':'
    case 25673:                     // 'allowing' ':'
    case 25674:                     // 'ancestor' ':'
    case 25675:                     // 'ancestor-or-self' ':'
    case 25676:                     // 'and' ':'
    case 25678:                     // 'append' ':'
    case 25680:                     // 'as' ':'
    case 25681:                     // 'ascending' ':'
    case 25682:                     // 'at' ':'
    case 25683:                     // 'attribute' ':'
    case 25684:                     // 'base-uri' ':'
    case 25685:                     // 'before' ':'
    case 25686:                     // 'boundary-space' ':'
    case 25687:                     // 'break' ':'
    case 25689:                     // 'case' ':'
    case 25690:                     // 'cast' ':'
    case 25691:                     // 'castable' ':'
    case 25692:                     // 'catch' ':'
    case 25694:                     // 'child' ':'
    case 25695:                     // 'collation' ':'
    case 25697:                     // 'comment' ':'
    case 25698:                     // 'constraint' ':'
    case 25699:                     // 'construction' ':'
    case 25702:                     // 'context' ':'
    case 25703:                     // 'continue' ':'
    case 25704:                     // 'copy' ':'
    case 25705:                     // 'copy-namespaces' ':'
    case 25706:                     // 'count' ':'
    case 25707:                     // 'decimal-format' ':'
    case 25709:                     // 'declare' ':'
    case 25710:                     // 'default' ':'
    case 25711:                     // 'delete' ':'
    case 25712:                     // 'descendant' ':'
    case 25713:                     // 'descendant-or-self' ':'
    case 25714:                     // 'descending' ':'
    case 25719:                     // 'div' ':'
    case 25720:                     // 'document' ':'
    case 25721:                     // 'document-node' ':'
    case 25722:                     // 'element' ':'
    case 25723:                     // 'else' ':'
    case 25724:                     // 'empty' ':'
    case 25725:                     // 'empty-sequence' ':'
    case 25726:                     // 'encoding' ':'
    case 25727:                     // 'end' ':'
    case 25729:                     // 'eq' ':'
    case 25730:                     // 'every' ':'
    case 25732:                     // 'except' ':'
    case 25733:                     // 'exit' ':'
    case 25734:                     // 'external' ':'
    case 25736:                     // 'first' ':'
    case 25737:                     // 'following' ':'
    case 25738:                     // 'following-sibling' ':'
    case 25739:                     // 'for' ':'
    case 25742:                     // 'from' ':'
    case 25743:                     // 'ft-option' ':'
    case 25747:                     // 'function' ':'
    case 25748:                     // 'ge' ':'
    case 25750:                     // 'group' ':'
    case 25752:                     // 'gt' ':'
    case 25753:                     // 'idiv' ':'
    case 25754:                     // 'if' ':'
    case 25755:                     // 'import' ':'
    case 25756:                     // 'in' ':'
    case 25757:                     // 'index' ':'
    case 25761:                     // 'insert' ':'
    case 25762:                     // 'instance' ':'
    case 25763:                     // 'integrity' ':'
    case 25764:                     // 'intersect' ':'
    case 25765:                     // 'into' ':'
    case 25766:                     // 'is' ':'
    case 25767:                     // 'item' ':'
    case 25768:                     // 'json' ':'
    case 25770:                     // 'jsoniq' ':'
    case 25773:                     // 'last' ':'
    case 25774:                     // 'lax' ':'
    case 25775:                     // 'le' ':'
    case 25777:                     // 'let' ':'
    case 25779:                     // 'loop' ':'
    case 25781:                     // 'lt' ':'
    case 25783:                     // 'mod' ':'
    case 25784:                     // 'modify' ':'
    case 25785:                     // 'module' ':'
    case 25787:                     // 'namespace' ':'
    case 25788:                     // 'namespace-node' ':'
    case 25789:                     // 'ne' ':'
    case 25794:                     // 'node' ':'
    case 25795:                     // 'nodes' ':'
    case 25798:                     // 'object' ':'
    case 25802:                     // 'only' ':'
    case 25803:                     // 'option' ':'
    case 25804:                     // 'or' ':'
    case 25805:                     // 'order' ':'
    case 25806:                     // 'ordered' ':'
    case 25807:                     // 'ordering' ':'
    case 25810:                     // 'parent' ':'
    case 25816:                     // 'preceding' ':'
    case 25817:                     // 'preceding-sibling' ':'
    case 25820:                     // 'processing-instruction' ':'
    case 25822:                     // 'rename' ':'
    case 25823:                     // 'replace' ':'
    case 25824:                     // 'return' ':'
    case 25825:                     // 'returning' ':'
    case 25826:                     // 'revalidation' ':'
    case 25828:                     // 'satisfies' ':'
    case 25829:                     // 'schema' ':'
    case 25830:                     // 'schema-attribute' ':'
    case 25831:                     // 'schema-element' ':'
    case 25832:                     // 'score' ':'
    case 25833:                     // 'select' ':'
    case 25834:                     // 'self' ':'
    case 25839:                     // 'sliding' ':'
    case 25840:                     // 'some' ':'
    case 25841:                     // 'stable' ':'
    case 25842:                     // 'start' ':'
    case 25845:                     // 'strict' ':'
    case 25848:                     // 'switch' ':'
    case 25849:                     // 'text' ':'
    case 25853:                     // 'to' ':'
    case 25854:                     // 'treat' ':'
    case 25856:                     // 'try' ':'
    case 25857:                     // 'tumbling' ':'
    case 25858:                     // 'type' ':'
    case 25859:                     // 'typeswitch' ':'
    case 25860:                     // 'union' ':'
    case 25862:                     // 'unordered' ':'
    case 25863:                     // 'updating' ':'
    case 25866:                     // 'validate' ':'
    case 25867:                     // 'value' ':'
    case 25868:                     // 'variable' ':'
    case 25869:                     // 'version' ':'
    case 25872:                     // 'where' ':'
    case 25873:                     // 'while' ':'
    case 25876:                     // 'with' ':'
      try_NCName();
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
    lookahead1W(26);                // S^WS | '(:' | ':'
    shiftT(50);                     // ':'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    shift(69);                      // '['
    lookahead1W(273);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 70)                   // ']'
    {
      whitespace();
      parse_Expr();
    }
    shift(70);                      // ']'
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    shiftT(69);                     // '['
    lookahead1W(273);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    if (l1 != 70)                   // ']'
    {
      try_Expr();
    }
    shiftT(70);                     // ']'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    shift(281);                     // '{'
    lookahead1W(281);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_StatementsAndOptionalExpr();
    shift(287);                     // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    shiftT(281);                    // '{'
    lookahead1W(281);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_StatementsAndOptionalExpr();
    shiftT(287);                    // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    shift(147);                     // 'function'
    lookahead1W(246);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(35);                      // '('
    lookahead1W(98);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(38);                      // ')'
    lookahead1W(158);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 80)                   // 'as'
    {
      whitespace();
      parse_ReturnType();
    }
    lookahead1W(122);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 281:                       // '{'
      shift(281);                   // '{'
      lookahead1W(281);             // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
      whitespace();
      parse_StatementsAndOptionalExpr();
      shift(287);                   // '}'
      break;
    default:
      shift(134);                   // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function parse_ReturnType()
  {
    eventHandler.startNonterminal("ReturnType", e0);
    shift(80);                      // 'as'
    lookahead1W(254);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("ReturnType", e0);
  }

  function shift(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(JSONiqParser.TOKEN[l1], b1, e1 > size ? size : e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function shiftT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      b0 = e0;
      e0 = b1;
      eventHandler.whitespace(b0, e0);
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 22)               // S^WS
      {
        if (code != 37)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e > ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new self.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 5) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 5) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;
  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = JSONiqParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 8191; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = JSONiqParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = JSONiqParser.MAP1[(c0 & 15) + JSONiqParser.MAP1[(c1 & 31) + JSONiqParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }
        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (JSONiqParser.MAP2[m] > c0) hi = m - 1;
          else if (JSONiqParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = JSONiqParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 13) + code - 1;
      code = JSONiqParser.TRANSITION[(i0 & 15) + JSONiqParser.TRANSITION[i0 >> 4]];

      if (code > 8191)
      {
        result = code;
        code &= 8191;
        end = current;
      }
    }

    result >>= 13;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    return (result & 511) - 1;
  }
}

JSONiqParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 8191;
  for (var i = 0; i < 289; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 4317 + s - 1;
    var i1 = i0 >> 2;
    var i2 = i1 >> 2;
    var f = JSONiqParser.EXPECTED[(i0 & 3) + JSONiqParser.EXPECTED[(i1 & 3) + JSONiqParser.EXPECTED[(i2 & 15) + JSONiqParser.EXPECTED[i2 >> 4]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(JSONiqParser.TOKEN[j]);
      }
    }
  }
  return set;
};

JSONiqParser.MAP0 =
[ 71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 40, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 40, 40
];

JSONiqParser.MAP1 =
[ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181, 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440, 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 40, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 40, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 40, 40, 40, 40, 40, 40, 40, 70, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70
];

JSONiqParser.MAP2 =
[ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 40, 30, 40, 30, 30, 40
];

JSONiqParser.INITIAL =
[ 1, 24578, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290
];

JSONiqParser.TRANSITION =

];

JSONiqParser.EXPECTED =
[ 169, 185, 215, 1326, 231, 1001, 278, 928, 942, 1085, 320, 247, 263, 307, 336, 352, 368, 384, 400, 914, 2264, 430, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2268, 1707, 1603, 1403, 460, 1356, 1591, 491, 507, 517, 533, 1816, 1031, 2119, 564, 475, 580, 596, 625, 684, 700, 1905, 716, 1114, 747, 778, 788, 1693, 1145, 762, 804, 820, 836, 852, 868, 884, 900, 958, 988, 1017, 972, 1997, 1047, 1057, 1073, 1101, 1130, 2028, 1562, 1190, 1205, 1221, 1237, 1253, 1269, 1298, 1314, 1342, 1174, 1446, 1372, 1876, 2073, 1633, 668, 1388, 1419, 1434, 1467, 1483, 1499, 1515, 609, 1531, 1547, 1578, 444, 654, 640, 1619, 1649, 1662, 1678, 1723, 1738, 1754, 1770, 1786, 1802, 1832, 1848, 291, 1864, 2228, 1892, 1921, 1937, 199, 2149, 1953, 1969, 1985, 1282, 2013, 2044, 2060, 2089, 2105, 548, 2135, 2165, 2181, 2197, 2213, 1160, 2244, 731, 2260, 2264, 1457, 412, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 419, 2284, 2288, 2290, 2290, 2290, 2291, 2295, 2290, 2297, 2301, 2304, 2311, 2307, 2315, 2318, 2322, 2326, 2330, 2334, 2338, 2345, 2345, 3446, 2344, 2345, 3427, 2352, 3605, 2345, 4169, 2345, 2345, 2345, 3950, 4664, 4990, 4059, 4582, 2828, 4588, 2345, 4069, 4598, 2345, 4069, 4603, 2734, 3100, 2397, 2497, 2359, 2366, 2466, 2372, 2376, 2345, 2345, 4266, 2345, 2345, 2383, 3820, 2359, 2359, 2392, 2419, 2419, 2419, 2419, 2405, 2427, 2345, 2345, 2345, 2345, 2345, 2409, 2455, 3819, 2345, 2345, 3099, 3100, 3100, 3100, 2495, 2398, 2398, 2398, 2504, 2359, 2359, 2359, 2482, 2419, 2419, 2419, 2517, 2345, 2345, 2345, 2457, 2345, 3100, 3100, 3101, 2398, 2398, 2398, 2359, 2359, 2359, 2359, 2359, 2418, 2419, 2419, 2419, 2419, 2419, 2424, 2437, 2345, 2345, 2345, 2345, 4505, 2729, 2345, 2345, 2345, 2345, 4509, 5101, 4513, 2345, 2345, 3904, 2359, 2359, 2484, 2419, 2419, 2519, 2345, 3864, 2345, 4865, 3100, 3100, 2501, 2398, 2538, 2359, 2359, 2359, 2359, 2359, 2548, 2419, 2419, 2419, 2419, 2395, 2490, 2345, 2345, 2359, 2483, 2419, 2549, 2508, 3755, 2345, 4867, 4911, 2398, 2400, 2359, 2515, 2419, 2525, 3605, 3100, 2476, 2401, 2547, 2550, 2816, 4868, 2399, 2481, 2485, 2735, 2532, 2503, 2361, 2368, 4866, 2476, 2360, 2420, 4909, 2537, 2546, 2486, 2533, 2362, 2542, 2554, 2567, 2571, 2575, 2579, 2583, 2586, 2586, 2586, 2598, 2591, 2586, 2587, 2595, 2602, 2606, 2610, 2614, 2618, 2622, 2626, 2630, 4594, 2634, 2345, 2345, 2903, 2640, 2345, 2345, 2999, 2345, 2345, 2645, 2345, 2345, 2345, 2345, 2345, 2345, 4208, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 4460, 2655, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2655, 2345, 2345, 2636, 4128, 2345, 2345, 2345, 2345, 2635, 4127, 2345, 2345, 2345, 2345, 2635, 4127, 2794, 2345, 2345, 2345, 3016, 2798, 2345, 2345, 2345, 3017, 2799, 2345, 2345, 2345, 2806, 2729, 2876, 3308, 2345, 2915, 2345, 3310, 2345, 2922, 2345, 3536, 2683, 4475, 3831, 4927, 2685, 4422, 2850, 2345, 2345, 2345, 2345, 2345, 2345, 5004, 2345, 2345, 2345, 2345, 4417, 3024, 3547, 2854, 5007, 2861, 2345, 2345, 2345, 2345, 4422, 2869, 2345, 2345, 2345, 2345, 2345, 2868, 2729, 2345, 2345, 2345, 2345, 2345, 2873, 2345, 2345, 2345, 4443, 2345, 3549, 3338, 2880, 2345, 2345, 2345, 2345, 2887, 2729, 2345, 2345, 2345, 2883, 2880, 2345, 2345, 4951, 4956, 2345, 2345, 2345, 2345, 4604, 4971, 4982, 2345, 2345, 4805, 4988, 3762, 2345, 3965, 2345, 4436, 4591, 2907, 2345, 3192, 2909, 2345, 4490, 2345, 3191, 2908, 2345, 3491, 4849, 4476, 4920, 4920, 4920, 4849, 2720, 4477, 4477, 4477, 4918, 4922, 2683, 4476, 4863, 4478, 2719, 2684, 2432, 2429, 2431, 2563, 2345, 2345, 2345, 2345, 2345, 2345, 2984, 2345, 2345, 2345, 2511, 4068, 4075, 2345, 2345, 4081, 2345, 4085, 2345, 2345, 4099, 2345, 3067, 3768, 2729, 4088, 2928, 3046, 2947, 2932, 2935, 2938, 2940, 2940, 2944, 2345, 2951, 2956, 2345, 2345, 5022, 2729, 2345, 2345, 2345, 2345, 4180, 2345, 2345, 2345, 2345, 5023, 2345, 4654, 2345, 4496, 2345, 3077, 4168, 3570, 5100, 4176, 2345, 2345, 2345, 5024, 2345, 2345, 4147, 2345, 2345, 4258, 2345, 2345, 2339, 3845, 2345, 3726, 3911, 3122, 3918, 2345, 4757, 2345, 4949, 2345, 2961, 2974, 2978, 3641, 3718, 2988, 2996, 2722, 3003, 3008, 2345, 2998, 4205, 2345, 2952, 2345, 2345, 3697, 2345, 3015, 4630, 3021, 3029, 3033, 2412, 2991, 2723, 3040, 3497, 2345, 2951, 2956, 2345, 5067, 4831, 2345, 3623, 2964, 3050, 4101, 2345, 3156, 3059, 2345, 2345, 5115, 3712, 2387, 4578, 2345, 5120, 2458, 2509, 4221, 2345, 5107, 2345, 3202, 2763, 3060, 2345, 2345, 2345, 3733, 2345, 2951, 2733, 2345, 4755, 4856, 3111, 4236, 2557, 3086, 2345, 2348, 3162, 2345, 2345, 2527, 3154, 2345, 2345, 2347, 3161, 2345, 2345, 4684, 3167, 3432, 4676, 3096, 2345, 2345, 2345, 2345, 2472, 3106, 2345, 2345, 2345, 2345, 2346, 3105, 2345, 2345, 2345, 4878, 3110, 3119, 2345, 5067, 4832, 4234, 3023, 3126, 4109, 3602, 3171, 3176, 2345, 4069, 3180, 2345, 4170, 3176, 2345, 2345, 3187, 2345, 4682, 3217, 4094, 3257, 3196, 3972, 3190, 2345, 3974, 2345, 3251, 3209, 2345, 3973, 2345, 3214, 3218, 3223, 3227, 3231, 4192, 2345, 3229, 2345, 3237, 3606, 3242, 3246, 4319, 3250, 3238, 3230, 3255, 3261, 3266, 3266, 3266, 3274, 3278, 3262, 3262, 3262, 3285, 3289, 4198, 3290, 4959, 3294, 4246, 5038, 3298, 3302, 3306, 3316, 3322, 3329, 2345, 2345, 2345, 2345, 3926, 2345, 2345, 2875, 3333, 3337, 4593, 3342, 3347, 4397, 3357, 3361, 3365, 3366, 3366, 3370, 2345, 4118, 3376, 2345, 4445, 3382, 4945, 3392, 2721, 3398, 2829, 3406, 3410, 3417, 3424, 3004, 3431, 3947, 2345, 3426, 2345, 2345, 3115, 3658, 4038, 4560, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2650, 2345, 2345, 2454, 2345, 2345, 2345, 4867, 3100, 3100, 3100, 3100, 3101, 2398, 2398, 2398, 2398, 2545, 2359, 2359, 2359, 2359, 2359, 2464, 2419, 2419, 2419, 2419, 2419, 2395, 2470, 4119, 2345, 2345, 3437, 3706, 3578, 3394, 4115, 2345, 5085, 3441, 3522, 4170, 3451, 2345, 2345, 3132, 3489, 2345, 2345, 2345, 2345, 3143, 3495, 2345, 2345, 2345, 2345, 4516, 3484, 2345, 4070, 3455, 2345, 2345, 2345, 4071, 3456, 2345, 2345, 2345, 3460, 3464, 2345, 2345, 2345, 3098, 3100, 3100, 3100, 3100, 3100, 2397, 2398, 2398, 2398, 2398, 2398, 2480, 4118, 3830, 2345, 3469, 3584, 3579, 3476, 4935, 4215, 3011, 2345, 2345, 4515, 3483, 2345, 2345, 3191, 2898, 2345, 2345, 2345, 2892, 2345, 2345, 2345, 2897, 2345, 2345, 2345, 3963, 3232, 2345, 2345, 2345, 2345, 3517, 3490, 2345, 2345, 2345, 2345, 4515, 3520, 2345, 2345, 2345, 2345, 3982, 2345, 3526, 3585, 3535, 4117, 2786, 2345, 2345, 3541, 2345, 2345, 2345, 2345, 4530, 3545, 2345, 2345, 2345, 2345, 3541, 2345, 2345, 2345, 2345, 2456, 2345, 2345, 4910, 3100, 3100, 3100, 3100, 2476, 2398, 2398, 2398, 4531, 3232, 2345, 2345, 2345, 3560, 3565, 3576, 4115, 3204, 3583, 2345, 5095, 2345, 2345, 2345, 3163, 3064, 2345, 2345, 2345, 2345, 3219, 3071, 2345, 2345, 2345, 2345, 3157, 5054, 2345, 2345, 2345, 5094, 2345, 2345, 2345, 5053, 2345, 2345, 2345, 3590, 3966, 3561, 2345, 2521, 3137, 2345, 2345, 3754, 2981, 3141, 5078, 4842, 4667, 2967, 3147, 2528, 3155, 2345, 2751, 5076, 2686, 5082, 4996, 5091, 5099, 2345, 2345, 5072, 2345, 2345, 5105, 2345, 2345, 4450, 3818, 2345, 3825, 2345, 2460, 3835, 3839, 2345, 2345, 2345, 4069, 3843, 2345, 4928, 2345, 3443, 2345, 3828, 2345, 4052, 3148, 2345, 2386, 3114, 3150, 4047, 3149, 3635, 3635, 4052, 3113, 3150, 3150, 3150, 3980, 3634, 3112, 3635, 4053, 3622, 3635, 3150, 4974, 4976, 3627, 4978, 3631, 3640, 2345, 2345, 2345, 2345, 4428, 3779, 3723, 2345, 3595, 3645, 3649, 4091, 3655, 3663, 3667, 3671, 3675, 3679, 3680, 3684, 2345, 2801, 3689, 2345, 4841, 3695, 4295, 2763, 3350, 3199, 3691, 5040, 3485, 3701, 4584, 3465, 3705, 4823, 3710, 3716, 2345, 2345, 2802, 3690, 2345, 4616, 4756, 3722, 3731, 3957, 3201, 3737, 3750, 3759, 2345, 3940, 3766, 2345, 2345, 2345, 3312, 4745, 4749, 4761, 4765, 4769, 4773, 4777, 4781, 4785, 4788, 4792, 4795, 3504, 3232, 2345, 2345, 2345, 3505, 2345, 2345, 2345, 2646, 3772, 2345, 2345, 2345, 4427, 3778, 2345, 4164, 4095, 2345, 3785, 4903, 2651, 2345, 3753, 2345, 2345, 3793, 2345, 2345, 2345, 2345, 3098, 3100, 3100, 3100, 3100, 2398, 2398, 2398, 2398, 2478, 2359, 2359, 2345, 3797, 2345, 2345, 2345, 2345, 2345, 3801, 2345, 2345, 2345, 2345, 2345, 3805, 2345, 2345, 3846, 2810, 5004, 2345, 2345, 2345, 2345, 4151, 2345, 2815, 2820, 2833, 4077, 2838, 3850, 2345, 2345, 2345, 2345, 4737, 2345, 3855, 2458, 4716, 3837, 3863, 2345, 2345, 3172, 3871, 3924, 2345, 2340, 2345, 2345, 4149, 2345, 2339, 3845, 3723, 3089, 3789, 2345, 3930, 4129, 2345, 2776, 3914, 4135, 2728, 2345, 2345, 2345, 2345, 3210, 2345, 2784, 3082, 3938, 2345, 2790, 5046, 2345, 3935, 2345, 3944, 2730, 3877, 2345, 3352, 2732, 3955, 2731, 4157, 4157, 4157, 3351, 2732, 2732, 2732, 3531, 4156, 4716, 4157, 4718, 3878, 4157, 2732, 2345, 2345, 2345, 2345, 3851, 2345, 2345, 2345, 2345, 2345, 3850, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 3612, 2663, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 3780, 3961, 2345, 2345, 3920, 3970, 3978, 3986, 3990, 3994, 3998, 4001, 4005, 4007, 4011, 2345, 2345, 2345, 4015, 2345, 3606, 4752, 4107, 3553, 4020, 4024, 4643, 4888, 4028, 2345, 4851, 2811, 4032, 4826, 4037, 4042, 4046, 2345, 2345, 4016, 2345, 3746, 4051, 3551, 3877, 4057, 3636, 4570, 4063, 2345, 2345, 2345, 2780, 2345, 2345, 2345, 2510, 4067, 4105, 2924, 4156, 4113, 2386, 4123, 4538, 2345, 2345, 2635, 4127, 2345, 2345, 2345, 2345, 2641, 4133, 2345, 2345, 2345, 2345, 2778, 4181, 2345, 2457, 2345, 2345, 4984, 5025, 2345, 4139, 2345, 2855, 3611, 2345, 2857, 2345, 2345, 3386, 2345, 2856, 2345, 2345, 3830, 3616, 2345, 3445, 2345, 4145, 2345, 4670, 3724, 4155, 3572, 3114, 4161, 2345, 2345, 2345, 3472, 2729, 2345, 2345, 2345, 2345, 2842, 2345, 2345, 2345, 2345, 3081, 2846, 2345, 2345, 2345, 2345, 2345, 2739, 2692, 3821, 2749, 2757, 2345, 2761, 2767, 2345, 2771, 4802, 2345, 4185, 3077, 3725, 4231, 3041, 4220, 2345, 5087, 2729, 2345, 2345, 2911, 4134, 2345, 2345, 4172, 2345, 2345, 2345, 2354, 3845, 2345, 3723, 3606, 2458, 3787, 3901, 2345, 3781, 3537, 4190, 2345, 2345, 2910, 4196, 3378, 3685, 3607, 4673, 4202, 2823, 2345, 4033, 2729, 2345, 3931, 2956, 2345, 3925, 4214, 4219, 4225, 4240, 4244, 4264, 2345, 4250, 2345, 4252, 2345, 2345, 4256, 2345, 4251, 3343, 4538, 4228, 4262, 2345, 4270, 3353, 2345, 4610, 2345, 3183, 3130, 2345, 2345, 2345, 2346, 3136, 2345, 2345, 2345, 2345, 3183, 3130, 2345, 2345, 2673, 2345, 2345, 2677, 3814, 2690, 2696, 2700, 2704, 2708, 2712, 2716, 3744, 2727, 4275, 4284, 4288, 4419, 2668, 3659, 2733, 4292, 4308, 4420, 3556, 3556, 3556, 4317, 3530, 4421, 4335, 4323, 3555, 3529, 3568, 3025, 2669, 3556, 4330, 4339, 4341, 4333, 4326, 4345, 4349, 4351, 2345, 2345, 2345, 2345, 3897, 2992, 2345, 4313, 4355, 4359, 4390, 4363, 4367, 4371, 4375, 4379, 4381, 4383, 2345, 2345, 2345, 4937, 4387, 4657, 4394, 4401, 4460, 2827, 4636, 4599, 4278, 4407, 4411, 5122, 3727, 4426, 4432, 2345, 4440, 4449, 2345, 2345, 4938, 3774, 2657, 4454, 4458, 3325, 2345, 3053, 4464, 4468, 2345, 2345, 2345, 5128, 4474, 2345, 2345, 2345, 4482, 2345, 2345, 4271, 2888, 2345, 2345, 2345, 2345, 3233, 2345, 2345, 2345, 4962, 2864, 3650, 2893, 2345, 3727, 4483, 2345, 2345, 2345, 3055, 4487, 4494, 2345, 2345, 3890, 4311, 2433, 2446, 3618, 2826, 4186, 5066, 4947, 2733, 2345, 2345, 2345, 3413, 4500, 2345, 2345, 2345, 2345, 3420, 2800, 4414, 4622, 4520, 3318, 2345, 2970, 5060, 2345, 2345, 2345, 2377, 4524, 2345, 2345, 2345, 2345, 3869, 2345, 2345, 2345, 2345, 4171, 3876, 2345, 2345, 2345, 4069, 3870, 2345, 4952, 4311, 2443, 4535, 2827, 3865, 3433, 2345, 2345, 2345, 2379, 4543, 2345, 2345, 2345, 3858, 2345, 2345, 2345, 2345, 3859, 2345, 2345, 2345, 2957, 3045, 2345, 2345, 2377, 4548, 2345, 2345, 2345, 2345, 3281, 4553, 2345, 2345, 2345, 2378, 4549, 4470, 2345, 4558, 2440, 4564, 3203, 4831, 2345, 2345, 2377, 4568, 2345, 2345, 2345, 3951, 2345, 2345, 2345, 4574, 2345, 4640, 2345, 4069, 4647, 2560, 4651, 4661, 2345, 4680, 4539, 4642, 5031, 2345, 5014, 4688, 4830, 4815, 4403, 3883, 4642, 4692, 4628, 4816, 4696, 4696, 4702, 4830, 4706, 4714, 4714, 4722, 2414, 2449, 3808, 4731, 2414, 4906, 2450, 4735, 4725, 4727, 4741, 4829, 2345, 2345, 2345, 2345, 3925, 2345, 2772, 3501, 4141, 3509, 4115, 4215, 3074, 2345, 2345, 3513, 4799, 2345, 2345, 2345, 2345, 4809, 3015, 4813, 4820, 4967, 2388, 2680, 4210, 4836, 4554, 2345, 3372, 2345, 2345, 3384, 2345, 2345, 3372, 2345, 2345, 2856, 2345, 2345, 3589, 3594, 3599, 4708, 3872, 4840, 4846, 2345, 4710, 4855, 2345, 2345, 4544, 4860, 2834, 3742, 4965, 3080, 4872, 4877, 4882, 2345, 2345, 2345, 2345, 3606, 4886, 2345, 2345, 2345, 3478, 4892, 2345, 2345, 2345, 3882, 2663, 2459, 3092, 3887, 2345, 2345, 3894, 2345, 2345, 2345, 2355, 2345, 3479, 2345, 2345, 2345, 2345, 4897, 3616, 2345, 2345, 4544, 4915, 3035, 4280, 2918, 3446, 4873, 4698, 4926, 2345, 2345, 2345, 2345, 2345, 4932, 2345, 2345, 2345, 2345, 3606, 4942, 2345, 2345, 4435, 3377, 3907, 2902, 2345, 4489, 2729, 2345, 3651, 2902, 2345, 3192, 2909, 2345, 4994, 5020, 5001, 3205, 5011, 2345, 2345, 2345, 2345, 2741, 2745, 2345, 2345, 2345, 2345, 4170, 4608, 2345, 2345, 4614, 4989, 4620, 4626, 3755, 4950, 2345, 4634, 2345, 5013, 2345, 2744, 2345, 2345, 2345, 2345, 2345, 2743, 2345, 2345, 2345, 2345, 2345, 2743, 4900, 2345, 4501, 4915, 3036, 5018, 3447, 3864, 5029, 2345, 2345, 2345, 4170, 5035, 2345, 2345, 2345, 2345, 4303, 5044, 2345, 2345, 2345, 2345, 5050, 2345, 2345, 2345, 2345, 4304, 4900, 2345, 3811, 3740, 4997, 5058, 5064, 2345, 2345, 2345, 5071, 2345, 2345, 2345, 3269, 2345, 2345, 2345, 4297, 4301, 2345, 3402, 2800, 2345, 2345, 2345, 2345, 3401, 4528, 2345, 2345, 2345, 2345, 3401, 4528, 4470, 4299, 2345, 2345, 3270, 2345, 5111, 4997, 4577, 2345, 2345, 2753, 2345, 4893, 5116, 2345, 2752, 2491, 2458, 2345, 5126, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2661, 3388, 2667, 2345, 7267, 5893, 5132, 5144, 5141, 5151, 5153, 5153, 5153, 5153, 5148, 5176, 5152, 5153, 5153, 5153, 5159, 5163, 5176, 5153, 5153, 5169, 5164, 5153, 5180, 5155, 5154, 5168, 5151, 6159, 5173, 5199, 5205, 5205, 5205, 5209, 5209, 5201, 5213, 5217, 5220, 5224, 5228, 5245, 5232, 5242, 5234, 5238, 5236, 5249, 5252, 7269, 7026, 5260, 5273, 5276, 5276, 5276, 5255, 5821, 5295, 5276, 5276, 5276, 5276, 5268, 5730, 6588, 6270, 5301, 5276, 5276, 5254, 6597, 5821, 6646, 6646, 6646, 6646, 5394, 5396, 5325, 5449, 5322, 5396, 5396, 5325, 5276, 5384, 5428, 5333, 5409, 5274, 5276, 5276, 5276, 5286, 5290, 7174, 5276, 6844, 7218, 6005, 5276, 5276, 5276, 6390, 6115, 6646, 6647, 5323, 5396, 5397, 5400, 5428, 5428, 5428, 5428, 6645, 6646, 6646, 5398, 5400, 5428, 5345, 6844, 7217, 5353, 5276, 5266, 5276, 5276, 5388, 7455, 5457, 5396, 5396, 5396, 5396, 5276, 5399, 5402, 6779, 5408, 6667, 5275, 5276, 5275, 5276, 5276, 6239, 5276, 6839, 5410, 6667, 5275, 5276, 5275, 6561, 5276, 5275, 6839, 6843, 7454, 7155, 5276, 5276, 7229, 5276, 5276, 6466, 5276, 5276, 6526, 5276, 5276, 5276, 5302, 5276, 5276, 6646, 5393, 5396, 5396, 5396, 5400, 5407, 6668, 5276, 5276, 5268, 6066, 5402, 5428, 5428, 5428, 5429, 6646, 6646, 6646, 5395, 5396, 5396, 5396, 5326, 5368, 5419, 5276, 5276, 5276, 5305, 5401, 5428, 5428, 5428, 5430, 6646, 5427, 5428, 5428, 5428, 6644, 6646, 6646, 5402, 5387, 5276, 5276, 5276, 5307, 6771, 6646, 5394, 5396, 5396, 5398, 5427, 5276, 5276, 5268, 6630, 5397, 5403, 5276, 5276, 5269, 5731, 6036, 5400, 5400, 5402, 5428, 6644, 5402, 5428, 5428, 6643, 6646, 5368, 5400, 5427, 6643, 6646, 6646, 6646, 5396, 5396, 5396, 5397, 5387, 6646, 5395, 5324, 5368, 5276, 5999, 5276, 5276, 7234, 6237, 5276, 6239, 6237, 5401, 6643, 5393, 5324, 5415, 5434, 5460, 5464, 5463, 5462, 5461, 5326, 7445, 6108, 6418, 5509, 5541, 5438, 5442, 5508, 5508, 5508, 5508, 5486, 5515, 5454, 5468, 5472, 5491, 5543, 5496, 5508, 5508, 5538, 5446, 5582, 5487, 5506, 5581, 5513, 5475, 5519, 5535, 6805, 6808, 5547, 6811, 6814, 6815, 6816, 5551, 5554, 5558, 5569, 5573, 5579, 5492, 5586, 5590, 5594, 5598, 5605, 5604, 5601, 5609, 5613, 5561, 6981, 5276, 5276, 5276, 5308, 5312, 7372, 5276, 5276, 5276, 5309, 7137, 5276, 5276, 5276, 5329, 5276, 6389, 5276, 5276, 6557, 5276, 6391, 5276, 5276, 5275, 5276, 6392, 6392, 5276, 5276, 5279, 5276, 6282, 5276, 5276, 5276, 5366, 5276, 6000, 6885, 5910, 7281, 5626, 5297, 5629, 5276, 5276, 7348, 5276, 5276, 7354, 5276, 5276, 5276, 5631, 5640, 5899, 5276, 5647, 5276, 6987, 5263, 5186, 5654, 5657, 5659, 5660, 5664, 5668, 5673, 5672, 5677, 5679, 5680, 5680, 5684, 5686, 5693, 5688, 5700, 5688, 5697, 5689, 5704, 5276, 5276, 7355, 5276, 5276, 5276, 5648, 6027, 6933, 6281, 5898, 5276, 5276, 5276, 5367, 5276, 5276, 5276, 5368, 5400, 5708, 6023, 5276, 5276, 5281, 7411, 7471, 7426, 5276, 5276, 6043, 5135, 5276, 5276, 5281, 7468, 6467, 5276, 5716, 5276, 5276, 5721, 6061, 5339, 5276, 5276, 5304, 5276, 5341, 5737, 5745, 5751, 5749, 5276, 5276, 5276, 5369, 6219, 5751, 5276, 5276, 5306, 5310, 6765, 5276, 5276, 6988, 5276, 6526, 5277, 6886, 6113, 5784, 5276, 5793, 7239, 5808, 5855, 5812, 5831, 7055, 5318, 5276, 5276, 5276, 5372, 5348, 7452, 5827, 5832, 7056, 5137, 5276, 5276, 5276, 5376, 5368, 5276, 6525, 5276, 5414, 5276, 7452, 7443, 5276, 5276, 7419, 6200, 5276, 5925, 5276, 5276, 5276, 7249, 5717, 5276, 5276, 5276, 5387, 5795, 7243, 5854, 5845, 7241, 5851, 5855, 5846, 7242, 5852, 5856, 5317, 5850, 5854, 5845, 5898, 5860, 5276, 5276, 5276, 5388, 6362, 5276, 5854, 5876, 5318, 5276, 5276, 7441, 6519, 7240, 5851, 5855, 5877, 5898, 5881, 5839, 5276, 5276, 5370, 5276, 5276, 5853, 5885, 5318, 5276, 5276, 7452, 6134, 7239, 6135, 5854, 5886, 5898, 6404, 5870, 6865, 5276, 5276, 6117, 5869, 6864, 5898, 5276, 6867, 5276, 5276, 5276, 5617, 6117, 5890, 6866, 5276, 5276, 5276, 5620, 6857, 5276, 6719, 6723, 5276, 5276, 7455, 6886, 6721, 5898, 5276, 5276, 5373, 5276, 5914, 5276, 5898, 7023, 5934, 5938, 5942, 5945, 5948, 5949, 5949, 5950, 5954, 5954, 5954, 5954, 5954, 5958, 5961, 5276, 5277, 5921, 5930, 5276, 6659, 6079, 5966, 6872, 6872, 5276, 5276, 5276, 5650, 6487, 5276, 5711, 6194, 7445, 7444, 5368, 5276, 6000, 6525, 5276, 7025, 5302, 6259, 5276, 5370, 5979, 6510, 5997, 5276, 6523, 5276, 5276, 6660, 6080, 5967, 5898, 6890, 5997, 5276, 6889, 5276, 5276, 5276, 5841, 6010, 5276, 6606, 5276, 5276, 5276, 5822, 6016, 5276, 5276, 5276, 5787, 5276, 6605, 6017, 5276, 5277, 5962, 6001, 7450, 5276, 5276, 5276, 5826, 5831, 5712, 6195, 7052, 5276, 5368, 5276, 5276, 5366, 5369, 6121, 5276, 6513, 5276, 6559, 5276, 5276, 5386, 5282, 5276, 6093, 5276, 5276, 5276, 5864, 6029, 5276, 5276, 5276, 5896, 6848, 5998, 5276, 6523, 6792, 5276, 5276, 6397, 7112, 6033, 6047, 6053, 5898, 5276, 6034, 6048, 6054, 5276, 5278, 5281, 6211, 6035, 6049, 6055, 5276, 5278, 5909, 5276, 5279, 6836, 6888, 5276, 5276, 5276, 7452, 5761, 6526, 6233, 6268, 5276, 5280, 5303, 6536, 5276, 6268, 6140, 6038, 6070, 5276, 5276, 5400, 5400, 5400, 5400, 5401, 6066, 6588, 6039, 5894, 5276, 7456, 5276, 5276, 5276, 6002, 5276, 5276, 5276, 5975, 5277, 6078, 6084, 5367, 6266, 7445, 6236, 5999, 6524, 5276, 6100, 6037, 6070, 5276, 5276, 5477, 5481, 6630, 6587, 6090, 5894, 5276, 6080, 6086, 5276, 5276, 5478, 5482, 6099, 5276, 5276, 5276, 6003, 5276, 5276, 6036, 6107, 5276, 5276, 5276, 6072, 6033, 6588, 6106, 5276, 5276, 5276, 6073, 6085, 5276, 5276, 7023, 6099, 5276, 5276, 5281, 6583, 5728, 5732, 6105, 5894, 5729, 5733, 6106, 5276, 5281, 6629, 6586, 5727, 5731, 6104, 6108, 5276, 5276, 5276, 6117, 5890, 5371, 6000, 6125, 6268, 6456, 5276, 6388, 5276, 5276, 5276, 6523, 5276, 7417, 6416, 5276, 5276, 5276, 6119, 5276, 6524, 6525, 6659, 6322, 5276, 5276, 5276, 6074, 5363, 7445, 5276, 5370, 6000, 6236, 5276, 6320, 5799, 5803, 5276, 5276, 5276, 6127, 6319, 5798, 5802, 5276, 5276, 6321, 5276, 7260, 7446, 5368, 6001, 6320, 5799, 5801, 5276, 5276, 6319, 5797, 5276, 7073, 5276, 7258, 7447, 5276, 7447, 5302, 7075, 5803, 5276, 5276, 7072, 7076, 5276, 5281, 7468, 7477, 5276, 5276, 7073, 7260, 7446, 5276, 7074, 5802, 5276, 5285, 5289, 7173, 6339, 7258, 7447, 6339, 7077, 5276, 6117, 7076, 5276, 6342, 5276, 6117, 6342, 6139, 6117, 6200, 6978, 5276, 6978, 5276, 6978, 5276, 7445, 6197, 5276, 6237, 6722, 5276, 5276, 5372, 7365, 6199, 6197, 5276, 6199, 5276, 5925, 7445, 6198, 6198, 6198, 5276, 5276, 5926, 6198, 5276, 6896, 6896, 5389, 6536, 5368, 5525, 6145, 5276, 5276, 5276, 6133, 6358, 5367, 5276, 5276, 6198, 6537, 6199, 6536, 6200, 5276, 6537, 5276, 5276, 5276, 6480, 6167, 6152, 6171, 6175, 6179, 6181, 6185, 6185, 6181, 6189, 6189, 6189, 6189, 6189, 6191, 5276, 5276, 5564, 6363, 6206, 5276, 5276, 5276, 6199, 6200, 6251, 5898, 5276, 5276, 5565, 5371, 5276, 5276, 5575, 6934, 6200, 5276, 7454, 5803, 7356, 5276, 6293, 5276, 5804, 5276, 5287, 5291, 7160, 7066, 6196, 5276, 5285, 6217, 6223, 7106, 6232, 5276, 5287, 7149, 7129, 6243, 5276, 7260, 5276, 5288, 7150, 7141, 6257, 5276, 5789, 5276, 5276, 5276, 6202, 6263, 5276, 5276, 5276, 6201, 5367, 5369, 5387, 6274, 6253, 5278, 6018, 5276, 5276, 5642, 5276, 5276, 5276, 6388, 6113, 5193, 6286, 6935, 6040, 6287, 6936, 6041, 5276, 5276, 5191, 5195, 6288, 6937, 6042, 5276, 5276, 5276, 6226, 5385, 6114, 6252, 5276, 5307, 5311, 5315, 7420, 7354, 5276, 5276, 5739, 7397, 7403, 6298, 6329, 5803, 5276, 5276, 6006, 6299, 6330, 5276, 5276, 5276, 6265, 6300, 6331, 5276, 5276, 5753, 5752, 5387, 6275, 5897, 5276, 5328, 6552, 6547, 5803, 6197, 7453, 7421, 6267, 6392, 5479, 6312, 6329, 5276, 6458, 5480, 6313, 6330, 5276, 5276, 5764, 5276, 5385, 6246, 6253, 5276, 5363, 5367, 5276, 5276, 6536, 6317, 6267, 5276, 5276, 5276, 5621, 6392, 7412, 6327, 6332, 6301, 5803, 5276, 5276, 5815, 7444, 6522, 5276, 5276, 5375, 5276, 5276, 5365, 5276, 5276, 5916, 5276, 5276, 5276, 6294, 5368, 5386, 6336, 5276, 5365, 5276, 6535, 5276, 6820, 7444, 5276, 5276, 6519, 6308, 5276, 6198, 5276, 7452, 5280, 5276, 5276, 5276, 6307, 6197, 5276, 6843, 5276, 6356, 6250, 6678, 5276, 5276, 5276, 6368, 5276, 6844, 5894, 5276, 5369, 5998, 6524, 5276, 5276, 5276, 5277, 6208, 6362, 5276, 5276, 5276, 6371, 5276, 6846, 5276, 5276, 5898, 5276, 6005, 5276, 5276, 6005, 5276, 5276, 6846, 6004, 6002, 6846, 6005, 6005, 6005, 5276, 5276, 6004, 5276, 5276, 6005, 6847, 5276, 5276, 5995, 6375, 5894, 5276, 6520, 6383, 5276, 5276, 5276, 6404, 5871, 6112, 7024, 6387, 6111, 5276, 5276, 5276, 5363, 6401, 6761, 6409, 6972, 6429, 6432, 6433, 6434, 6438, 6438, 6438, 6438, 6441, 6443, 6444, 6444, 6451, 6451, 6451, 6451, 6448, 6452, 5276, 5276, 5276, 6425, 5348, 6566, 5276, 5276, 5276, 6463, 6370, 6494, 5276, 5276, 5973, 5276, 5362, 6468, 5276, 6469, 6475, 5276, 5276, 5276, 6519, 5276, 6484, 5276, 5276, 6000, 5389, 6228, 6477, 5276, 5276, 6012, 5276, 6112, 5276, 5276, 5276, 6520, 5276, 5276, 5276, 6396, 5304, 6197, 5276, 5276, 6060, 6059, 5276, 6499, 6507, 5276, 5386, 5283, 5276, 5276, 6395, 5276, 5276, 5279, 6208, 6518, 5276, 5276, 5359, 5276, 5276, 5276, 6524, 5276, 5276, 6534, 6534, 5276, 5388, 5276, 5284, 6546, 6618, 5276, 5276, 6109, 5903, 6553, 6548, 5276, 5276, 6116, 5998, 5349, 6567, 5276, 5276, 5276, 6392, 6611, 5305, 6199, 5276, 6537, 6265, 5276, 6236, 6525, 5276, 6830, 6573, 5818, 5276, 6831, 5501, 5819, 5276, 6832, 5502, 5820, 6830, 5500, 5818, 5276, 5422, 6847, 5276, 5522, 7448, 5276, 5636, 6001, 5998, 6565, 5276, 5276, 5276, 6525, 5276, 5276, 7449, 6887, 6493, 5276, 5641, 6843, 5276, 5276, 5276, 6237, 6537, 5276, 6268, 6140, 5276, 6390, 5276, 6459, 6571, 6577, 5821, 5276, 5276, 5276, 6657, 5276, 7285, 5499, 6578, 5276, 5276, 6886, 5279, 5276, 5649, 6028, 6094, 5276, 6458, 5276, 5276, 5276, 6526, 7024, 6877, 5256, 6579, 5276, 5276, 5276, 6528, 6598, 5276, 5276, 5276, 6536, 5276, 6592, 5276, 5276, 5276, 6620, 5276, 6391, 6459, 5276, 5739, 7123, 6938, 5281, 6583, 6579, 5276, 5741, 7125, 6332, 6602, 5276, 6459, 5276, 5741, 7125, 6522, 5276, 6404, 5871, 5280, 5276, 5302, 5276, 5757, 5276, 5356, 6392, 6526, 5276, 5276, 6118, 5279, 6610, 5276, 5276, 5276, 6783, 5367, 6615, 5276, 5276, 5276, 6784, 5276, 6919, 6923, 5276, 5777, 5276, 5276, 5327, 6542, 5280, 6537, 6266, 5276, 5788, 6264, 5276, 5288, 7184, 7189, 5276, 5277, 5276, 5367, 5276, 6268, 6141, 6712, 6424, 5276, 5276, 6126, 5898, 5276, 5276, 5632, 6626, 6634, 5276, 5276, 6131, 6414, 6108, 5276, 5276, 6395, 5276, 6844, 5276, 5276, 5917, 5276, 6521, 5276, 6395, 6522, 6729, 6846, 5276, 5375, 6502, 6651, 6664, 6672, 6682, 6685, 6689, 6693, 6693, 6693, 6695, 6697, 6697, 6697, 6697, 6701, 6702, 6702, 6702, 6703, 6707, 5276, 6711, 6423, 5276, 5276, 5276, 6735, 5276, 6716, 5276, 7351, 5276, 6727, 5276, 7420, 6268, 6969, 6745, 5276, 5276, 5276, 6785, 5450, 5276, 5276, 5276, 6793, 6743, 6094, 5276, 6750, 6751, 5276, 5276, 5276, 6844, 6212, 5276, 5276, 5276, 6847, 5276, 5276, 6755, 5276, 5276, 6238, 5276, 6524, 6798, 6267, 6759, 6771, 6766, 5276, 5276, 5276, 6877, 5194, 6287, 5276, 7275, 5276, 5276, 6248, 5276, 5276, 6776, 6772, 6767, 6790, 5276, 6792, 5276, 5907, 5276, 6269, 5894, 7260, 7023, 5276, 5276, 5276, 6111, 6392, 6422, 6847, 5276, 6100, 5276, 6888, 5276, 5276, 6521, 5276, 5276, 6194, 7446, 5368, 7418, 5276, 5276, 6293, 5276, 5276, 5276, 6269, 6206, 7033, 6523, 6797, 6266, 5312, 5316, 5276, 5276, 5276, 6921, 5313, 5317, 5276, 5276, 5276, 6933, 6792, 6791, 5276, 5276, 6305, 5304, 6420, 6424, 5276, 5276, 6319, 6922, 5276, 5276, 6118, 5276, 5374, 5276, 5276, 6535, 5276, 5276, 7034, 7452, 6826, 5276, 5908, 5278, 6495, 5276, 6519, 5276, 5276, 5276, 5281, 5255, 6598, 5276, 7033, 5863, 6828, 6852, 5314, 5318, 5276, 5276, 6913, 5276, 5276, 5276, 6958, 6858, 5318, 5276, 5276, 6321, 5800, 6857, 5317, 5276, 5276, 6340, 5802, 6535, 5276, 6862, 5276, 6022, 5753, 5276, 5278, 5276, 5276, 7210, 5276, 6871, 5276, 5276, 5276, 7191, 6199, 6200, 5276, 5276, 5276, 7042, 6425, 5276, 5276, 6876, 6887, 5276, 5367, 6820, 7444, 5276, 6002, 5276, 6194, 7052, 5276, 6637, 6520, 5276, 6536, 5276, 6822, 5276, 5276, 6341, 5276, 7204, 5276, 5276, 5276, 7203, 5367, 5276, 6786, 5276, 5276, 6392, 6921, 6821, 5276, 5276, 6904, 5276, 5276, 6388, 6391, 6480, 5276, 5276, 5276, 7239, 5276, 6478, 5367, 5276, 6095, 5276, 5276, 6394, 5276, 6897, 5276, 5276, 6883, 6535, 5276, 5371, 6904, 5364, 5276, 6894, 5276, 6110, 5276, 5276, 5981, 7461, 7451, 5276, 5276, 5276, 5983, 7470, 5990, 5283, 6536, 6901, 5276, 6114, 5276, 6001, 6911, 5374, 6535, 5368, 5803, 5276, 6392, 6412, 5369, 5276, 5276, 5366, 5364, 6537, 6364, 5364, 5276, 5367, 5371, 5366, 5364, 5276, 5276, 6536, 5365, 5276, 5366, 5276, 5366, 5367, 6538, 6538, 6538, 5773, 5767, 5769, 5771, 5771, 5772, 5276, 7445, 5183, 5276, 5282, 5917, 7454, 6113, 6917, 6942, 7063, 5336, 6951, 6962, 6966, 5531, 6992, 6995, 6995, 6998, 7003, 7002, 7002, 7004, 7008, 7009, 7015, 7013, 7013, 7013, 7013, 7019, 7022, 7030, 5276, 5276, 6115, 5375, 5528, 6927, 5276, 7445, 6842, 7453, 6149, 6156, 6163, 7038, 6983, 5276, 5276, 6392, 7229, 5277, 5276, 5276, 7046, 7060, 5276, 7070, 5276, 6116, 5999, 5276, 6117, 5276, 5276, 5364, 5276, 5276, 5276, 7240, 7085, 5276, 5276, 5276, 7337, 5349, 5276, 6906, 7086, 5276, 6117, 5368, 5276, 5276, 6907, 5276, 7090, 5276, 6120, 5276, 5368, 5389, 6113, 7094, 5276, 5276, 5276, 7338, 6840, 5276, 6782, 7444, 6985, 5276, 5896, 5276, 6197, 5276, 5276, 7024, 5276, 7104, 5277, 5276, 5276, 6947, 6946, 5276, 6378, 5276, 5276, 5276, 7356, 5276, 5276, 7356, 6396, 7111, 7118, 6379, 5276, 7119, 6094, 5276, 5276, 6405, 5872, 5898, 6956, 6954, 5276, 5276, 6422, 6847, 7144, 5276, 5276, 5276, 7363, 5285, 5289, 7113, 7142, 5286, 7148, 7114, 7143, 6201, 5367, 5276, 5276, 6458, 5480, 6298, 7452, 7154, 5276, 5895, 5290, 7159, 7164, 5318, 7066, 5318, 5276, 5276, 6458, 5481, 6301, 6676, 5276, 5276, 6199, 5276, 5276, 5276, 6879, 7180, 5276, 5276, 5276, 7364, 5290, 7174, 7179, 5276, 5276, 7178, 5276, 5276, 5276, 7380, 5740, 7169, 5276, 5276, 6467, 5276, 6677, 6197, 5276, 5924, 7196, 6975, 5276, 5276, 6467, 7049, 5285, 7195, 7185, 6391, 6116, 5276, 5276, 5276, 7208, 7454, 5276, 5276, 6473, 6477, 6526, 5276, 7449, 5276, 6197, 6520, 5276, 7446, 5276, 5375, 7224, 5276, 5276, 5276, 7381, 7214, 5276, 5276, 5276, 7408, 7223, 6847, 5276, 5276, 6479, 5276, 7222, 6425, 5276, 6201, 6886, 6492, 7200, 5276, 6237, 5276, 5276, 6841, 6675, 5276, 5276, 5387, 5276, 5276, 6488, 5276, 6878, 6781, 5276, 5276, 6514, 5276, 5276, 6879, 7230, 5276, 5276, 5276, 7446, 7228, 5276, 5276, 6249, 7452, 5276, 5389, 5276, 6198, 6197, 5276, 6000, 5276, 6238, 5276, 6524, 6201, 5276, 6201, 7449, 5276, 6193, 7445, 5276, 5280, 6209, 6213, 5276, 6520, 5276, 5281, 6065, 6587, 6879, 7455, 5276, 5276, 6525, 6526, 6659, 6079, 7450, 5276, 6395, 7455, 6621, 6847, 5276, 7238, 5276, 6622, 5276, 5276, 6526, 7416, 5276, 6622, 5276, 7247, 6620, 7455, 5276, 5276, 6530, 5276, 7391, 6527, 6621, 6847, 5276, 5276, 6537, 5276, 5276, 6536, 6621, 6847, 7455, 5387, 5388, 6847, 5388, 7344, 5276, 5276, 7229, 7453, 5386, 5423, 5389, 5276, 5276, 6593, 5276, 5388, 5276, 5386, 5388, 7253, 5276, 7258, 7446, 6196, 5276, 5363, 5276, 6210, 6887, 5276, 5894, 5276, 5276, 5276, 5971, 7257, 5276, 5916, 6640, 7264, 6258, 5276, 5189, 5276, 7260, 5916, 7259, 6503, 7097, 7283, 7273, 5724, 7100, 7135, 7279, 6930, 7132, 7289, 7293, 7302, 7295, 7297, 7306, 7298, 7317, 7310, 7311, 7315, 7318, 7326, 7326, 7328, 7324, 7322, 7332, 7335, 5276, 6218, 5750, 5276, 5276, 7362, 7366, 7364, 7342, 5276, 6467, 5389, 5281, 5276, 5276, 6621, 5276, 5276, 6393, 5276, 5915, 5276, 6227, 6476, 5276, 5377, 6746, 5276, 5386, 5276, 5276, 5276, 7449, 5276, 5276, 7360, 7370, 7376, 7385, 5276, 5276, 5276, 7450, 5276, 5276, 6529, 7386, 5276, 6265, 5276, 5276, 5378, 6094, 7392, 5276, 5276, 5276, 7451, 7342, 7445, 6201, 5276, 6266, 5276, 5276, 5382, 5400, 5400, 5400, 5427, 6389, 6113, 5276, 5276, 6235, 6234, 5276, 5276, 5276, 7457, 5276, 6526, 6716, 7433, 7396, 7402, 5276, 5276, 6733, 6739, 7403, 5276, 5276, 5276, 7466, 7408, 7398, 7404, 6844, 5276, 6847, 5276, 6267, 6140, 5276, 5388, 7230, 5276, 5414, 5400, 5400, 5400, 5428, 7342, 7447, 7451, 5276, 6268, 5276, 6237, 6268, 5276, 5276, 7356, 6110, 6268, 5276, 5276, 5276, 5643, 7409, 5986, 7425, 5276, 6292, 5276, 5276, 5740, 7124, 7030, 7410, 5987, 7426, 5276, 6306, 5305, 5276, 5276, 6201, 5276, 5276, 5276, 5739, 7168, 7411, 5988, 7427, 5276, 6323, 7446, 6117, 5276, 5371, 5276, 5276, 7454, 5276, 6887, 5276, 5985, 5989, 6236, 6846, 6003, 5276, 6004, 5276, 6004, 6002, 5276, 6845, 5276, 5276, 5276, 6802, 5311, 6560, 7449, 5276, 5276, 5281, 7200, 5276, 6393, 5276, 7452, 5276, 5276, 5276, 6388, 6113, 5276, 6233, 5836, 5898, 5276, 5276, 7387, 5868, 7434, 5276, 5276, 5276, 6877, 7228, 6201, 5276, 7452, 5962, 5276, 5276, 5276, 6853, 5315, 5898, 5276, 5276, 7431, 5276, 5276, 5276, 6878, 7229, 5984, 7471, 5991, 5276, 6340, 5803, 5276, 5780, 5276, 5990, 5276, 5276, 5276, 6920, 5821, 5982, 7469, 5989, 5276, 6346, 6351, 5276, 5276, 6388, 6113, 5276, 5276, 6946, 5276, 5276, 7438, 5276, 5276, 7024, 5276, 5276, 5276, 7467, 7476, 5276, 5276, 7477, 5276, 5276, 5276, 7025, 5276, 7450, 5276, 5388, 5281, 6279, 5276, 5276, 5622, 5315, 5276, 6389, 6114, 5276, 6347, 6352, 5276, 5276, 5276, 7444, 5276, 5276, 5276, 6945, 7466, 7475, 5276, 5276, 7041, 5276, 5631, 5276, 5388, 5282, 7466, 7462, 5276, 5276, 5276, 7040, 5276, 5276, 5276, 7081, 5276, 5303, 5276, 5276, 5276, 7110, 6654, 0, 0, 1075838976, 2097152, -1845493760, 0, 0, 0x80000000, 16777216, 4194560, 4196352, 270532608, 2097152, 2097152, 268435456, 4194432, 16777216, 4194432, 3145728, 541065216, -2143289344, 4194304, 4194304, 4194304, 4194304, 541065216, 4194304, 4194304, 4194432, 37748736, -1606418432, 541065216, 541065216, 541065216, 541065216, 4194304, 4194304, 4196352, -1606418432, -1606418432, 541065216, 541065216, 4194304, 4198144, 541065216, 541065216, -2143289344, -2143289344, 8425488, 4194304, 4194304, 4194304, 1, 32768, 0, 0x80000000, 16, 33554432, 33554432, 0, 2, 4, 112, 128, 256, 3584, 16384, 37748736, 742391808, 239075328, 775946240, 775946240, 775946240, 171966464, 171966464, 171966464, 171966464, 239075328, 171966464, 775946240, 239075328, 4718592, 64, 4718592, 2097216, 4720640, 541589504, 4194368, 541589504, 4194400, 4194368, -2142763008, 541589504, 541065280, 4194368, 4194368, 541065312, 541065280, -2143289280, 4194368, -2143285408, -2143285408, -2143285440, -2143285440, -2143285440, -2143285440, -1605890240, -2142761152, -2109731008, -1606414528, -2142761152, -1606414528, -2143285440, -2143285440, -1606414528, -1606414528, -2143285440, -2109731008, 776470528, -1908404416, 775946304, -1908404416, 2, 4, 8, 16, 512, 1024, 4194304, 128, 128, 0, 0x80000000, 524288, 5242880, 0x80000000, 0, 0, 2, 12, 64, 256, 2048, 2048, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 4, 16, 224, 256, 512, 1024, 16777216, 16777216, 0, 0, 0x80000000, 65536, 1792, 0, 0, 0, 8, 0, 0, 0, 12, 32, 64, 1024, 2048, 57344, 262144, 50331648, 268435456, 1073741824, 0x80000000, 0, 0, 1536, 64, 524352, 524352, 524352, 0, 0, 0, 62, 64, 128, 64, 262144, 1048576, 0, 0x80000000, 2097152, 0, -2113929216, 0, 0, -1979711488, -1912602624, 64, 64, 1048576, 128, 256, 2048, 262144, 524288, 4096, 1024, 1024, 0, -570425344, 32505856, 0, 0, 48, 25165824, 0, 0, 0, 33554432, 268435456, 0, 0, 0, 524288, 0, 0, 0, 32, 0, 0, 0, 44, 64576, 319029248, 0, 524288, 524288, 524288, 0, 64, 0, 0, 0, 64, 0, 96, 96, 96, 524352, 524352, 524352, 524352, 524288, 524288, 524288, 524288, 64, 64, 0, 64, 128, 128, 128, 128, 2048, 2048, 0, 0, 524288, 524288, 64, 64, 128, 2048, 0, 0, 64, 128, 8388608, 524288, 64, 64, 64, 64, 32, 96, 64, 96, 96, 524352, 96, 160, 1056, 262176, 1048608, 2097184, 4194336, 536870944, 40, 262176, 32, 96, 0, 0, 0, 60, 40, 48, 1120, 96, 96, 64, 524352, 0, 524288, 64, 96, 524352, 0, 524288, 4195360, 6291488, 2097184, 2097184, 4194336, 4194336, 4194336, 32, 56, 0, 4, 16, 32, 64, 128, 256, 1536, 2048, 40, 262184, 40, 40, 40, 40, 40, 262176, 32, 32, 6292512, 4195360, 2097184, 32, 128, 1792, 8192, 16384, 131072, 524288, 4195104, 6292512, 32, 32, 32, 32, 4, 40, 262184, 32, 32, 34, 34, 262184, 40, 4196128, 32, 262144, 524288, 0, 0, 64, 256, 0, 2097152, 135790592, 131073, 4, 393233, 262184, 34, 42, 32, 524320, 32, 1073872896, 32, 32, 40, 1120, 96, 1056, 4194336, 32, 2098208, -322695456, -322695456, -322695456, -322695456, -322597152, -320598176, -322597152, -322597144, -321548576, -320598168, -322597144, -321548568, -37482773, 0, 0, 64, 1536, 32768, -322588952, -321548568, -322588952, -321548568, -322597144, 32, 0, 32, 64, 65536, 0, 96, 32, 32, 56, 262184, 40, 41, 262184, 32, 42, 224, 40, 262176, 42, 106, 293601323, 293601323, 293863467, 293699627, 293617707, 293716011, 293702203, 293702203, 293702203, 297896507, 293702203, 293702203, 293702203, 293702267, 293964347, 293702267, 297896507, 293964347, 297896507, 297896507, -322597144, -37744981, 0, 32, 524288, 0, 0, 64, 2048, 16384, 32768, 0, 0, 262144, 65536, 262144, 262144, 0, 4096, 0, 8, 0, 2, 65536, 262656, 328192, 0, 0, 0, 1536, 32768, 0, 5242880, 0, 0, 0, 1998, 518144, 8388608, -2147418112, 5242880, -1842937664, 201330721, 201330721, -2111369023, -2111369023, -2111369023, -2111369023, -2111360575, -2111369023, -2111369023, -2111369023, -1977151295, -1977151293, -1910042431, -1893265183, -2111368509, -1893265183, -1893265183, -1893265183, -1893265183, -2111368509, -1893265183, -1893265183, -553689472, -553656704, -553689472, -553689472, -553656704, -553656704, -553656704, -553656704, -553656704, -553656672, -553656672, -553656672, -553656672, -536912159, -553656672, -553656672, -553656664, -553656664, -553656672, -553656672, -553656670, -553656672, -553656672, -553656670, -553656608, -553656671, -536879391, -536879391, -536879391, 0, 0, 262656, 0, 0, 65, 1024, 0, 1, 4096, 201326592, 0, 0, 0, 0, 462976, -2113929216, 100663296, 100663296, 2, 4, 8, 64, 128, 512, 2048, 8192, 16384, 458752, 18874368, 463488, 0, 0, 1, 2, 4, 32, 0, 0, 1007232, 15728640, 1040000, 15728640, -570425344, 0, 0, 0, 2014, 0, 0, 0, 32505856, -570425344, 196608, 2097152, 301989888, 0, 0, 80, 268435456, 0, 268435456, 0, 268435456, 268435456, 268435456, 268435456, 0, 0, 0, 4096, 201326592, 0, 0, 96, 2260992, 12288, 0, 0x80000000, 0, 0, 118, 577408, 22020096, 1040187392, 0, 0, 167772160, 234881024, 128, 512, 2048, 196608, 262144, 33554432, 536870912, 0, 0, 0, 557056, 7168, 16384, 196608, 786432, 503316480, 1073741824, 0x80000000, 0, 0, 128, 131072, 524288, 58720256, 402653184, 0, 0, 0, 318767104, 128, 512, 7168, 16384, 32768, 32768, 196608, 786432, 1048576, 2097152, 4194304, 33554432, 268435456, 536870912, 0x80000000, 0, 0, 1, 256, 8388608, 234881024, 268435456, 1073741824, 0x80000000, 4096, 16384, 32768, 131072, 524288, 1048576, 2097152, 4194304, 8388608, 234881024, 0, 0, 201326592, 0, 0, 128, 536870912, 4194304, 512, 3072, 16384, 131072, 524288, 1048576, 4194304, 134217728, 8388608, 33554432, 201326592, 268435456, 1073741824, 0, 1048576, 4194304, 268435456, 4194304, 8388608, 134217728, 268435456, 1073741824, 3072, 131072, 524288, 1048576, 1073741824, 0, 0, 0, 0x80000000, 0, 0, 0, -2147483646, 16384, 18432, 67108864, 1073741824, 16384, 8192, 0, 0, 65536, 262144, 0, 0, 67108864, 0, 0, 0, 32768, 0, 1, 18952, 1024, 0, 0, 192, 0, 0, 0, 65, 1024, 1024, 100663298, 18952, 65, 268436480, 2101248, 524288, 1024, 19017, -1744550912, 8388624, 8388624, 8388624, -1739308032, -1739308032, -1739308032, -1739308032, -1736162288, -1736162288, -1736162288, -1736162288, -7868466, -7868466, -7868466, -7868466, -7868466, -7868450, -7868450, -7868450, -7868450, 0, 0, 0, 65536, 2048, 16384, 67108864, 134217728, 268435456, 0, 0, 1073741824, 18432, 0, 0, 1, 285212672, 0, 585, 0, 0, 2, 8, 16, 64, 128, 3072, 4096, 8192, 65536, 131072, 0, 0, 1024, 5521408, -1744830464, 0, 0, 0, 262144, 0, 0, 0, 1024, 0, 0, 0, 112, 1040, 0, 0, -1744830464, 0, -1744830464, 59238400, -67108864, 0, 0, 0, 327680, 2014, 0, 0, 0, 328192, 518144, 8388608, 50331648, 201326592, 805306368, -1073741824, 768, 1024, 10240, 16384, 32768, 458752, 50331648, 67108864, 134217728, 805306368, 0, 0, 0, 458880, 32768, 458752, 8388608, 50331648, 67108864, 134217728, 67108864, 134217728, 805306368, 1073741824, 0x80000000, 0, 0, 220, 0, 0, 0, 471424, 12, 192, 768, 1024, 2048, 805306368, 1073741824, 0, 0, 2, 204, 768, 1024, 4, 8, 32, 64, 512, 2048, 512, 2048, 16384, 67108864, 0, 0, 458752, 50331648, 67108864, 805306368, -1073741824, 0, 0, 0, 393240, 0, 1048576, 4194304, 0, 0, 16384, 458752, 50331648, 67108864, 536870912, 1073741824, 0, 0, 16384, 0, 0, 0, 256, 0, 0, 0, 512, 0, 0, 0, 585, 16, 0, 0, 1048576, 4194304, 0x80000000, 4, 8, 128, 512, 3072, 16384, 32768, 131072, 512, 0, 0, 4096, 1048576, 0x80000000, 8192, 2097152, 268435456, 0x80000000, 537395200, 537395200, 0, 4196352, 51380242, 51380242, 51380242, 0, 537395200, 4196352, 4196352, 276901888, 8540160, -1606418432, 0, 32768, 537395200, 4196352, 1082130432, 0, 4196352, 537427968, 22022147, 22349827, 22349827, 22349827, 22366219, 22349843, 22349827, 22349827, 22366219, 22349827, 55576594, 55576594, 55576594, 55576594, 55576594, 324012114, 55576594, 55576594, 1062785014, 1062785014, 1062785014, 1062785014, 0, 0, 2, 33554432, 0, 0, 0, 131072, 0, 0, 0, 8192, 8392704, 32768, 268435456, 0, 0, 2, 67108864, 12, 16384, 0, 65536, 0, 22020096, 0, 0, 0, 1040000, 15728640, 0, 0, 329728, 0, 0, 254, 1792, 2809856, 58720256, 19, 0, 0, 0, 1048576, 0, 0, 0, 2048, 0, 0, 0, 18, 33554432, 0, 0, 256, 8192, 0, 0, 8192, 2097152, 0, 0x80000000, 0, 82, 301989888, 0, 0, 0, 2101248, 22020096, 1040187392, 0, 0, 0, 4194304, 0, 0, 0, 16384, 1536, 0, 256, 0, 8192, 2097152, 16, 1048576, 16777216, 33554432, 268435456, 536870912, 0x80000000, 3584, 16384, 32768, 524288, 1048576, 4194304, 0, 0, 8388608, 1073741824, 0, 0, 1536, 2048, 16384, 32768, 524288, 4194304, 134217728, 0, 0, 134217728, 4096, 0, 8, 0, 256, 1536, 16384, 32768, 524288, 128, 536870912, 0, 0, 4, 8, 512, 2048, 0, 0, 1536, 32768, 524288, 4194304, 33554432, 134217728, 536870912, 0, 0, 8192, 2097152, 0x80000000, 0, 0, 512, 2048, 131072, 536870912, 0, 0, 16, 64, 1536, 32768, 32768, 524288, 134217728, 0, 0, 0, 524288, 0, 64, 64, 16392, 1536, 32768, 524288, 0, 0, 33554432, 8192, 0, 65536, 0, 0, 1, 1, 0, 1, 67174400, 33554432, 536870912, -1073741824, 0, 0, 0, 0, 524288, 134217728, 67174400, 0, 0, 0, 16777216, 0, 0, 0, 4, 0, 0, 0, 7, 16, 16384, 8, 8, 0, 0, 512, 3072, 131072, 131072, 268435456, 134217728, 8, 512, 2048, 196608, 262144, 50331648, 536870912, 1073741824, 0, 4, 8, 2048, 8192, 32768, 8388608, 0, 0, 134217736, 16908320, 547389524, 547389524, 555909216, 555909216, 555909216, 555909216, 564297840, 564297844, 564297844, 564297844, 564297844, 1001055742, 1001056254, 1001055742, 1001055742, 1001056254, 1001056254, 1001056254, 1001056254, 1001055742, 1001056254, 1001056254, 1001056254, 1001056254, 0, 1052672, 0x80000000, 0, 0, 4, 16, 0, 0, 84, 2129920, 8388608, 4096, 0, 0, 0, 116, 0, 254, 1280, 2809856, 58720256, 939524096, 0, 0, 0, 50331648, 268435456, 0, 0, 0, 939524096, 0, 0, 520, 1024, 0, 0, 1, 0, 67108864, 1073741824, 0, 0, 0, 20, 64, 32768, 8192, 0, 2048, 0, 2097152, 8388608, 536870912, 0, 0, 1024, 278528, 0, 0, 0, 393232, 163840, 0, 0, 0, 134217728, 0, 0, 0, 16, 0, 0, 0, 15, 208, 15360, 1245184, 52, 0, 0, 0, 268435456, 0, 0, 33554432, 64, 128, 1280, 24576, 163840, 524288, 2097152, 58720256, 402653184, 536870912, 128, 1792, 24576, 163840, 524288, 0, 4, 16, 8388608, 0, 0, 4096, 32768, 262144, 524288, 33554432, 134217728, 0, 0, 24, 32, 128, 1280, 8192, 16384, 8192, 524288, 16777216, 33554432, 402653184, 0, 4, 8, 16, 1024, 2048, 8192, 16384, 32768, 458752, 0, 262144, 33554432, 134217728, 0, 512, 1024, 16777216, 33554432, 402653184, 0, 4096, 1048576, 0, 0, 1998, 59238400, -67108864, 4, 8, 16, 402653184, 0, 0, 8, 16, 402653184, 536870912, 0, 0, 4, 64, 128, 8388608, 0, 0, 67108866, 12, 64, 128, 512, 1024, 4, 16384, 65536, 67108864, 0, 65536, 0, 0, 2048, 64, 64, 64, 96, 96, 96, 96, 0, 8192, 8192, 268435460, 32768, 65536, 2490368, 16777216, 0x80000000, 0, 0, 1, 4, 8, 2048, 8192, 3670016, 2048, 2048, 2048, 2048, 0, 8192, 34816, 9216, 4096, 0, 128, 0, 2097152, 0, 0, 4096, 4096, 29696, 29712, 29840, 29712, 29712, 29840, 29840, 536900624, 4224144, 144384, 144384, 144384, 144384, -754647956, -754647956, -754647956, -754647956, -754647956, -754647940, -754647940, -754647940, -754647940, -754516884, -754647956, -754516884, -754516884, -754516884, 4, 8, 256, 512, 2048, 0, 0, 3670016, 0, 0, 2048, 131072, 524288, 4194304, 0x80000000, 0, 0, 9216, 0, 0, 4, 134217728, 0, 29696, 0, 0, 4, 268435456, 0, 16, 0, 29824, 0, 60, 64576, 319029248, -1073741824, 0, 0, 319160320, 0, 0, 0, 319160320, 0, 0, 524288, 3145728, 0, 12288, 131072, 0, 8, 131072, 61440, 262144, 318767104, -1073741824, 0, 0, 64, 1024, 2048, 61440, 262144, 0, 28, 32, 64, 64, 64, 128, 0, 0, 16384, 32768, 50331648, 268435456, 0, 0, 0, 393216, 0, 0, 0, 486539264, 0, 128, 0, 536870912, 0, 0, 12, 16, 32, 327155712, 34, 1056, 32, 32, 42, 4457568, -326784344, -322851160, -322698144, -322698144, -322698144, -322698144, -322695456, 0, 0, 524288, 1048576, 0, 0, 0, 536870912, 4194304, 131072, 0, 0, 6, 56, 128, 1792, 2, 67108864, 16384, 0, 0, 4096, 4194304, 32768, 0, 0, 0, 8388608, 0, 0, 0, 72, 0, 8, 64, 2048, 57344, 16384, 32768, 262144, 50331648, 268435456, 0, 524288, 1048576, 2097152, 4194304, 134217728, 0x80000000, 0, 0, 50331648, 268435456, 0x80000000, 0, 0, 1, 0, 0, 2, 4, 16, 64, 1, 0, 2, 0, 0, 65536, 0, 0, 0, 1040, 8667136, 0, 131072, 131072, 0, 131072, 0, 131072, 0, 0, 524288, 536870912, 131072, 0, 0, 7, 27756528, -503316480, 0, 256, 0, 2048, 32768, 8388608, 262144, 2113536, 0, 0, 8, 16, 512, 402653184, 0, 0, 0, 256, 32768, 0, 0, 4224, 65536, 262144, 1048576, 4194304, 16777216, 33554432, 67108864, 134217728, 0, 0, 256, 262144, 0, 0, 8192, 268435456, 0, 0, 0, 4, 131073, 0, 0, 9728, 268435456, 0, 0, 16, 393216, 0, 131073, 131073, 33554624, 4, 0, 131073, 0, 0, 13312, 131072, 4194304, -2146430976, 131072, 2097152, 16777216, 0, 0, 512, 131072, 1048576, 2097152, 0, 1572864, 0, 0, 0, 0x80000000, 524288, 0, 1610612736, 1610612736, 1610612736, 393241, 393241, 393241, 393241, 805707793, 805707793, 1879449617, 805708049, 1879449617, 1879449617, 1879449617, 1879449617, -483948553, -475559945, -483948553, -475559945, -483948553, -483948553, -475559945, -475559945, -475559945, -475559945, -483948553, -483948553, -215504905, -475559945, -207116297, -207116297, 0, 0, 0, 1073741824, 0, 0, 2097152, 67108864, 134217728, 536870912, 0, 0, 24576, 0, 0, 0, 2113536, 0, 0, 8, 64, 0, 0, 0, 401424, 805306368, 0, 0, 28672, 0, 0, 4096, 2097152, 4194304, 8388608, 503316480, 1073741824, 0, 0, 1879048192, 0, 0, 32768, 2097152, 8388608, 16777216, 33554432, 0, 401680, 0, 0, 8, 512, 2048, 131072, 33554432, 536870912, 0, 0, 7, 19367920, -503316480, 27756528, -503316480, 0, 0, 0, 0, 0, 19376112, -234881024, 0, 27764720, -234881024, 0, 0, 32768, 33554436, 0, 0, 33554436, 24, 0, 0, 0, 11, 346112, 7, 16, 480, 1536, 32768, 65536, 393216, 10485760, 65536, 10878976, 16777216, 33554432, 536870912, 4, 32, 524288, 1048576, 33554432, 67108864, 65536, 393216, 2097152, 16777216, 262400, 65536, 4224, 4224, 0, 65536, 201326592, 0x80000000, 393216, 10485760, 16777216, 33554432, 1073741824, 0x80000000, 0, 16, 224, 256, 1536, 32768, 65536, 0, 16384, 2097152, 0, 0, 1024, 32768, 65536, 131072, 262144, 262144, 2097152, 16777216, 33554432, 4, 32, 524288, 134217728, 0, 512, 32768, 131072, 262144, 2097152, 2097152, 8388608, 16777216, 1073741824, 0, 0, 512, 32768, 131072, 2097152, 8388608, 8388608, 16777216, 0, 0, 16, 33554432, 4, 16, 224, 512, 32768, 4, 524288, 134217728, 0, 0, 32768, 50331648, 268435456, 4096, 32768, 0, 0, 16, 536870912, 16, 192, 32768, 8388608, 4096, 4096, 4096, 1536, 2, 4, 16, 192, 32768, 0, 16, 64, 128, 8388608, 0, 0, 0, 2, 4, 134217728, 4, 0, 0, 128, 512, 3072, 4096, 16384, 131072, 4, 128, 0, 0, 18, 17825792, 524288, 8388608, 33554432, 0x80000000, 8192, 0, 33554432, 0, 0, 33554432, 0, 0, 0, 268435456, 2, 4, 8, 262144, 262144, 1048576, 2048, 32768, 0, 0, 28, 0, 100663296, 4224, 65536, 65536, 262144, 33554432, 0, 2, 4, 24, -1072627712, 805306384, -1342177264, -1342177264, -1070006272, -1070006272, -1069989376, -1069989376, -258932720, -258932720, -258932720, -258932720, -225378288, -1069989376, -1069989360, -1065795072, -1061600768, -258932720, -225378288, -258932720, -258932720, 1260767, 34815199, 1260767, 34815199, 1260767, 34815199, 34815199, 1260767, 1260767, 34815199, 1260767, 1260767, 169032927, -1978450721, 169032927, -1978450721, 169032927, 169032927, 169032927, 169032927, 1242774751, -1978450721, -1978450721, -225231649, -1173144353, -225231649, -91013921, 0, 0, 32, 128, 256, 262144, 524288, 8388608, 0, 64, 0, 0, 1114112, 1073741824, 0, 0, 34816, 0, 0, 2048, 4194304, 0, 0, 0, 3735552, 0, 0, 32, 512, 2048, 32768, 262144, 524288, 3751936, 0, 0, 0, 48, 0, 0, 528, 7946240, 12140544, 9502720, 1610612736, 0, 0, 0, 15360, 1245184, 0, 0, 134217728, 128, 15, 9633792, 0, 0, 0, 2, 12, 80, 128, 7168, 8192, 7168, 8192, 196608, 1048576, 0, 0, 0, 1, 2, 12, 16, 64, 128, 256, 0, 0, 3145728, 0, 0, 0, 536870912, 0, 0, 8192, 65536, 131072, 1048576, 0, 0, 0, 2097152, 0, 16384, 0, 4194304, 0, 0, 2097152, 16384, 0, 0, 131072, 2097152, 0, 0, 0, 4096, 0, 0, 8192, 0, 0, 0, 128, 0, 0, 0, 208, 0, 64, 128, 1024, 4096, 0, 0, 2, 8, 64, 128, 1024, 2048, 4096, 8192, 128, 1024, 4096, 8192, 0, 0
];

JSONiqParser.TOKEN =
[
  "(0)",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "Wildcard",
  "EQName",
  "URILiteral",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'$$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'check'",
  "'child'",
  "'collation'",
  "'collection'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exit'",
  "'external'",
  "'false'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'foreach'",
  "'foreign'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json'",
  "'json-item'",
  "'jsoniq'",
  "'key'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'loop'",
  "'lowercase'",
  "'lt'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'null'",
  "'object'",
  "'occurs'",
  "'of'",
  "'on'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'select'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'true'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unique'",
  "'unordered'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'while'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "'}}'"
];

},
{}],
10:[function(require,module,exports){
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
  var self = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var
      begin = b,
      end = e,
      state = s,
      offending = o,
      expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};

    this.getMessage = function()
    {
      return offending < 0 ? "lexical analysis failed" : "syntax error";
    };
  };

  function init(string, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = string;
    size = string.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var tokenSet = this.getExpectedTokenSet(e);
    var found = this.getOffendingToken(e);
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    var size = e.getEnd() - e.getBegin();
    return e.getMessage()
         + (found == null ? "" : ", found " + found)
         + "\nwhile expecting "
         + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
         + "\n"
         + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Module();
    shift(25);                      // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 274:                       // 'xquery'
      lookahead2W(199);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    default:
      lk = l1;
    }
    if (lk == 64274                 // 'xquery' 'encoding'
     || lk == 134930)               // 'xquery' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    switch (l1)
    {
    case 182:                       // 'module'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 94390:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    shift(274);                     // 'xquery'
    lookahead1W(116);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 125:                       // 'encoding'
      shift(125);                   // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      break;
    default:
      shift(263);                   // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      lookahead1W(109);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 125)                // 'encoding'
      {
        shift(125);                 // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(11);                  // StringLiteral
      }
    }
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(138);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    shift(182);                     // 'module'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    shift(184);                     // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    shift(60);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(214);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
        break;
      case 153:                     // 'import'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      default:
        lk = l1;
      }
      if (lk != 42604               // 'declare' 'base-uri'
       && lk != 43628               // 'declare' 'boundary-space'
       && lk != 50284               // 'declare' 'construction'
       && lk != 53356               // 'declare' 'copy-namespaces'
       && lk != 54380               // 'declare' 'decimal-format'
       && lk != 55916               // 'declare' 'default'
       && lk != 72300               // 'declare' 'ft-option'
       && lk != 93337               // 'import' 'module'
       && lk != 94316               // 'declare' 'namespace'
       && lk != 104044              // 'declare' 'ordering'
       && lk != 113772              // 'declare' 'revalidation'
       && lk != 115353)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(179);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
        break;
      default:
        lk = l1;
      }
      if (lk == 55916)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 94316:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 153:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 72300:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(275);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(211);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
        break;
      default:
        lk = l1;
      }
      if (lk != 16492               // 'declare' '%'
       && lk != 48748               // 'declare' 'collection'
       && lk != 51820               // 'declare' 'context'
       && lk != 74348               // 'declare' 'function'
       && lk != 79468               // 'declare' 'index'
       && lk != 82540               // 'declare' 'integrity'
       && lk != 101996              // 'declare' 'option'
       && lk != 131692              // 'declare' 'updating'
       && lk != 134252)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(175);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 51820:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 101996:                  // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    shift(53);                      // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 108:                       // 'declare'
      lookahead2W(172);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
      break;
    default:
      lk = l1;
    }
    if (lk == 55916)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 43628:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 42604:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50284:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 104044:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 113772:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 53356:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(33);                // S^WS | '(:' | 'boundary-space'
    shift(85);                      // 'boundary-space'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 214:                       // 'preserve'
      shift(214);                   // 'preserve'
      break;
    default:
      shift(241);                   // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    shift(109);                     // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    shift(94);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    shiftT(109);                    // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    shiftT(94);                     // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(32);                // S^WS | '(:' | 'base-uri'
    shift(83);                      // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    shift(98);                      // 'construction'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 241:                       // 'strip'
      shift(241);                   // 'strip'
      break;
    default:
      shift(214);                   // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(68);                // S^WS | '(:' | 'ordering'
    shift(203);                     // 'ordering'
    lookahead1W(131);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 202:                       // 'ordered'
      shift(202);                   // 'ordered'
      break;
    default:
      shift(256);                   // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    shift(109);                     // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    shift(201);                     // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    shift(123);                     // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 147:                       // 'greatest'
      shift(147);                   // 'greatest'
      break;
    default:
      shift(173);                   // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    shiftT(109);                    // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    shiftT(201);                    // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    shiftT(123);                    // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 147:                       // 'greatest'
      shiftT(147);                  // 'greatest'
      break;
    default:
      shiftT(173);                  // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    shift(104);                     // 'copy-namespaces'
    lookahead1W(128);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    shift(41);                      // ','
    lookahead1W(123);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 214:                       // 'preserve'
      shift(214);                   // 'preserve'
      break;
    default:
      shift(190);                   // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 157:                       // 'inherit'
      shift(157);                   // 'inherit'
      break;
    default:
      shift(189);                   // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(114);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 106:                       // 'decimal-format'
      shift(106);                   // 'decimal-format'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_EQName();
      break;
    default:
      shift(109);                   // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      shift(106);                   // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(181);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
      if (l1 == 53)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(29);              // S^WS | '(:' | '='
      shift(60);                    // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 107:                       // 'decimal-separator'
      shift(107);                   // 'decimal-separator'
      break;
    case 149:                       // 'grouping-separator'
      shift(149);                   // 'grouping-separator'
      break;
    case 156:                       // 'infinity'
      shift(156);                   // 'infinity'
      break;
    case 179:                       // 'minus-sign'
      shift(179);                   // 'minus-sign'
      break;
    case 67:                        // 'NaN'
      shift(67);                    // 'NaN'
      break;
    case 209:                       // 'percent'
      shift(209);                   // 'percent'
      break;
    case 208:                       // 'per-mille'
      shift(208);                   // 'per-mille'
      break;
    case 275:                       // 'zero-digit'
      shift(275);                   // 'zero-digit'
      break;
    case 116:                       // 'digit'
      shift(116);                   // 'digit'
      break;
    default:
      shift(207);                   // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 153:                       // 'import'
      lookahead2W(126);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 115353:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    shift(153);                     // 'import'
    lookahead1W(73);                // S^WS | '(:' | 'schema'
    shift(225);                     // 'schema'
    lookahead1W(137);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 7)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 81)                   // 'at'
    {
      shift(81);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 184:                       // 'namespace'
      shift(184);                   // 'namespace'
      lookahead1W(249);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      shift(60);                    // '='
      break;
    default:
      shift(109);                   // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      shift(121);                   // 'element'
      lookahead1W(61);              // S^WS | '(:' | 'namespace'
      shift(184);                   // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    shift(153);                     // 'import'
    lookahead1W(60);                // S^WS | '(:' | 'module'
    shift(182);                     // 'module'
    lookahead1W(90);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 184)                  // 'namespace'
    {
      shift(184);                   // 'namespace'
      lookahead1W(249);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      shift(60);                    // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 81)                   // 'at'
    {
      shift(81);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    shift(184);                     // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    shift(60);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    shift(109);                     // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      shift(121);                   // 'element'
      break;
    default:
      shift(145);                   // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    shift(184);                     // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    shiftT(109);                    // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      shiftT(121);                  // 'element'
      break;
    default:
      shiftT(145);                  // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    shiftT(184);                    // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(52);                // S^WS | '(:' | 'ft-option'
    shift(141);                     // 'ft-option'
    lookahead1W(81);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    shift(108);                     // 'declare'
    for (;;)
    {
      lookahead1W(170);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
      if (l1 != 32                  // '%'
       && l1 != 257)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 257:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 262:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 145:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 95:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 155:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    shift(257);                     // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    shift(32);                      // '%'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
    if (l1 == 34)                   // '('
    {
      shift(34);                    // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      shift(37);                    // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    shiftT(32);                     // '%'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
    if (l1 == 34)                   // '('
    {
      shiftT(34);                   // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shiftT(41);                 // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      shiftT(37);                   // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    shift(262);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      shift(52);                    // ':='
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(133);                   // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        shift(52);                  // ':='
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    shift(101);                     // 'context'
    lookahead1W(55);                // S^WS | '(:' | 'item'
    shift(165);                     // 'item'
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 79)                   // 'as'
    {
      shift(79);                    // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_ItemType();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      shift(52);                    // ':='
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(133);                   // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        shift(52);                  // ':='
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    shiftT(31);                     // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    shift(276);                     // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    shiftT(276);                    // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(282);                    // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(66);                // S^WS | '(:' | 'option'
    shift(199);                     // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
      if (l1 == 220)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
      if (l1 == 220)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(141);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      parse_ForClause();
      break;
    case 174:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(141);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      try_ForClause();
      break;
    case 174:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 137:                       // 'for'
    case 174:                       // 'let'
      parse_InitialClause();
      break;
    case 266:                       // 'where'
      parse_WhereClause();
      break;
    case 148:                       // 'group'
      parse_GroupByClause();
      break;
    case 105:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 137:                       // 'for'
    case 174:                       // 'let'
      try_InitialClause();
      break;
    case 266:                       // 'where'
      try_WhereClause();
      break;
    case 148:                       // 'group'
      try_GroupByClause();
      break;
    case 105:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    shift(137);                     // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    shiftT(137);                    // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 72)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 81)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 228)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shift(154);                     // 'in'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    shiftT(31);                     // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 72)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 81)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 228)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shiftT(154);                    // 'in'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    shift(72);                      // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    shift(123);                     // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    shiftT(72);                     // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    shiftT(123);                    // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    shift(81);                      // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    shiftT(81);                     // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    shift(228);                     // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    shiftT(228);                    // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    shift(174);                     // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    shiftT(174);                    // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      shift(31);                    // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    shift(52);                      // ':='
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      shiftT(31);                   // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    shiftT(52);                     // ':='
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    shift(137);                     // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 251:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    shiftT(137);                    // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 251:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    shift(251);                     // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    shift(269);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shift(154);                     // 'in'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 126                   // 'end'
     || l1 == 198)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    shiftT(251);                    // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    shiftT(269);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shiftT(154);                    // 'in'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 126                   // 'end'
     || l1 == 198)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    shift(234);                     // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    shift(269);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shift(154);                     // 'in'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    shiftT(234);                    // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    shiftT(269);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shiftT(154);                    // 'in'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    shift(237);                     // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    shift(265);                     // 'when'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    shiftT(237);                    // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    shiftT(265);                    // 'when'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 198)                  // 'only'
    {
      shift(198);                   // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    shift(126);                     // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    shift(265);                     // 'when'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 198)                  // 'only'
    {
      shiftT(198);                  // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    shiftT(126);                    // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    shiftT(265);                    // 'when'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 81)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 215)                  // 'previous'
    {
      shift(215);                   // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 187)                  // 'next'
    {
      shift(187);                   // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 81)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 215)                  // 'previous'
    {
      shiftT(215);                  // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 187)                  // 'next'
    {
      shiftT(187);                  // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    shift(105);                     // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    shiftT(105);                    // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    shift(266);                     // 'where'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    shiftT(266);                    // 'where'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    shift(148);                     // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    shift(87);                      // 'by'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    shiftT(148);                    // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    shiftT(87);                     // 'by'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    default:
      lk = l1;
    }
    if (lk == 3103                  // '$' EQName^Token
     || lk == 35871                 // '$' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 92191                 // '$' 'mod'
     || lk == 92703                 // '$' 'modify'
     || lk == 93215                 // '$' 'module'
     || lk == 94239                 // '$' 'namespace'
     || lk == 94751                 // '$' 'namespace-node'
     || lk == 95263                 // '$' 'ne'
     || lk == 97823                 // '$' 'node'
     || lk == 98335                 // '$' 'nodes'
     || lk == 99359                 // '$' 'object'
     || lk == 101407                // '$' 'only'
     || lk == 101919                // '$' 'option'
     || lk == 102431                // '$' 'or'
     || lk == 102943                // '$' 'order'
     || lk == 103455                // '$' 'ordered'
     || lk == 103967                // '$' 'ordering'
     || lk == 105503                // '$' 'parent'
     || lk == 108575                // '$' 'preceding'
     || lk == 109087                // '$' 'preceding-sibling'
     || lk == 110623                // '$' 'processing-instruction'
     || lk == 111647                // '$' 'rename'
     || lk == 112159                // '$' 'replace'
     || lk == 112671                // '$' 'return'
     || lk == 113183                // '$' 'returning'
     || lk == 113695                // '$' 'revalidation'
     || lk == 114719                // '$' 'satisfies'
     || lk == 115231                // '$' 'schema'
     || lk == 115743                // '$' 'schema-attribute'
     || lk == 116255                // '$' 'schema-element'
     || lk == 116767                // '$' 'score'
     || lk == 117279                // '$' 'self'
     || lk == 119839                // '$' 'sliding'
     || lk == 120351                // '$' 'some'
     || lk == 120863                // '$' 'stable'
     || lk == 121375                // '$' 'start'
     || lk == 122911                // '$' 'strict'
     || lk == 123935                // '$' 'structured-item'
     || lk == 124447                // '$' 'switch'
     || lk == 124959                // '$' 'text'
     || lk == 127007                // '$' 'to'
     || lk == 127519                // '$' 'treat'
     || lk == 128031                // '$' 'try'
     || lk == 128543                // '$' 'tumbling'
     || lk == 129055                // '$' 'type'
     || lk == 129567                // '$' 'typeswitch'
     || lk == 130079                // '$' 'union'
     || lk == 131103                // '$' 'unordered'
     || lk == 131615                // '$' 'updating'
     || lk == 133151                // '$' 'validate'
     || lk == 133663                // '$' 'value'
     || lk == 134175                // '$' 'variable'
     || lk == 134687                // '$' 'version'
     || lk == 136223                // '$' 'where'
     || lk == 136735                // '$' 'while'
     || lk == 138271                // '$' 'with'
     || lk == 140319)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(183);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
          if (l1 == 52              // ':='
           || l1 == 79)             // 'as'
          {
            if (l1 == 79)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(27);        // S^WS | '(:' | ':='
            shiftT(52);             // ':='
            lookahead1W(267);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
            try_ExprSingle();
          }
          if (l1 == 94)             // 'collation'
          {
            shiftT(94);             // 'collation'
            lookahead1W(15);        // URILiteral | S^WS | '(:'
            shiftT(7);              // URILiteral
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_GroupingVariable();
      lookahead1W(183);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
      if (l1 == 52                  // ':='
       || l1 == 79)                 // 'as'
      {
        if (l1 == 79)               // 'as'
        {
          whitespace();
          parse_TypeDeclaration();
        }
        lookahead1W(27);            // S^WS | '(:' | ':='
        shift(52);                  // ':='
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        whitespace();
        parse_ExprSingle();
      }
      if (l1 == 94)                 // 'collation'
      {
        shift(94);                  // 'collation'
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    default:
      lk = l1;
    }
    if (lk == 3103                  // '$' EQName^Token
     || lk == 35871                 // '$' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 92191                 // '$' 'mod'
     || lk == 92703                 // '$' 'modify'
     || lk == 93215                 // '$' 'module'
     || lk == 94239                 // '$' 'namespace'
     || lk == 94751                 // '$' 'namespace-node'
     || lk == 95263                 // '$' 'ne'
     || lk == 97823                 // '$' 'node'
     || lk == 98335                 // '$' 'nodes'
     || lk == 99359                 // '$' 'object'
     || lk == 101407                // '$' 'only'
     || lk == 101919                // '$' 'option'
     || lk == 102431                // '$' 'or'
     || lk == 102943                // '$' 'order'
     || lk == 103455                // '$' 'ordered'
     || lk == 103967                // '$' 'ordering'
     || lk == 105503                // '$' 'parent'
     || lk == 108575                // '$' 'preceding'
     || lk == 109087                // '$' 'preceding-sibling'
     || lk == 110623                // '$' 'processing-instruction'
     || lk == 111647                // '$' 'rename'
     || lk == 112159                // '$' 'replace'
     || lk == 112671                // '$' 'return'
     || lk == 113183                // '$' 'returning'
     || lk == 113695                // '$' 'revalidation'
     || lk == 114719                // '$' 'satisfies'
     || lk == 115231                // '$' 'schema'
     || lk == 115743                // '$' 'schema-attribute'
     || lk == 116255                // '$' 'schema-element'
     || lk == 116767                // '$' 'score'
     || lk == 117279                // '$' 'self'
     || lk == 119839                // '$' 'sliding'
     || lk == 120351                // '$' 'some'
     || lk == 120863                // '$' 'stable'
     || lk == 121375                // '$' 'start'
     || lk == 122911                // '$' 'strict'
     || lk == 123935                // '$' 'structured-item'
     || lk == 124447                // '$' 'switch'
     || lk == 124959                // '$' 'text'
     || lk == 127007                // '$' 'to'
     || lk == 127519                // '$' 'treat'
     || lk == 128031                // '$' 'try'
     || lk == 128543                // '$' 'tumbling'
     || lk == 129055                // '$' 'type'
     || lk == 129567                // '$' 'typeswitch'
     || lk == 130079                // '$' 'union'
     || lk == 131103                // '$' 'unordered'
     || lk == 131615                // '$' 'updating'
     || lk == 133151                // '$' 'validate'
     || lk == 133663                // '$' 'value'
     || lk == 134175                // '$' 'variable'
     || lk == 134687                // '$' 'version'
     || lk == 136223                // '$' 'where'
     || lk == 136735                // '$' 'while'
     || lk == 138271                // '$' 'with'
     || lk == 140319)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(183);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
          if (l1 == 52              // ':='
           || l1 == 79)             // 'as'
          {
            if (l1 == 79)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(27);        // S^WS | '(:' | ':='
            shiftT(52);             // ':='
            lookahead1W(267);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
            try_ExprSingle();
          }
          if (l1 == 94)             // 'collation'
          {
            shiftT(94);             // 'collation'
            lookahead1W(15);        // URILiteral | S^WS | '(:'
            shiftT(7);              // URILiteral
          }
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_GroupingVariable();
      lookahead1W(183);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
      if (l1 == 52                  // ':='
       || l1 == 79)                 // 'as'
      {
        if (l1 == 79)               // 'as'
        {
          try_TypeDeclaration();
        }
        lookahead1W(27);            // S^WS | '(:' | ':='
        shiftT(52);                 // ':='
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        try_ExprSingle();
      }
      if (l1 == 94)                 // 'collation'
      {
        shiftT(94);                 // 'collation'
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shiftT(7);                  // URILiteral
      }
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    shiftT(31);                     // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 201:                       // 'order'
      shift(201);                   // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      shift(87);                    // 'by'
      break;
    default:
      shift(236);                   // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      shift(201);                   // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      shift(87);                    // 'by'
    }
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 201:                       // 'order'
      shiftT(201);                  // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      shiftT(87);                   // 'by'
      break;
    default:
      shiftT(236);                  // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      shiftT(201);                  // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      shiftT(87);                   // 'by'
    }
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 80                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 80:                      // 'ascending'
        shift(80);                  // 'ascending'
        break;
      default:
        shift(113);                 // 'descending'
      }
    }
    lookahead1W(180);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
    if (l1 == 123)                  // 'empty'
    {
      shift(123);                   // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 147:                     // 'greatest'
        shift(147);                 // 'greatest'
        break;
      default:
        shift(173);                 // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
    if (l1 == 94)                   // 'collation'
    {
      shift(94);                    // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 80                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 80:                      // 'ascending'
        shiftT(80);                 // 'ascending'
        break;
      default:
        shiftT(113);                // 'descending'
      }
    }
    lookahead1W(180);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
    if (l1 == 123)                  // 'empty'
    {
      shiftT(123);                  // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 147:                     // 'greatest'
        shiftT(147);                // 'greatest'
        break;
      default:
        shiftT(173);                // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
    if (l1 == 94)                   // 'collation'
    {
      shiftT(94);                   // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    shift(220);                     // 'return'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    shiftT(220);                    // 'return'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 235:                       // 'some'
      shift(235);                   // 'some'
      break;
    default:
      shift(129);                   // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_QuantifiedVarDecl();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_QuantifiedVarDecl();
    }
    shift(224);                     // 'satisfies'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 235:                       // 'some'
      shiftT(235);                  // 'some'
      break;
    default:
      shiftT(129);                  // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_QuantifiedVarDecl();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_QuantifiedVarDecl();
    }
    shiftT(224);                    // 'satisfies'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_QuantifiedVarDecl()
  {
    eventHandler.startNonterminal("QuantifiedVarDecl", e0);
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shift(154);                     // 'in'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedVarDecl", e0);
  }

  function try_QuantifiedVarDecl()
  {
    shiftT(31);                     // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shiftT(154);                    // 'in'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    shift(243);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(109);                     // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    shiftT(243);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(37);                     // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(109);                    // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      shift(88);                    // 'case'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(220);                     // 'return'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      shiftT(88);                   // 'case'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(220);                    // 'return'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    shift(253);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(109);                     // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    shiftT(253);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(37);                     // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(109);                    // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    shift(88);                      // 'case'
    lookahead1W(262);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
    }
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_SequenceTypeUnion();
    shift(220);                     // 'return'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    shiftT(88);                     // 'case'
    lookahead1W(262);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
    }
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_SequenceTypeUnion();
    shiftT(220);                    // 'return'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 279)                // '|'
      {
        break;
      }
      shift(279);                   // '|'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 279)                // '|'
      {
        break;
      }
      shiftT(279);                  // '|'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    shift(152);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    shift(245);                     // 'then'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    shift(122);                     // 'else'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    shiftT(152);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(37);                     // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    shiftT(245);                    // 'then'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
    shiftT(122);                    // 'else'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(184);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
      if (l1 != 91)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(184);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
      if (l1 != 91)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    shift(250);                     // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_TryTargetExpr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    shiftT(250);                    // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_TryTargetExpr();
    shiftT(282);                    // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    shift(91);                      // 'catch'
    lookahead1W(257);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_CatchErrorList();
    shift(276);                     // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    shiftT(91);                     // 'catch'
    lookahead1W(257);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_CatchErrorList();
    shiftT(276);                    // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(282);                    // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 279)                // '|'
      {
        break;
      }
      shift(279);                   // '|'
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 279)                // '|'
      {
        break;
      }
      shiftT(279);                  // '|'
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 200)                // 'or'
      {
        break;
      }
      shift(200);                   // 'or'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 200)                // 'or'
      {
        break;
      }
      shiftT(200);                  // 'or'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 75)                 // 'and'
      {
        break;
      }
      shift(75);                    // 'and'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 75)                 // 'and'
      {
        break;
      }
      shiftT(75);                   // 'and'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 146                   // 'ge'
     || l1 == 150                   // 'gt'
     || l1 == 164                   // 'is'
     || l1 == 172                   // 'le'
     || l1 == 178                   // 'lt'
     || l1 == 186)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 146:                     // 'ge'
      case 150:                     // 'gt'
      case 172:                     // 'le'
      case 178:                     // 'lt'
      case 186:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 63:                      // '>>'
      case 164:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 146                   // 'ge'
     || l1 == 150                   // 'gt'
     || l1 == 164                   // 'is'
     || l1 == 172                   // 'le'
     || l1 == 178                   // 'lt'
     || l1 == 186)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 146:                     // 'ge'
      case 150:                     // 'gt'
      case 172:                     // 'le'
      case 178:                     // 'lt'
      case 186:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 63:                      // '>>'
      case 164:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 99)                   // 'contains'
    {
      shift(99);                    // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      shift(244);                   // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 271)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 99)                   // 'contains'
    {
      shiftT(99);                   // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      shiftT(244);                  // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 271)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 280)                // '||'
      {
        break;
      }
      shift(280);                   // '||'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 280)                // '||'
      {
        break;
      }
      shiftT(280);                  // '||'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 248)                  // 'to'
    {
      shift(248);                   // 'to'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 248)                  // 'to'
    {
      shiftT(248);                  // 'to'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        shift(40);                  // '+'
        break;
      default:
        shift(42);                  // '-'
      }
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        shiftT(40);                 // '+'
        break;
      default:
        shiftT(42);                 // '-'
      }
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 151                 // 'idiv'
       && l1 != 180)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        shift(38);                  // '*'
        break;
      case 118:                     // 'div'
        shift(118);                 // 'div'
        break;
      case 151:                     // 'idiv'
        shift(151);                 // 'idiv'
        break;
      default:
        shift(180);                 // 'mod'
      }
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 151                 // 'idiv'
       && l1 != 180)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        shiftT(38);                 // '*'
        break;
      case 118:                     // 'div'
        shiftT(118);                // 'div'
        break;
      case 151:                     // 'idiv'
        shiftT(151);                // 'idiv'
        break;
      default:
        shiftT(180);                // 'mod'
      }
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 254                 // 'union'
       && l1 != 279)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 254:                     // 'union'
        shift(254);                 // 'union'
        break;
      default:
        shift(279);                 // '|'
      }
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 254                 // 'union'
       && l1 != 279)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 254:                     // 'union'
        shiftT(254);                // 'union'
        break;
      default:
        shiftT(279);                // '|'
      }
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
      if (l1 != 131                 // 'except'
       && l1 != 162)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 162:                     // 'intersect'
        shift(162);                 // 'intersect'
        break;
      default:
        shift(131);                 // 'except'
      }
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
      if (l1 != 131                 // 'except'
       && l1 != 162)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 162:                     // 'intersect'
        shiftT(162);                // 'intersect'
        break;
      default:
        shiftT(131);                // 'except'
      }
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 160)                  // 'instance'
    {
      shift(160);                   // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      shift(196);                   // 'of'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 160)                  // 'instance'
    {
      shiftT(160);                  // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      shiftT(196);                  // 'of'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 249)                  // 'treat'
    {
      shift(249);                   // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 249)                  // 'treat'
    {
      shiftT(249);                  // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 90)                   // 'castable'
    {
      shift(90);                    // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 90)                   // 'castable'
    {
      shiftT(90);                   // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(228);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 89)                   // 'cast'
    {
      shift(89);                    // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(228);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 89)                   // 'cast'
    {
      shiftT(89);                   // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        shift(42);                  // '-'
        break;
      default:
        shift(40);                  // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        shiftT(42);                 // '-'
        break;
      default:
        shiftT(40);                 // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 260:                       // 'validate'
      lookahead2W(248);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 87812:                     // 'validate' 'lax'
    case 123140:                    // 'validate' 'strict'
    case 129284:                    // 'validate' 'type'
    case 141572:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 260:                       // 'validate'
      lookahead2W(248);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 87812:                     // 'validate' 'lax'
    case 123140:                    // 'validate' 'strict'
    case 129284:                    // 'validate' 'type'
    case 141572:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      shift(26);                    // '!'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      shiftT(26);                   // '!'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      shift(60);                    // '='
      break;
    case 27:                        // '!='
      shift(27);                    // '!='
      break;
    case 54:                        // '<'
      shift(54);                    // '<'
      break;
    case 58:                        // '<='
      shift(58);                    // '<='
      break;
    case 61:                        // '>'
      shift(61);                    // '>'
      break;
    default:
      shift(62);                    // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      shiftT(60);                   // '='
      break;
    case 27:                        // '!='
      shiftT(27);                   // '!='
      break;
    case 54:                        // '<'
      shiftT(54);                   // '<'
      break;
    case 58:                        // '<='
      shiftT(58);                   // '<='
      break;
    case 61:                        // '>'
      shiftT(61);                   // '>'
      break;
    default:
      shiftT(62);                   // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 128:                       // 'eq'
      shift(128);                   // 'eq'
      break;
    case 186:                       // 'ne'
      shift(186);                   // 'ne'
      break;
    case 178:                       // 'lt'
      shift(178);                   // 'lt'
      break;
    case 172:                       // 'le'
      shift(172);                   // 'le'
      break;
    case 150:                       // 'gt'
      shift(150);                   // 'gt'
      break;
    default:
      shift(146);                   // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 128:                       // 'eq'
      shiftT(128);                  // 'eq'
      break;
    case 186:                       // 'ne'
      shiftT(186);                  // 'ne'
      break;
    case 178:                       // 'lt'
      shiftT(178);                  // 'lt'
      break;
    case 172:                       // 'le'
      shiftT(172);                  // 'le'
      break;
    case 150:                       // 'gt'
      shiftT(150);                  // 'gt'
      break;
    default:
      shiftT(146);                  // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 164:                       // 'is'
      shift(164);                   // 'is'
      break;
    case 57:                        // '<<'
      shift(57);                    // '<<'
      break;
    default:
      shift(63);                    // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 164:                       // 'is'
      shiftT(164);                  // 'is'
      break;
    case 57:                        // '<<'
      shiftT(57);                   // '<<'
      break;
    default:
      shiftT(63);                   // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    shift(260);                     // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 276)                  // '{'
    {
      switch (l1)
      {
      case 252:                     // 'type'
        shift(252);                 // 'type'
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    shiftT(260);                    // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 276)                  // '{'
    {
      switch (l1)
      {
      case 252:                     // 'type'
        shiftT(252);                // 'type'
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(282);                    // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 171:                       // 'lax'
      shift(171);                   // 'lax'
      break;
    default:
      shift(240);                   // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 171:                       // 'lax'
      shiftT(171);                  // 'lax'
      break;
    default:
      shiftT(240);                  // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    shift(276);                     // '{'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 282)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    shift(282);                     // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    shiftT(276);                    // '{'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 282)                  // '}'
    {
      try_Expr();
    }
    shiftT(282);                    // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    shift(35);                      // '(#'
    lookahead1(252);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
      lookahead1(0);                // PragmaContents
      shift(1);                     // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shift(30);                      // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    shiftT(35);                     // '(#'
    lookahead1(252);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
      lookahead1(0);                // PragmaContents
      shiftT(1);                    // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shiftT(30);                     // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 46:                        // '/'
      shift(46);                    // '/'
      lookahead1W(286);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 87:                      // 'by'
      case 99:                      // 'contains'
      case 205:                     // 'paragraphs'
      case 232:                     // 'sentences'
      case 247:                     // 'times'
      case 273:                     // 'words'
      case 279:                     // '|'
      case 280:                     // '||'
      case 281:                     // '|}'
      case 282:                     // '}'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      shift(47);                    // '//'
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 46:                        // '/'
      shiftT(46);                   // '/'
      lookahead1W(286);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 87:                      // 'by'
      case 99:                      // 'contains'
      case 205:                     // 'paragraphs'
      case 232:                     // 'sentences'
      case 247:                     // 'times'
      case 273:                     // 'words'
      case 279:                     // '|'
      case 280:                     // '||'
      case 281:                     // '|}'
      case 282:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      shiftT(47);                   // '//'
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '>'
       && lk != 62                  // '>='
       && lk != 63                  // '>>'
       && lk != 69                  // ']'
       && lk != 70                  // 'after'
       && lk != 75                  // 'and'
       && lk != 79                  // 'as'
       && lk != 80                  // 'ascending'
       && lk != 81                  // 'at'
       && lk != 84                  // 'before'
       && lk != 87                  // 'by'
       && lk != 88                  // 'case'
       && lk != 89                  // 'cast'
       && lk != 90                  // 'castable'
       && lk != 94                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 146                 // 'ge'
       && lk != 148                 // 'group'
       && lk != 150                 // 'gt'
       && lk != 151                 // 'idiv'
       && lk != 160                 // 'instance'
       && lk != 162                 // 'intersect'
       && lk != 163                 // 'into'
       && lk != 164                 // 'is'
       && lk != 172                 // 'le'
       && lk != 174                 // 'let'
       && lk != 178                 // 'lt'
       && lk != 180                 // 'mod'
       && lk != 181                 // 'modify'
       && lk != 186                 // 'ne'
       && lk != 198                 // 'only'
       && lk != 200                 // 'or'
       && lk != 201                 // 'order'
       && lk != 205                 // 'paragraphs'
       && lk != 220                 // 'return'
       && lk != 224                 // 'satisfies'
       && lk != 232                 // 'sentences'
       && lk != 236                 // 'stable'
       && lk != 237                 // 'start'
       && lk != 247                 // 'times'
       && lk != 248                 // 'to'
       && lk != 249                 // 'treat'
       && lk != 254                 // 'union'
       && lk != 266                 // 'where'
       && lk != 270                 // 'with'
       && lk != 273                 // 'words'
       && lk != 279                 // '|'
       && lk != 280                 // '||'
       && lk != 281                 // '|}'
       && lk != 282                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              shiftT(46);           // '/'
              break;
            case 47:                // '//'
              shiftT(47);           // '//'
              break;
            default:
              shiftT(26);           // '!'
            }
            lookahead1W(265);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        shift(46);                  // '/'
        break;
      case 47:                      // '//'
        shift(47);                  // '//'
        break;
      default:
        shift(26);                  // '!'
      }
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '>'
       && lk != 62                  // '>='
       && lk != 63                  // '>>'
       && lk != 69                  // ']'
       && lk != 70                  // 'after'
       && lk != 75                  // 'and'
       && lk != 79                  // 'as'
       && lk != 80                  // 'ascending'
       && lk != 81                  // 'at'
       && lk != 84                  // 'before'
       && lk != 87                  // 'by'
       && lk != 88                  // 'case'
       && lk != 89                  // 'cast'
       && lk != 90                  // 'castable'
       && lk != 94                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 146                 // 'ge'
       && lk != 148                 // 'group'
       && lk != 150                 // 'gt'
       && lk != 151                 // 'idiv'
       && lk != 160                 // 'instance'
       && lk != 162                 // 'intersect'
       && lk != 163                 // 'into'
       && lk != 164                 // 'is'
       && lk != 172                 // 'le'
       && lk != 174                 // 'let'
       && lk != 178                 // 'lt'
       && lk != 180                 // 'mod'
       && lk != 181                 // 'modify'
       && lk != 186                 // 'ne'
       && lk != 198                 // 'only'
       && lk != 200                 // 'or'
       && lk != 201                 // 'order'
       && lk != 205                 // 'paragraphs'
       && lk != 220                 // 'return'
       && lk != 224                 // 'satisfies'
       && lk != 232                 // 'sentences'
       && lk != 236                 // 'stable'
       && lk != 237                 // 'start'
       && lk != 247                 // 'times'
       && lk != 248                 // 'to'
       && lk != 249                 // 'treat'
       && lk != 254                 // 'union'
       && lk != 266                 // 'where'
       && lk != 270                 // 'with'
       && lk != 273                 // 'words'
       && lk != 279                 // '|'
       && lk != 280                 // '||'
       && lk != 281                 // '|}'
       && lk != 282                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              shiftT(46);           // '/'
              break;
            case 47:                // '//'
              shiftT(47);           // '//'
              break;
            default:
              shiftT(26);           // '!'
            }
            lookahead1W(265);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
            try_StepExpr();
            memoize(3, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        shiftT(46);                 // '/'
        break;
      case 47:                      // '//'
        shiftT(47);                 // '//'
        break;
      default:
        shiftT(26);                 // '!'
      }
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(285);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
      break;
    case 121:                       // 'element'
      lookahead2W(283);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
      break;
    case 184:                       // 'namespace'
    case 216:                       // 'processing-instruction'
      lookahead2W(282);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
      break;
    case 96:                        // 'comment'
    case 119:                       // 'document'
    case 202:                       // 'ordered'
    case 244:                       // 'text'
    case 256:                       // 'unordered'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 78:                        // 'array'
    case 124:                       // 'empty-sequence'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 242:                       // 'structured-item'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
    case 229:                       // 'self'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 145:                       // 'function'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 180:                       // 'mod'
    case 181:                       // 'modify'
    case 182:                       // 'module'
    case 185:                       // 'namespace-node'
    case 186:                       // 'ne'
    case 191:                       // 'node'
    case 192:                       // 'nodes'
    case 194:                       // 'object'
    case 198:                       // 'only'
    case 199:                       // 'option'
    case 200:                       // 'or'
    case 201:                       // 'order'
    case 203:                       // 'ordering'
    case 218:                       // 'rename'
    case 219:                       // 'replace'
    case 220:                       // 'return'
    case 221:                       // 'returning'
    case 222:                       // 'revalidation'
    case 224:                       // 'satisfies'
    case 225:                       // 'schema'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 228:                       // 'score'
    case 234:                       // 'sliding'
    case 235:                       // 'some'
    case 236:                       // 'stable'
    case 237:                       // 'start'
    case 240:                       // 'strict'
    case 248:                       // 'to'
    case 249:                       // 'treat'
    case 250:                       // 'try'
    case 251:                       // 'tumbling'
    case 252:                       // 'type'
    case 254:                       // 'union'
    case 257:                       // 'updating'
    case 260:                       // 'validate'
    case 261:                       // 'value'
    case 262:                       // 'variable'
    case 263:                       // 'version'
    case 266:                       // 'where'
    case 267:                       // 'while'
    case 270:                       // 'with'
    case 274:                       // 'xquery'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    default:
      lk = l1;
    }
    if (lk == 35922                 // 'attribute' 'after'
     || lk == 35961                 // 'element' 'after'
     || lk == 36024                 // 'namespace' 'after'
     || lk == 36056                 // 'processing-instruction' 'after'
     || lk == 38482                 // 'attribute' 'and'
     || lk == 38521                 // 'element' 'and'
     || lk == 38584                 // 'namespace' 'and'
     || lk == 38616                 // 'processing-instruction' 'and'
     || lk == 40530                 // 'attribute' 'as'
     || lk == 40569                 // 'element' 'as'
     || lk == 40632                 // 'namespace' 'as'
     || lk == 40664                 // 'processing-instruction' 'as'
     || lk == 41042                 // 'attribute' 'ascending'
     || lk == 41081                 // 'element' 'ascending'
     || lk == 41144                 // 'namespace' 'ascending'
     || lk == 41176                 // 'processing-instruction' 'ascending'
     || lk == 41554                 // 'attribute' 'at'
     || lk == 41593                 // 'element' 'at'
     || lk == 41656                 // 'namespace' 'at'
     || lk == 41688                 // 'processing-instruction' 'at'
     || lk == 43090                 // 'attribute' 'before'
     || lk == 43129                 // 'element' 'before'
     || lk == 43192                 // 'namespace' 'before'
     || lk == 43224                 // 'processing-instruction' 'before'
     || lk == 45138                 // 'attribute' 'case'
     || lk == 45177                 // 'element' 'case'
     || lk == 45240                 // 'namespace' 'case'
     || lk == 45272                 // 'processing-instruction' 'case'
     || lk == 45650                 // 'attribute' 'cast'
     || lk == 45689                 // 'element' 'cast'
     || lk == 45752                 // 'namespace' 'cast'
     || lk == 45784                 // 'processing-instruction' 'cast'
     || lk == 46162                 // 'attribute' 'castable'
     || lk == 46201                 // 'element' 'castable'
     || lk == 46264                 // 'namespace' 'castable'
     || lk == 46296                 // 'processing-instruction' 'castable'
     || lk == 48210                 // 'attribute' 'collation'
     || lk == 48249                 // 'element' 'collation'
     || lk == 48312                 // 'namespace' 'collation'
     || lk == 48344                 // 'processing-instruction' 'collation'
     || lk == 53842                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53944                 // 'namespace' 'count'
     || lk == 53976                 // 'processing-instruction' 'count'
     || lk == 55890                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55992                 // 'namespace' 'default'
     || lk == 56024                 // 'processing-instruction' 'default'
     || lk == 57938                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58040                 // 'namespace' 'descending'
     || lk == 58072                 // 'processing-instruction' 'descending'
     || lk == 60498                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60600                 // 'namespace' 'div'
     || lk == 60632                 // 'processing-instruction' 'div'
     || lk == 62546                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62648                 // 'namespace' 'else'
     || lk == 62680                 // 'processing-instruction' 'else'
     || lk == 63058                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63160                 // 'namespace' 'empty'
     || lk == 63192                 // 'processing-instruction' 'empty'
     || lk == 64594                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64696                 // 'namespace' 'end'
     || lk == 64728                 // 'processing-instruction' 'end'
     || lk == 65618                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65720                 // 'namespace' 'eq'
     || lk == 65752                 // 'processing-instruction' 'eq'
     || lk == 67154                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67256                 // 'namespace' 'except'
     || lk == 67288                 // 'processing-instruction' 'except'
     || lk == 70226                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70328                 // 'namespace' 'for'
     || lk == 70360                 // 'processing-instruction' 'for'
     || lk == 74834                 // 'attribute' 'ge'
     || lk == 74873                 // 'element' 'ge'
     || lk == 74936                 // 'namespace' 'ge'
     || lk == 74968                 // 'processing-instruction' 'ge'
     || lk == 75858                 // 'attribute' 'group'
     || lk == 75897                 // 'element' 'group'
     || lk == 75960                 // 'namespace' 'group'
     || lk == 75992                 // 'processing-instruction' 'group'
     || lk == 76882                 // 'attribute' 'gt'
     || lk == 76921                 // 'element' 'gt'
     || lk == 76984                 // 'namespace' 'gt'
     || lk == 77016                 // 'processing-instruction' 'gt'
     || lk == 77394                 // 'attribute' 'idiv'
     || lk == 77433                 // 'element' 'idiv'
     || lk == 77496                 // 'namespace' 'idiv'
     || lk == 77528                 // 'processing-instruction' 'idiv'
     || lk == 82002                 // 'attribute' 'instance'
     || lk == 82041                 // 'element' 'instance'
     || lk == 82104                 // 'namespace' 'instance'
     || lk == 82136                 // 'processing-instruction' 'instance'
     || lk == 83026                 // 'attribute' 'intersect'
     || lk == 83065                 // 'element' 'intersect'
     || lk == 83128                 // 'namespace' 'intersect'
     || lk == 83160                 // 'processing-instruction' 'intersect'
     || lk == 83538                 // 'attribute' 'into'
     || lk == 83577                 // 'element' 'into'
     || lk == 83640                 // 'namespace' 'into'
     || lk == 83672                 // 'processing-instruction' 'into'
     || lk == 84050                 // 'attribute' 'is'
     || lk == 84089                 // 'element' 'is'
     || lk == 84152                 // 'namespace' 'is'
     || lk == 84184                 // 'processing-instruction' 'is'
     || lk == 88146                 // 'attribute' 'le'
     || lk == 88185                 // 'element' 'le'
     || lk == 88248                 // 'namespace' 'le'
     || lk == 88280                 // 'processing-instruction' 'le'
     || lk == 89170                 // 'attribute' 'let'
     || lk == 89209                 // 'element' 'let'
     || lk == 89272                 // 'namespace' 'let'
     || lk == 89304                 // 'processing-instruction' 'let'
     || lk == 91218                 // 'attribute' 'lt'
     || lk == 91257                 // 'element' 'lt'
     || lk == 91320                 // 'namespace' 'lt'
     || lk == 91352                 // 'processing-instruction' 'lt'
     || lk == 92242                 // 'attribute' 'mod'
     || lk == 92281                 // 'element' 'mod'
     || lk == 92344                 // 'namespace' 'mod'
     || lk == 92376                 // 'processing-instruction' 'mod'
     || lk == 92754                 // 'attribute' 'modify'
     || lk == 92793                 // 'element' 'modify'
     || lk == 92856                 // 'namespace' 'modify'
     || lk == 92888                 // 'processing-instruction' 'modify'
     || lk == 95314                 // 'attribute' 'ne'
     || lk == 95353                 // 'element' 'ne'
     || lk == 95416                 // 'namespace' 'ne'
     || lk == 95448                 // 'processing-instruction' 'ne'
     || lk == 101458                // 'attribute' 'only'
     || lk == 101497                // 'element' 'only'
     || lk == 101560                // 'namespace' 'only'
     || lk == 101592                // 'processing-instruction' 'only'
     || lk == 102482                // 'attribute' 'or'
     || lk == 102521                // 'element' 'or'
     || lk == 102584                // 'namespace' 'or'
     || lk == 102616                // 'processing-instruction' 'or'
     || lk == 102994                // 'attribute' 'order'
     || lk == 103033                // 'element' 'order'
     || lk == 103096                // 'namespace' 'order'
     || lk == 103128                // 'processing-instruction' 'order'
     || lk == 112722                // 'attribute' 'return'
     || lk == 112761                // 'element' 'return'
     || lk == 112824                // 'namespace' 'return'
     || lk == 112856                // 'processing-instruction' 'return'
     || lk == 114770                // 'attribute' 'satisfies'
     || lk == 114809                // 'element' 'satisfies'
     || lk == 114872                // 'namespace' 'satisfies'
     || lk == 114904                // 'processing-instruction' 'satisfies'
     || lk == 120914                // 'attribute' 'stable'
     || lk == 120953                // 'element' 'stable'
     || lk == 121016                // 'namespace' 'stable'
     || lk == 121048                // 'processing-instruction' 'stable'
     || lk == 121426                // 'attribute' 'start'
     || lk == 121465                // 'element' 'start'
     || lk == 121528                // 'namespace' 'start'
     || lk == 121560                // 'processing-instruction' 'start'
     || lk == 127058                // 'attribute' 'to'
     || lk == 127097                // 'element' 'to'
     || lk == 127160                // 'namespace' 'to'
     || lk == 127192                // 'processing-instruction' 'to'
     || lk == 127570                // 'attribute' 'treat'
     || lk == 127609                // 'element' 'treat'
     || lk == 127672                // 'namespace' 'treat'
     || lk == 127704                // 'processing-instruction' 'treat'
     || lk == 130130                // 'attribute' 'union'
     || lk == 130169                // 'element' 'union'
     || lk == 130232                // 'namespace' 'union'
     || lk == 130264                // 'processing-instruction' 'union'
     || lk == 136274                // 'attribute' 'where'
     || lk == 136313                // 'element' 'where'
     || lk == 136376                // 'namespace' 'where'
     || lk == 136408                // 'processing-instruction' 'where'
     || lk == 138322                // 'attribute' 'with'
     || lk == 138361                // 'element' 'with'
     || lk == 138424                // 'namespace' 'with'
     || lk == 138456)               // 'processing-instruction' 'with'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 68:                        // '['
    case 276:                       // '{'
    case 278:                       // '{|'
    case 3154:                      // 'attribute' EQName^Token
    case 3193:                      // 'element' EQName^Token
    case 9912:                      // 'namespace' NCName^Token
    case 9944:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14926:                     // 'array' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14993:                     // 'function' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15000:                     // 'if' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15013:                     // 'item' '#'
    case 15014:                     // 'json' '#'
    case 15015:                     // 'json-item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15028:                     // 'mod' '#'
    case 15029:                     // 'modify' '#'
    case 15030:                     // 'module' '#'
    case 15032:                     // 'namespace' '#'
    case 15033:                     // 'namespace-node' '#'
    case 15034:                     // 'ne' '#'
    case 15039:                     // 'node' '#'
    case 15040:                     // 'nodes' '#'
    case 15042:                     // 'object' '#'
    case 15046:                     // 'only' '#'
    case 15047:                     // 'option' '#'
    case 15048:                     // 'or' '#'
    case 15049:                     // 'order' '#'
    case 15050:                     // 'ordered' '#'
    case 15051:                     // 'ordering' '#'
    case 15054:                     // 'parent' '#'
    case 15060:                     // 'preceding' '#'
    case 15061:                     // 'preceding-sibling' '#'
    case 15064:                     // 'processing-instruction' '#'
    case 15066:                     // 'rename' '#'
    case 15067:                     // 'replace' '#'
    case 15068:                     // 'return' '#'
    case 15069:                     // 'returning' '#'
    case 15070:                     // 'revalidation' '#'
    case 15072:                     // 'satisfies' '#'
    case 15073:                     // 'schema' '#'
    case 15074:                     // 'schema-attribute' '#'
    case 15075:                     // 'schema-element' '#'
    case 15076:                     // 'score' '#'
    case 15077:                     // 'self' '#'
    case 15082:                     // 'sliding' '#'
    case 15083:                     // 'some' '#'
    case 15084:                     // 'stable' '#'
    case 15085:                     // 'start' '#'
    case 15088:                     // 'strict' '#'
    case 15090:                     // 'structured-item' '#'
    case 15091:                     // 'switch' '#'
    case 15092:                     // 'text' '#'
    case 15096:                     // 'to' '#'
    case 15097:                     // 'treat' '#'
    case 15098:                     // 'try' '#'
    case 15099:                     // 'tumbling' '#'
    case 15100:                     // 'type' '#'
    case 15101:                     // 'typeswitch' '#'
    case 15102:                     // 'union' '#'
    case 15104:                     // 'unordered' '#'
    case 15105:                     // 'updating' '#'
    case 15108:                     // 'validate' '#'
    case 15109:                     // 'value' '#'
    case 15110:                     // 'variable' '#'
    case 15111:                     // 'version' '#'
    case 15114:                     // 'where' '#'
    case 15115:                     // 'while' '#'
    case 15118:                     // 'with' '#'
    case 15122:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17553:                     // 'function' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17588:                     // 'mod' '('
    case 17589:                     // 'modify' '('
    case 17590:                     // 'module' '('
    case 17592:                     // 'namespace' '('
    case 17594:                     // 'ne' '('
    case 17600:                     // 'nodes' '('
    case 17602:                     // 'object' '('
    case 17606:                     // 'only' '('
    case 17607:                     // 'option' '('
    case 17608:                     // 'or' '('
    case 17609:                     // 'order' '('
    case 17610:                     // 'ordered' '('
    case 17611:                     // 'ordering' '('
    case 17614:                     // 'parent' '('
    case 17620:                     // 'preceding' '('
    case 17621:                     // 'preceding-sibling' '('
    case 17626:                     // 'rename' '('
    case 17627:                     // 'replace' '('
    case 17628:                     // 'return' '('
    case 17629:                     // 'returning' '('
    case 17630:                     // 'revalidation' '('
    case 17632:                     // 'satisfies' '('
    case 17633:                     // 'schema' '('
    case 17636:                     // 'score' '('
    case 17637:                     // 'self' '('
    case 17642:                     // 'sliding' '('
    case 17643:                     // 'some' '('
    case 17644:                     // 'stable' '('
    case 17645:                     // 'start' '('
    case 17648:                     // 'strict' '('
    case 17656:                     // 'to' '('
    case 17657:                     // 'treat' '('
    case 17658:                     // 'try' '('
    case 17659:                     // 'tumbling' '('
    case 17660:                     // 'type' '('
    case 17662:                     // 'union' '('
    case 17664:                     // 'unordered' '('
    case 17665:                     // 'updating' '('
    case 17668:                     // 'validate' '('
    case 17669:                     // 'value' '('
    case 17670:                     // 'variable' '('
    case 17671:                     // 'version' '('
    case 17674:                     // 'where' '('
    case 17675:                     // 'while' '('
    case 17678:                     // 'with' '('
    case 17682:                     // 'xquery' '('
    case 36946:                     // 'attribute' 'allowing'
    case 36985:                     // 'element' 'allowing'
    case 37048:                     // 'namespace' 'allowing'
    case 37080:                     // 'processing-instruction' 'allowing'
    case 37458:                     // 'attribute' 'ancestor'
    case 37497:                     // 'element' 'ancestor'
    case 37560:                     // 'namespace' 'ancestor'
    case 37592:                     // 'processing-instruction' 'ancestor'
    case 37970:                     // 'attribute' 'ancestor-or-self'
    case 38009:                     // 'element' 'ancestor-or-self'
    case 38072:                     // 'namespace' 'ancestor-or-self'
    case 38104:                     // 'processing-instruction' 'ancestor-or-self'
    case 39506:                     // 'attribute' 'append'
    case 39545:                     // 'element' 'append'
    case 39608:                     // 'namespace' 'append'
    case 39640:                     // 'processing-instruction' 'append'
    case 40018:                     // 'attribute' 'array'
    case 40057:                     // 'element' 'array'
    case 42066:                     // 'attribute' 'attribute'
    case 42105:                     // 'element' 'attribute'
    case 42168:                     // 'namespace' 'attribute'
    case 42200:                     // 'processing-instruction' 'attribute'
    case 42578:                     // 'attribute' 'base-uri'
    case 42617:                     // 'element' 'base-uri'
    case 42680:                     // 'namespace' 'base-uri'
    case 42712:                     // 'processing-instruction' 'base-uri'
    case 43602:                     // 'attribute' 'boundary-space'
    case 43641:                     // 'element' 'boundary-space'
    case 43704:                     // 'namespace' 'boundary-space'
    case 43736:                     // 'processing-instruction' 'boundary-space'
    case 44114:                     // 'attribute' 'break'
    case 44153:                     // 'element' 'break'
    case 44216:                     // 'namespace' 'break'
    case 44248:                     // 'processing-instruction' 'break'
    case 46674:                     // 'attribute' 'catch'
    case 46713:                     // 'element' 'catch'
    case 46776:                     // 'namespace' 'catch'
    case 46808:                     // 'processing-instruction' 'catch'
    case 47698:                     // 'attribute' 'child'
    case 47737:                     // 'element' 'child'
    case 47800:                     // 'namespace' 'child'
    case 47832:                     // 'processing-instruction' 'child'
    case 49234:                     // 'attribute' 'comment'
    case 49273:                     // 'element' 'comment'
    case 49336:                     // 'namespace' 'comment'
    case 49368:                     // 'processing-instruction' 'comment'
    case 49746:                     // 'attribute' 'constraint'
    case 49785:                     // 'element' 'constraint'
    case 49848:                     // 'namespace' 'constraint'
    case 49880:                     // 'processing-instruction' 'constraint'
    case 50258:                     // 'attribute' 'construction'
    case 50297:                     // 'element' 'construction'
    case 50360:                     // 'namespace' 'construction'
    case 50392:                     // 'processing-instruction' 'construction'
    case 51794:                     // 'attribute' 'context'
    case 51833:                     // 'element' 'context'
    case 51896:                     // 'namespace' 'context'
    case 51928:                     // 'processing-instruction' 'context'
    case 52306:                     // 'attribute' 'continue'
    case 52345:                     // 'element' 'continue'
    case 52408:                     // 'namespace' 'continue'
    case 52440:                     // 'processing-instruction' 'continue'
    case 52818:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 52920:                     // 'namespace' 'copy'
    case 52952:                     // 'processing-instruction' 'copy'
    case 53330:                     // 'attribute' 'copy-namespaces'
    case 53369:                     // 'element' 'copy-namespaces'
    case 53432:                     // 'namespace' 'copy-namespaces'
    case 53464:                     // 'processing-instruction' 'copy-namespaces'
    case 54354:                     // 'attribute' 'decimal-format'
    case 54393:                     // 'element' 'decimal-format'
    case 54456:                     // 'namespace' 'decimal-format'
    case 54488:                     // 'processing-instruction' 'decimal-format'
    case 55378:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 55480:                     // 'namespace' 'declare'
    case 55512:                     // 'processing-instruction' 'declare'
    case 56402:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56504:                     // 'namespace' 'delete'
    case 56536:                     // 'processing-instruction' 'delete'
    case 56914:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57016:                     // 'namespace' 'descendant'
    case 57048:                     // 'processing-instruction' 'descendant'
    case 57426:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 57528:                     // 'namespace' 'descendant-or-self'
    case 57560:                     // 'processing-instruction' 'descendant-or-self'
    case 61010:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61112:                     // 'namespace' 'document'
    case 61144:                     // 'processing-instruction' 'document'
    case 61522:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 61624:                     // 'namespace' 'document-node'
    case 61656:                     // 'processing-instruction' 'document-node'
    case 62034:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 62136:                     // 'namespace' 'element'
    case 62168:                     // 'processing-instruction' 'element'
    case 63570:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 63672:                     // 'namespace' 'empty-sequence'
    case 63704:                     // 'processing-instruction' 'empty-sequence'
    case 64082:                     // 'attribute' 'encoding'
    case 64121:                     // 'element' 'encoding'
    case 64184:                     // 'namespace' 'encoding'
    case 64216:                     // 'processing-instruction' 'encoding'
    case 66130:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 66232:                     // 'namespace' 'every'
    case 66264:                     // 'processing-instruction' 'every'
    case 67666:                     // 'attribute' 'exit'
    case 67705:                     // 'element' 'exit'
    case 67768:                     // 'namespace' 'exit'
    case 67800:                     // 'processing-instruction' 'exit'
    case 68178:                     // 'attribute' 'external'
    case 68217:                     // 'element' 'external'
    case 68280:                     // 'namespace' 'external'
    case 68312:                     // 'processing-instruction' 'external'
    case 68690:                     // 'attribute' 'first'
    case 68729:                     // 'element' 'first'
    case 68792:                     // 'namespace' 'first'
    case 68824:                     // 'processing-instruction' 'first'
    case 69202:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69304:                     // 'namespace' 'following'
    case 69336:                     // 'processing-instruction' 'following'
    case 69714:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 69816:                     // 'namespace' 'following-sibling'
    case 69848:                     // 'processing-instruction' 'following-sibling'
    case 72274:                     // 'attribute' 'ft-option'
    case 72313:                     // 'element' 'ft-option'
    case 72376:                     // 'namespace' 'ft-option'
    case 72408:                     // 'processing-instruction' 'ft-option'
    case 74322:                     // 'attribute' 'function'
    case 74361:                     // 'element' 'function'
    case 74424:                     // 'namespace' 'function'
    case 74456:                     // 'processing-instruction' 'function'
    case 77906:                     // 'attribute' 'if'
    case 77945:                     // 'element' 'if'
    case 78008:                     // 'namespace' 'if'
    case 78040:                     // 'processing-instruction' 'if'
    case 78418:                     // 'attribute' 'import'
    case 78457:                     // 'element' 'import'
    case 78520:                     // 'namespace' 'import'
    case 78552:                     // 'processing-instruction' 'import'
    case 78930:                     // 'attribute' 'in'
    case 78969:                     // 'element' 'in'
    case 79032:                     // 'namespace' 'in'
    case 79064:                     // 'processing-instruction' 'in'
    case 79442:                     // 'attribute' 'index'
    case 79481:                     // 'element' 'index'
    case 79544:                     // 'namespace' 'index'
    case 79576:                     // 'processing-instruction' 'index'
    case 81490:                     // 'attribute' 'insert'
    case 81529:                     // 'element' 'insert'
    case 81592:                     // 'namespace' 'insert'
    case 81624:                     // 'processing-instruction' 'insert'
    case 82514:                     // 'attribute' 'integrity'
    case 82553:                     // 'element' 'integrity'
    case 82616:                     // 'namespace' 'integrity'
    case 82648:                     // 'processing-instruction' 'integrity'
    case 84562:                     // 'attribute' 'item'
    case 84601:                     // 'element' 'item'
    case 84664:                     // 'namespace' 'item'
    case 84696:                     // 'processing-instruction' 'item'
    case 85074:                     // 'attribute' 'json'
    case 85113:                     // 'element' 'json'
    case 85176:                     // 'namespace' 'json'
    case 85208:                     // 'processing-instruction' 'json'
    case 85586:                     // 'attribute' 'json-item'
    case 85625:                     // 'element' 'json-item'
    case 87122:                     // 'attribute' 'last'
    case 87161:                     // 'element' 'last'
    case 87224:                     // 'namespace' 'last'
    case 87256:                     // 'processing-instruction' 'last'
    case 87634:                     // 'attribute' 'lax'
    case 87673:                     // 'element' 'lax'
    case 87736:                     // 'namespace' 'lax'
    case 87768:                     // 'processing-instruction' 'lax'
    case 90194:                     // 'attribute' 'loop'
    case 90233:                     // 'element' 'loop'
    case 90296:                     // 'namespace' 'loop'
    case 90328:                     // 'processing-instruction' 'loop'
    case 93266:                     // 'attribute' 'module'
    case 93305:                     // 'element' 'module'
    case 93368:                     // 'namespace' 'module'
    case 93400:                     // 'processing-instruction' 'module'
    case 94290:                     // 'attribute' 'namespace'
    case 94329:                     // 'element' 'namespace'
    case 94392:                     // 'namespace' 'namespace'
    case 94424:                     // 'processing-instruction' 'namespace'
    case 94802:                     // 'attribute' 'namespace-node'
    case 94841:                     // 'element' 'namespace-node'
    case 94904:                     // 'namespace' 'namespace-node'
    case 94936:                     // 'processing-instruction' 'namespace-node'
    case 97874:                     // 'attribute' 'node'
    case 97913:                     // 'element' 'node'
    case 97976:                     // 'namespace' 'node'
    case 98008:                     // 'processing-instruction' 'node'
    case 98386:                     // 'attribute' 'nodes'
    case 98425:                     // 'element' 'nodes'
    case 98488:                     // 'namespace' 'nodes'
    case 98520:                     // 'processing-instruction' 'nodes'
    case 99410:                     // 'attribute' 'object'
    case 99449:                     // 'element' 'object'
    case 99512:                     // 'namespace' 'object'
    case 99544:                     // 'processing-instruction' 'object'
    case 101970:                    // 'attribute' 'option'
    case 102009:                    // 'element' 'option'
    case 102072:                    // 'namespace' 'option'
    case 102104:                    // 'processing-instruction' 'option'
    case 103506:                    // 'attribute' 'ordered'
    case 103545:                    // 'element' 'ordered'
    case 103608:                    // 'namespace' 'ordered'
    case 103640:                    // 'processing-instruction' 'ordered'
    case 104018:                    // 'attribute' 'ordering'
    case 104057:                    // 'element' 'ordering'
    case 104120:                    // 'namespace' 'ordering'
    case 104152:                    // 'processing-instruction' 'ordering'
    case 105554:                    // 'attribute' 'parent'
    case 105593:                    // 'element' 'parent'
    case 105656:                    // 'namespace' 'parent'
    case 105688:                    // 'processing-instruction' 'parent'
    case 108626:                    // 'attribute' 'preceding'
    case 108665:                    // 'element' 'preceding'
    case 108728:                    // 'namespace' 'preceding'
    case 108760:                    // 'processing-instruction' 'preceding'
    case 109138:                    // 'attribute' 'preceding-sibling'
    case 109177:                    // 'element' 'preceding-sibling'
    case 109240:                    // 'namespace' 'preceding-sibling'
    case 109272:                    // 'processing-instruction' 'preceding-sibling'
    case 110674:                    // 'attribute' 'processing-instruction'
    case 110713:                    // 'element' 'processing-instruction'
    case 110776:                    // 'namespace' 'processing-instruction'
    case 110808:                    // 'processing-instruction' 'processing-instruction'
    case 111698:                    // 'attribute' 'rename'
    case 111737:                    // 'element' 'rename'
    case 111800:                    // 'namespace' 'rename'
    case 111832:                    // 'processing-instruction' 'rename'
    case 112210:                    // 'attribute' 'replace'
    case 112249:                    // 'element' 'replace'
    case 112312:                    // 'namespace' 'replace'
    case 112344:                    // 'processing-instruction' 'replace'
    case 113234:                    // 'attribute' 'returning'
    case 113273:                    // 'element' 'returning'
    case 113336:                    // 'namespace' 'returning'
    case 113368:                    // 'processing-instruction' 'returning'
    case 113746:                    // 'attribute' 'revalidation'
    case 113785:                    // 'element' 'revalidation'
    case 113848:                    // 'namespace' 'revalidation'
    case 113880:                    // 'processing-instruction' 'revalidation'
    case 115282:                    // 'attribute' 'schema'
    case 115321:                    // 'element' 'schema'
    case 115384:                    // 'namespace' 'schema'
    case 115416:                    // 'processing-instruction' 'schema'
    case 115794:                    // 'attribute' 'schema-attribute'
    case 115833:                    // 'element' 'schema-attribute'
    case 115896:                    // 'namespace' 'schema-attribute'
    case 115928:                    // 'processing-instruction' 'schema-attribute'
    case 116306:                    // 'attribute' 'schema-element'
    case 116345:                    // 'element' 'schema-element'
    case 116408:                    // 'namespace' 'schema-element'
    case 116440:                    // 'processing-instruction' 'schema-element'
    case 116818:                    // 'attribute' 'score'
    case 116857:                    // 'element' 'score'
    case 116920:                    // 'namespace' 'score'
    case 116952:                    // 'processing-instruction' 'score'
    case 117330:                    // 'attribute' 'self'
    case 117369:                    // 'element' 'self'
    case 117432:                    // 'namespace' 'self'
    case 117464:                    // 'processing-instruction' 'self'
    case 119890:                    // 'attribute' 'sliding'
    case 119929:                    // 'element' 'sliding'
    case 119992:                    // 'namespace' 'sliding'
    case 120024:                    // 'processing-instruction' 'sliding'
    case 120402:                    // 'attribute' 'some'
    case 120441:                    // 'element' 'some'
    case 120504:                    // 'namespace' 'some'
    case 120536:                    // 'processing-instruction' 'some'
    case 122962:                    // 'attribute' 'strict'
    case 123001:                    // 'element' 'strict'
    case 123064:                    // 'namespace' 'strict'
    case 123096:                    // 'processing-instruction' 'strict'
    case 123986:                    // 'attribute' 'structured-item'
    case 124025:                    // 'element' 'structured-item'
    case 124498:                    // 'attribute' 'switch'
    case 124537:                    // 'element' 'switch'
    case 124600:                    // 'namespace' 'switch'
    case 124632:                    // 'processing-instruction' 'switch'
    case 125010:                    // 'attribute' 'text'
    case 125049:                    // 'element' 'text'
    case 125112:                    // 'namespace' 'text'
    case 125144:                    // 'processing-instruction' 'text'
    case 128082:                    // 'attribute' 'try'
    case 128121:                    // 'element' 'try'
    case 128184:                    // 'namespace' 'try'
    case 128216:                    // 'processing-instruction' 'try'
    case 128594:                    // 'attribute' 'tumbling'
    case 128633:                    // 'element' 'tumbling'
    case 128696:                    // 'namespace' 'tumbling'
    case 128728:                    // 'processing-instruction' 'tumbling'
    case 129106:                    // 'attribute' 'type'
    case 129145:                    // 'element' 'type'
    case 129208:                    // 'namespace' 'type'
    case 129240:                    // 'processing-instruction' 'type'
    case 129618:                    // 'attribute' 'typeswitch'
    case 129657:                    // 'element' 'typeswitch'
    case 129720:                    // 'namespace' 'typeswitch'
    case 129752:                    // 'processing-instruction' 'typeswitch'
    case 131154:                    // 'attribute' 'unordered'
    case 131193:                    // 'element' 'unordered'
    case 131256:                    // 'namespace' 'unordered'
    case 131288:                    // 'processing-instruction' 'unordered'
    case 131666:                    // 'attribute' 'updating'
    case 131705:                    // 'element' 'updating'
    case 131768:                    // 'namespace' 'updating'
    case 131800:                    // 'processing-instruction' 'updating'
    case 133202:                    // 'attribute' 'validate'
    case 133241:                    // 'element' 'validate'
    case 133304:                    // 'namespace' 'validate'
    case 133336:                    // 'processing-instruction' 'validate'
    case 133714:                    // 'attribute' 'value'
    case 133753:                    // 'element' 'value'
    case 133816:                    // 'namespace' 'value'
    case 133848:                    // 'processing-instruction' 'value'
    case 134226:                    // 'attribute' 'variable'
    case 134265:                    // 'element' 'variable'
    case 134328:                    // 'namespace' 'variable'
    case 134360:                    // 'processing-instruction' 'variable'
    case 134738:                    // 'attribute' 'version'
    case 134777:                    // 'element' 'version'
    case 134840:                    // 'namespace' 'version'
    case 134872:                    // 'processing-instruction' 'version'
    case 136786:                    // 'attribute' 'while'
    case 136825:                    // 'element' 'while'
    case 136888:                    // 'namespace' 'while'
    case 136920:                    // 'processing-instruction' 'while'
    case 140370:                    // 'attribute' 'xquery'
    case 140409:                    // 'element' 'xquery'
    case 140472:                    // 'namespace' 'xquery'
    case 140504:                    // 'processing-instruction' 'xquery'
    case 141394:                    // 'attribute' '{'
    case 141408:                    // 'comment' '{'
    case 141431:                    // 'document' '{'
    case 141433:                    // 'element' '{'
    case 141496:                    // 'namespace' '{'
    case 141514:                    // 'ordered' '{'
    case 141528:                    // 'processing-instruction' '{'
    case 141556:                    // 'text' '{'
    case 141568:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(285);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
      break;
    case 121:                       // 'element'
      lookahead2W(283);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
      break;
    case 184:                       // 'namespace'
    case 216:                       // 'processing-instruction'
      lookahead2W(282);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
      break;
    case 96:                        // 'comment'
    case 119:                       // 'document'
    case 202:                       // 'ordered'
    case 244:                       // 'text'
    case 256:                       // 'unordered'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 78:                        // 'array'
    case 124:                       // 'empty-sequence'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 242:                       // 'structured-item'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
    case 229:                       // 'self'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 145:                       // 'function'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 180:                       // 'mod'
    case 181:                       // 'modify'
    case 182:                       // 'module'
    case 185:                       // 'namespace-node'
    case 186:                       // 'ne'
    case 191:                       // 'node'
    case 192:                       // 'nodes'
    case 194:                       // 'object'
    case 198:                       // 'only'
    case 199:                       // 'option'
    case 200:                       // 'or'
    case 201:                       // 'order'
    case 203:                       // 'ordering'
    case 218:                       // 'rename'
    case 219:                       // 'replace'
    case 220:                       // 'return'
    case 221:                       // 'returning'
    case 222:                       // 'revalidation'
    case 224:                       // 'satisfies'
    case 225:                       // 'schema'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 228:                       // 'score'
    case 234:                       // 'sliding'
    case 235:                       // 'some'
    case 236:                       // 'stable'
    case 237:                       // 'start'
    case 240:                       // 'strict'
    case 248:                       // 'to'
    case 249:                       // 'treat'
    case 250:                       // 'try'
    case 251:                       // 'tumbling'
    case 252:                       // 'type'
    case 254:                       // 'union'
    case 257:                       // 'updating'
    case 260:                       // 'validate'
    case 261:                       // 'value'
    case 262:                       // 'variable'
    case 263:                       // 'version'
    case 266:                       // 'where'
    case 267:                       // 'while'
    case 270:                       // 'with'
    case 274:                       // 'xquery'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    default:
      lk = l1;
    }
    if (lk == 35922                 // 'attribute' 'after'
     || lk == 35961                 // 'element' 'after'
     || lk == 36024                 // 'namespace' 'after'
     || lk == 36056                 // 'processing-instruction' 'after'
     || lk == 38482                 // 'attribute' 'and'
     || lk == 38521                 // 'element' 'and'
     || lk == 38584                 // 'namespace' 'and'
     || lk == 38616                 // 'processing-instruction' 'and'
     || lk == 40530                 // 'attribute' 'as'
     || lk == 40569                 // 'element' 'as'
     || lk == 40632                 // 'namespace' 'as'
     || lk == 40664                 // 'processing-instruction' 'as'
     || lk == 41042                 // 'attribute' 'ascending'
     || lk == 41081                 // 'element' 'ascending'
     || lk == 41144                 // 'namespace' 'ascending'
     || lk == 41176                 // 'processing-instruction' 'ascending'
     || lk == 41554                 // 'attribute' 'at'
     || lk == 41593                 // 'element' 'at'
     || lk == 41656                 // 'namespace' 'at'
     || lk == 41688                 // 'processing-instruction' 'at'
     || lk == 43090                 // 'attribute' 'before'
     || lk == 43129                 // 'element' 'before'
     || lk == 43192                 // 'namespace' 'before'
     || lk == 43224                 // 'processing-instruction' 'before'
     || lk == 45138                 // 'attribute' 'case'
     || lk == 45177                 // 'element' 'case'
     || lk == 45240                 // 'namespace' 'case'
     || lk == 45272                 // 'processing-instruction' 'case'
     || lk == 45650                 // 'attribute' 'cast'
     || lk == 45689                 // 'element' 'cast'
     || lk == 45752                 // 'namespace' 'cast'
     || lk == 45784                 // 'processing-instruction' 'cast'
     || lk == 46162                 // 'attribute' 'castable'
     || lk == 46201                 // 'element' 'castable'
     || lk == 46264                 // 'namespace' 'castable'
     || lk == 46296                 // 'processing-instruction' 'castable'
     || lk == 48210                 // 'attribute' 'collation'
     || lk == 48249                 // 'element' 'collation'
     || lk == 48312                 // 'namespace' 'collation'
     || lk == 48344                 // 'processing-instruction' 'collation'
     || lk == 53842                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53944                 // 'namespace' 'count'
     || lk == 53976                 // 'processing-instruction' 'count'
     || lk == 55890                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55992                 // 'namespace' 'default'
     || lk == 56024                 // 'processing-instruction' 'default'
     || lk == 57938                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58040                 // 'namespace' 'descending'
     || lk == 58072                 // 'processing-instruction' 'descending'
     || lk == 60498                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60600                 // 'namespace' 'div'
     || lk == 60632                 // 'processing-instruction' 'div'
     || lk == 62546                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62648                 // 'namespace' 'else'
     || lk == 62680                 // 'processing-instruction' 'else'
     || lk == 63058                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63160                 // 'namespace' 'empty'
     || lk == 63192                 // 'processing-instruction' 'empty'
     || lk == 64594                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64696                 // 'namespace' 'end'
     || lk == 64728                 // 'processing-instruction' 'end'
     || lk == 65618                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65720                 // 'namespace' 'eq'
     || lk == 65752                 // 'processing-instruction' 'eq'
     || lk == 67154                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67256                 // 'namespace' 'except'
     || lk == 67288                 // 'processing-instruction' 'except'
     || lk == 70226                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70328                 // 'namespace' 'for'
     || lk == 70360                 // 'processing-instruction' 'for'
     || lk == 74834                 // 'attribute' 'ge'
     || lk == 74873                 // 'element' 'ge'
     || lk == 74936                 // 'namespace' 'ge'
     || lk == 74968                 // 'processing-instruction' 'ge'
     || lk == 75858                 // 'attribute' 'group'
     || lk == 75897                 // 'element' 'group'
     || lk == 75960                 // 'namespace' 'group'
     || lk == 75992                 // 'processing-instruction' 'group'
     || lk == 76882                 // 'attribute' 'gt'
     || lk == 76921                 // 'element' 'gt'
     || lk == 76984                 // 'namespace' 'gt'
     || lk == 77016                 // 'processing-instruction' 'gt'
     || lk == 77394                 // 'attribute' 'idiv'
     || lk == 77433                 // 'element' 'idiv'
     || lk == 77496                 // 'namespace' 'idiv'
     || lk == 77528                 // 'processing-instruction' 'idiv'
     || lk == 82002                 // 'attribute' 'instance'
     || lk == 82041                 // 'element' 'instance'
     || lk == 82104                 // 'namespace' 'instance'
     || lk == 82136                 // 'processing-instruction' 'instance'
     || lk == 83026                 // 'attribute' 'intersect'
     || lk == 83065                 // 'element' 'intersect'
     || lk == 83128                 // 'namespace' 'intersect'
     || lk == 83160                 // 'processing-instruction' 'intersect'
     || lk == 83538                 // 'attribute' 'into'
     || lk == 83577                 // 'element' 'into'
     || lk == 83640                 // 'namespace' 'into'
     || lk == 83672                 // 'processing-instruction' 'into'
     || lk == 84050                 // 'attribute' 'is'
     || lk == 84089                 // 'element' 'is'
     || lk == 84152                 // 'namespace' 'is'
     || lk == 84184                 // 'processing-instruction' 'is'
     || lk == 88146                 // 'attribute' 'le'
     || lk == 88185                 // 'element' 'le'
     || lk == 88248                 // 'namespace' 'le'
     || lk == 88280                 // 'processing-instruction' 'le'
     || lk == 89170                 // 'attribute' 'let'
     || lk == 89209                 // 'element' 'let'
     || lk == 89272                 // 'namespace' 'let'
     || lk == 89304                 // 'processing-instruction' 'let'
     || lk == 91218                 // 'attribute' 'lt'
     || lk == 91257                 // 'element' 'lt'
     || lk == 91320                 // 'namespace' 'lt'
     || lk == 91352                 // 'processing-instruction' 'lt'
     || lk == 92242                 // 'attribute' 'mod'
     || lk == 92281                 // 'element' 'mod'
     || lk == 92344                 // 'namespace' 'mod'
     || lk == 92376                 // 'processing-instruction' 'mod'
     || lk == 92754                 // 'attribute' 'modify'
     || lk == 92793                 // 'element' 'modify'
     || lk == 92856                 // 'namespace' 'modify'
     || lk == 92888                 // 'processing-instruction' 'modify'
     || lk == 95314                 // 'attribute' 'ne'
     || lk == 95353                 // 'element' 'ne'
     || lk == 95416                 // 'namespace' 'ne'
     || lk == 95448                 // 'processing-instruction' 'ne'
     || lk == 101458                // 'attribute' 'only'
     || lk == 101497                // 'element' 'only'
     || lk == 101560                // 'namespace' 'only'
     || lk == 101592                // 'processing-instruction' 'only'
     || lk == 102482                // 'attribute' 'or'
     || lk == 102521                // 'element' 'or'
     || lk == 102584                // 'namespace' 'or'
     || lk == 102616                // 'processing-instruction' 'or'
     || lk == 102994                // 'attribute' 'order'
     || lk == 103033                // 'element' 'order'
     || lk == 103096                // 'namespace' 'order'
     || lk == 103128                // 'processing-instruction' 'order'
     || lk == 112722                // 'attribute' 'return'
     || lk == 112761                // 'element' 'return'
     || lk == 112824                // 'namespace' 'return'
     || lk == 112856                // 'processing-instruction' 'return'
     || lk == 114770                // 'attribute' 'satisfies'
     || lk == 114809                // 'element' 'satisfies'
     || lk == 114872                // 'namespace' 'satisfies'
     || lk == 114904                // 'processing-instruction' 'satisfies'
     || lk == 120914                // 'attribute' 'stable'
     || lk == 120953                // 'element' 'stable'
     || lk == 121016                // 'namespace' 'stable'
     || lk == 121048                // 'processing-instruction' 'stable'
     || lk == 121426                // 'attribute' 'start'
     || lk == 121465                // 'element' 'start'
     || lk == 121528                // 'namespace' 'start'
     || lk == 121560                // 'processing-instruction' 'start'
     || lk == 127058                // 'attribute' 'to'
     || lk == 127097                // 'element' 'to'
     || lk == 127160                // 'namespace' 'to'
     || lk == 127192                // 'processing-instruction' 'to'
     || lk == 127570                // 'attribute' 'treat'
     || lk == 127609                // 'element' 'treat'
     || lk == 127672                // 'namespace' 'treat'
     || lk == 127704                // 'processing-instruction' 'treat'
     || lk == 130130                // 'attribute' 'union'
     || lk == 130169                // 'element' 'union'
     || lk == 130232                // 'namespace' 'union'
     || lk == 130264                // 'processing-instruction' 'union'
     || lk == 136274                // 'attribute' 'where'
     || lk == 136313                // 'element' 'where'
     || lk == 136376                // 'namespace' 'where'
     || lk == 136408                // 'processing-instruction' 'where'
     || lk == 138322                // 'attribute' 'with'
     || lk == 138361                // 'element' 'with'
     || lk == 138424                // 'namespace' 'with'
     || lk == 138456)               // 'processing-instruction' 'with'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(4, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 68:                        // '['
    case 276:                       // '{'
    case 278:                       // '{|'
    case 3154:                      // 'attribute' EQName^Token
    case 3193:                      // 'element' EQName^Token
    case 9912:                      // 'namespace' NCName^Token
    case 9944:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14926:                     // 'array' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14993:                     // 'function' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15000:                     // 'if' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15013:                     // 'item' '#'
    case 15014:                     // 'json' '#'
    case 15015:                     // 'json-item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15028:                     // 'mod' '#'
    case 15029:                     // 'modify' '#'
    case 15030:                     // 'module' '#'
    case 15032:                     // 'namespace' '#'
    case 15033:                     // 'namespace-node' '#'
    case 15034:                     // 'ne' '#'
    case 15039:                     // 'node' '#'
    case 15040:                     // 'nodes' '#'
    case 15042:                     // 'object' '#'
    case 15046:                     // 'only' '#'
    case 15047:                     // 'option' '#'
    case 15048:                     // 'or' '#'
    case 15049:                     // 'order' '#'
    case 15050:                     // 'ordered' '#'
    case 15051:                     // 'ordering' '#'
    case 15054:                     // 'parent' '#'
    case 15060:                     // 'preceding' '#'
    case 15061:                     // 'preceding-sibling' '#'
    case 15064:                     // 'processing-instruction' '#'
    case 15066:                     // 'rename' '#'
    case 15067:                     // 'replace' '#'
    case 15068:                     // 'return' '#'
    case 15069:                     // 'returning' '#'
    case 15070:                     // 'revalidation' '#'
    case 15072:                     // 'satisfies' '#'
    case 15073:                     // 'schema' '#'
    case 15074:                     // 'schema-attribute' '#'
    case 15075:                     // 'schema-element' '#'
    case 15076:                     // 'score' '#'
    case 15077:                     // 'self' '#'
    case 15082:                     // 'sliding' '#'
    case 15083:                     // 'some' '#'
    case 15084:                     // 'stable' '#'
    case 15085:                     // 'start' '#'
    case 15088:                     // 'strict' '#'
    case 15090:                     // 'structured-item' '#'
    case 15091:                     // 'switch' '#'
    case 15092:                     // 'text' '#'
    case 15096:                     // 'to' '#'
    case 15097:                     // 'treat' '#'
    case 15098:                     // 'try' '#'
    case 15099:                     // 'tumbling' '#'
    case 15100:                     // 'type' '#'
    case 15101:                     // 'typeswitch' '#'
    case 15102:                     // 'union' '#'
    case 15104:                     // 'unordered' '#'
    case 15105:                     // 'updating' '#'
    case 15108:                     // 'validate' '#'
    case 15109:                     // 'value' '#'
    case 15110:                     // 'variable' '#'
    case 15111:                     // 'version' '#'
    case 15114:                     // 'where' '#'
    case 15115:                     // 'while' '#'
    case 15118:                     // 'with' '#'
    case 15122:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17553:                     // 'function' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17588:                     // 'mod' '('
    case 17589:                     // 'modify' '('
    case 17590:                     // 'module' '('
    case 17592:                     // 'namespace' '('
    case 17594:                     // 'ne' '('
    case 17600:                     // 'nodes' '('
    case 17602:                     // 'object' '('
    case 17606:                     // 'only' '('
    case 17607:                     // 'option' '('
    case 17608:                     // 'or' '('
    case 17609:                     // 'order' '('
    case 17610:                     // 'ordered' '('
    case 17611:                     // 'ordering' '('
    case 17614:                     // 'parent' '('
    case 17620:                     // 'preceding' '('
    case 17621:                     // 'preceding-sibling' '('
    case 17626:                     // 'rename' '('
    case 17627:                     // 'replace' '('
    case 17628:                     // 'return' '('
    case 17629:                     // 'returning' '('
    case 17630:                     // 'revalidation' '('
    case 17632:                     // 'satisfies' '('
    case 17633:                     // 'schema' '('
    case 17636:                     // 'score' '('
    case 17637:                     // 'self' '('
    case 17642:                     // 'sliding' '('
    case 17643:                     // 'some' '('
    case 17644:                     // 'stable' '('
    case 17645:                     // 'start' '('
    case 17648:                     // 'strict' '('
    case 17656:                     // 'to' '('
    case 17657:                     // 'treat' '('
    case 17658:                     // 'try' '('
    case 17659:                     // 'tumbling' '('
    case 17660:                     // 'type' '('
    case 17662:                     // 'union' '('
    case 17664:                     // 'unordered' '('
    case 17665:                     // 'updating' '('
    case 17668:                     // 'validate' '('
    case 17669:                     // 'value' '('
    case 17670:                     // 'variable' '('
    case 17671:                     // 'version' '('
    case 17674:                     // 'where' '('
    case 17675:                     // 'while' '('
    case 17678:                     // 'with' '('
    case 17682:                     // 'xquery' '('
    case 36946:                     // 'attribute' 'allowing'
    case 36985:                     // 'element' 'allowing'
    case 37048:                     // 'namespace' 'allowing'
    case 37080:                     // 'processing-instruction' 'allowing'
    case 37458:                     // 'attribute' 'ancestor'
    case 37497:                     // 'element' 'ancestor'
    case 37560:                     // 'namespace' 'ancestor'
    case 37592:                     // 'processing-instruction' 'ancestor'
    case 37970:                     // 'attribute' 'ancestor-or-self'
    case 38009:                     // 'element' 'ancestor-or-self'
    case 38072:                     // 'namespace' 'ancestor-or-self'
    case 38104:                     // 'processing-instruction' 'ancestor-or-self'
    case 39506:                     // 'attribute' 'append'
    case 39545:                     // 'element' 'append'
    case 39608:                     // 'namespace' 'append'
    case 39640:                     // 'processing-instruction' 'append'
    case 40018:                     // 'attribute' 'array'
    case 40057:                     // 'element' 'array'
    case 42066:                     // 'attribute' 'attribute'
    case 42105:                     // 'element' 'attribute'
    case 42168:                     // 'namespace' 'attribute'
    case 42200:                     // 'processing-instruction' 'attribute'
    case 42578:                     // 'attribute' 'base-uri'
    case 42617:                     // 'element' 'base-uri'
    case 42680:                     // 'namespace' 'base-uri'
    case 42712:                     // 'processing-instruction' 'base-uri'
    case 43602:                     // 'attribute' 'boundary-space'
    case 43641:                     // 'element' 'boundary-space'
    case 43704:                     // 'namespace' 'boundary-space'
    case 43736:                     // 'processing-instruction' 'boundary-space'
    case 44114:                     // 'attribute' 'break'
    case 44153:                     // 'element' 'break'
    case 44216:                     // 'namespace' 'break'
    case 44248:                     // 'processing-instruction' 'break'
    case 46674:                     // 'attribute' 'catch'
    case 46713:                     // 'element' 'catch'
    case 46776:                     // 'namespace' 'catch'
    case 46808:                     // 'processing-instruction' 'catch'
    case 47698:                     // 'attribute' 'child'
    case 47737:                     // 'element' 'child'
    case 47800:                     // 'namespace' 'child'
    case 47832:                     // 'processing-instruction' 'child'
    case 49234:                     // 'attribute' 'comment'
    case 49273:                     // 'element' 'comment'
    case 49336:                     // 'namespace' 'comment'
    case 49368:                     // 'processing-instruction' 'comment'
    case 49746:                     // 'attribute' 'constraint'
    case 49785:                     // 'element' 'constraint'
    case 49848:                     // 'namespace' 'constraint'
    case 49880:                     // 'processing-instruction' 'constraint'
    case 50258:                     // 'attribute' 'construction'
    case 50297:                     // 'element' 'construction'
    case 50360:                     // 'namespace' 'construction'
    case 50392:                     // 'processing-instruction' 'construction'
    case 51794:                     // 'attribute' 'context'
    case 51833:                     // 'element' 'context'
    case 51896:                     // 'namespace' 'context'
    case 51928:                     // 'processing-instruction' 'context'
    case 52306:                     // 'attribute' 'continue'
    case 52345:                     // 'element' 'continue'
    case 52408:                     // 'namespace' 'continue'
    case 52440:                     // 'processing-instruction' 'continue'
    case 52818:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 52920:                     // 'namespace' 'copy'
    case 52952:                     // 'processing-instruction' 'copy'
    case 53330:                     // 'attribute' 'copy-namespaces'
    case 53369:                     // 'element' 'copy-namespaces'
    case 53432:                     // 'namespace' 'copy-namespaces'
    case 53464:                     // 'processing-instruction' 'copy-namespaces'
    case 54354:                     // 'attribute' 'decimal-format'
    case 54393:                     // 'element' 'decimal-format'
    case 54456:                     // 'namespace' 'decimal-format'
    case 54488:                     // 'processing-instruction' 'decimal-format'
    case 55378:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 55480:                     // 'namespace' 'declare'
    case 55512:                     // 'processing-instruction' 'declare'
    case 56402:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56504:                     // 'namespace' 'delete'
    case 56536:                     // 'processing-instruction' 'delete'
    case 56914:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57016:                     // 'namespace' 'descendant'
    case 57048:                     // 'processing-instruction' 'descendant'
    case 57426:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 57528:                     // 'namespace' 'descendant-or-self'
    case 57560:                     // 'processing-instruction' 'descendant-or-self'
    case 61010:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61112:                     // 'namespace' 'document'
    case 61144:                     // 'processing-instruction' 'document'
    case 61522:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 61624:                     // 'namespace' 'document-node'
    case 61656:                     // 'processing-instruction' 'document-node'
    case 62034:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 62136:                     // 'namespace' 'element'
    case 62168:                     // 'processing-instruction' 'element'
    case 63570:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 63672:                     // 'namespace' 'empty-sequence'
    case 63704:                     // 'processing-instruction' 'empty-sequence'
    case 64082:                     // 'attribute' 'encoding'
    case 64121:                     // 'element' 'encoding'
    case 64184:                     // 'namespace' 'encoding'
    case 64216:                     // 'processing-instruction' 'encoding'
    case 66130:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 66232:                     // 'namespace' 'every'
    case 66264:                     // 'processing-instruction' 'every'
    case 67666:                     // 'attribute' 'exit'
    case 67705:                     // 'element' 'exit'
    case 67768:                     // 'namespace' 'exit'
    case 67800:                     // 'processing-instruction' 'exit'
    case 68178:                     // 'attribute' 'external'
    case 68217:                     // 'element' 'external'
    case 68280:                     // 'namespace' 'external'
    case 68312:                     // 'processing-instruction' 'external'
    case 68690:                     // 'attribute' 'first'
    case 68729:                     // 'element' 'first'
    case 68792:                     // 'namespace' 'first'
    case 68824:                     // 'processing-instruction' 'first'
    case 69202:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69304:                     // 'namespace' 'following'
    case 69336:                     // 'processing-instruction' 'following'
    case 69714:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 69816:                     // 'namespace' 'following-sibling'
    case 69848:                     // 'processing-instruction' 'following-sibling'
    case 72274:                     // 'attribute' 'ft-option'
    case 72313:                     // 'element' 'ft-option'
    case 72376:                     // 'namespace' 'ft-option'
    case 72408:                     // 'processing-instruction' 'ft-option'
    case 74322:                     // 'attribute' 'function'
    case 74361:                     // 'element' 'function'
    case 74424:                     // 'namespace' 'function'
    case 74456:                     // 'processing-instruction' 'function'
    case 77906:                     // 'attribute' 'if'
    case 77945:                     // 'element' 'if'
    case 78008:                     // 'namespace' 'if'
    case 78040:                     // 'processing-instruction' 'if'
    case 78418:                     // 'attribute' 'import'
    case 78457:                     // 'element' 'import'
    case 78520:                     // 'namespace' 'import'
    case 78552:                     // 'processing-instruction' 'import'
    case 78930:                     // 'attribute' 'in'
    case 78969:                     // 'element' 'in'
    case 79032:                     // 'namespace' 'in'
    case 79064:                     // 'processing-instruction' 'in'
    case 79442:                     // 'attribute' 'index'
    case 79481:                     // 'element' 'index'
    case 79544:                     // 'namespace' 'index'
    case 79576:                     // 'processing-instruction' 'index'
    case 81490:                     // 'attribute' 'insert'
    case 81529:                     // 'element' 'insert'
    case 81592:                     // 'namespace' 'insert'
    case 81624:                     // 'processing-instruction' 'insert'
    case 82514:                     // 'attribute' 'integrity'
    case 82553:                     // 'element' 'integrity'
    case 82616:                     // 'namespace' 'integrity'
    case 82648:                     // 'processing-instruction' 'integrity'
    case 84562:                     // 'attribute' 'item'
    case 84601:                     // 'element' 'item'
    case 84664:                     // 'namespace' 'item'
    case 84696:                     // 'processing-instruction' 'item'
    case 85074:                     // 'attribute' 'json'
    case 85113:                     // 'element' 'json'
    case 85176:                     // 'namespace' 'json'
    case 85208:                     // 'processing-instruction' 'json'
    case 85586:                     // 'attribute' 'json-item'
    case 85625:                     // 'element' 'json-item'
    case 87122:                     // 'attribute' 'last'
    case 87161:                     // 'element' 'last'
    case 87224:                     // 'namespace' 'last'
    case 87256:                     // 'processing-instruction' 'last'
    case 87634:                     // 'attribute' 'lax'
    case 87673:                     // 'element' 'lax'
    case 87736:                     // 'namespace' 'lax'
    case 87768:                     // 'processing-instruction' 'lax'
    case 90194:                     // 'attribute' 'loop'
    case 90233:                     // 'element' 'loop'
    case 90296:                     // 'namespace' 'loop'
    case 90328:                     // 'processing-instruction' 'loop'
    case 93266:                     // 'attribute' 'module'
    case 93305:                     // 'element' 'module'
    case 93368:                     // 'namespace' 'module'
    case 93400:                     // 'processing-instruction' 'module'
    case 94290:                     // 'attribute' 'namespace'
    case 94329:                     // 'element' 'namespace'
    case 94392:                     // 'namespace' 'namespace'
    case 94424:                     // 'processing-instruction' 'namespace'
    case 94802:                     // 'attribute' 'namespace-node'
    case 94841:                     // 'element' 'namespace-node'
    case 94904:                     // 'namespace' 'namespace-node'
    case 94936:                     // 'processing-instruction' 'namespace-node'
    case 97874:                     // 'attribute' 'node'
    case 97913:                     // 'element' 'node'
    case 97976:                     // 'namespace' 'node'
    case 98008:                     // 'processing-instruction' 'node'
    case 98386:                     // 'attribute' 'nodes'
    case 98425:                     // 'element' 'nodes'
    case 98488:                     // 'namespace' 'nodes'
    case 98520:                     // 'processing-instruction' 'nodes'
    case 99410:                     // 'attribute' 'object'
    case 99449:                     // 'element' 'object'
    case 99512:                     // 'namespace' 'object'
    case 99544:                     // 'processing-instruction' 'object'
    case 101970:                    // 'attribute' 'option'
    case 102009:                    // 'element' 'option'
    case 102072:                    // 'namespace' 'option'
    case 102104:                    // 'processing-instruction' 'option'
    case 103506:                    // 'attribute' 'ordered'
    case 103545:                    // 'element' 'ordered'
    case 103608:                    // 'namespace' 'ordered'
    case 103640:                    // 'processing-instruction' 'ordered'
    case 104018:                    // 'attribute' 'ordering'
    case 104057:                    // 'element' 'ordering'
    case 104120:                    // 'namespace' 'ordering'
    case 104152:                    // 'processing-instruction' 'ordering'
    case 105554:                    // 'attribute' 'parent'
    case 105593:                    // 'element' 'parent'
    case 105656:                    // 'namespace' 'parent'
    case 105688:                    // 'processing-instruction' 'parent'
    case 108626:                    // 'attribute' 'preceding'
    case 108665:                    // 'element' 'preceding'
    case 108728:                    // 'namespace' 'preceding'
    case 108760:                    // 'processing-instruction' 'preceding'
    case 109138:                    // 'attribute' 'preceding-sibling'
    case 109177:                    // 'element' 'preceding-sibling'
    case 109240:                    // 'namespace' 'preceding-sibling'
    case 109272:                    // 'processing-instruction' 'preceding-sibling'
    case 110674:                    // 'attribute' 'processing-instruction'
    case 110713:                    // 'element' 'processing-instruction'
    case 110776:                    // 'namespace' 'processing-instruction'
    case 110808:                    // 'processing-instruction' 'processing-instruction'
    case 111698:                    // 'attribute' 'rename'
    case 111737:                    // 'element' 'rename'
    case 111800:                    // 'namespace' 'rename'
    case 111832:                    // 'processing-instruction' 'rename'
    case 112210:                    // 'attribute' 'replace'
    case 112249:                    // 'element' 'replace'
    case 112312:                    // 'namespace' 'replace'
    case 112344:                    // 'processing-instruction' 'replace'
    case 113234:                    // 'attribute' 'returning'
    case 113273:                    // 'element' 'returning'
    case 113336:                    // 'namespace' 'returning'
    case 113368:                    // 'processing-instruction' 'returning'
    case 113746:                    // 'attribute' 'revalidation'
    case 113785:                    // 'element' 'revalidation'
    case 113848:                    // 'namespace' 'revalidation'
    case 113880:                    // 'processing-instruction' 'revalidation'
    case 115282:                    // 'attribute' 'schema'
    case 115321:                    // 'element' 'schema'
    case 115384:                    // 'namespace' 'schema'
    case 115416:                    // 'processing-instruction' 'schema'
    case 115794:                    // 'attribute' 'schema-attribute'
    case 115833:                    // 'element' 'schema-attribute'
    case 115896:                    // 'namespace' 'schema-attribute'
    case 115928:                    // 'processing-instruction' 'schema-attribute'
    case 116306:                    // 'attribute' 'schema-element'
    case 116345:                    // 'element' 'schema-element'
    case 116408:                    // 'namespace' 'schema-element'
    case 116440:                    // 'processing-instruction' 'schema-element'
    case 116818:                    // 'attribute' 'score'
    case 116857:                    // 'element' 'score'
    case 116920:                    // 'namespace' 'score'
    case 116952:                    // 'processing-instruction' 'score'
    case 117330:                    // 'attribute' 'self'
    case 117369:                    // 'element' 'self'
    case 117432:                    // 'namespace' 'self'
    case 117464:                    // 'processing-instruction' 'self'
    case 119890:                    // 'attribute' 'sliding'
    case 119929:                    // 'element' 'sliding'
    case 119992:                    // 'namespace' 'sliding'
    case 120024:                    // 'processing-instruction' 'sliding'
    case 120402:                    // 'attribute' 'some'
    case 120441:                    // 'element' 'some'
    case 120504:                    // 'namespace' 'some'
    case 120536:                    // 'processing-instruction' 'some'
    case 122962:                    // 'attribute' 'strict'
    case 123001:                    // 'element' 'strict'
    case 123064:                    // 'namespace' 'strict'
    case 123096:                    // 'processing-instruction' 'strict'
    case 123986:                    // 'attribute' 'structured-item'
    case 124025:                    // 'element' 'structured-item'
    case 124498:                    // 'attribute' 'switch'
    case 124537:                    // 'element' 'switch'
    case 124600:                    // 'namespace' 'switch'
    case 124632:                    // 'processing-instruction' 'switch'
    case 125010:                    // 'attribute' 'text'
    case 125049:                    // 'element' 'text'
    case 125112:                    // 'namespace' 'text'
    case 125144:                    // 'processing-instruction' 'text'
    case 128082:                    // 'attribute' 'try'
    case 128121:                    // 'element' 'try'
    case 128184:                    // 'namespace' 'try'
    case 128216:                    // 'processing-instruction' 'try'
    case 128594:                    // 'attribute' 'tumbling'
    case 128633:                    // 'element' 'tumbling'
    case 128696:                    // 'namespace' 'tumbling'
    case 128728:                    // 'processing-instruction' 'tumbling'
    case 129106:                    // 'attribute' 'type'
    case 129145:                    // 'element' 'type'
    case 129208:                    // 'namespace' 'type'
    case 129240:                    // 'processing-instruction' 'type'
    case 129618:                    // 'attribute' 'typeswitch'
    case 129657:                    // 'element' 'typeswitch'
    case 129720:                    // 'namespace' 'typeswitch'
    case 129752:                    // 'processing-instruction' 'typeswitch'
    case 131154:                    // 'attribute' 'unordered'
    case 131193:                    // 'element' 'unordered'
    case 131256:                    // 'namespace' 'unordered'
    case 131288:                    // 'processing-instruction' 'unordered'
    case 131666:                    // 'attribute' 'updating'
    case 131705:                    // 'element' 'updating'
    case 131768:                    // 'namespace' 'updating'
    case 131800:                    // 'processing-instruction' 'updating'
    case 133202:                    // 'attribute' 'validate'
    case 133241:                    // 'element' 'validate'
    case 133304:                    // 'namespace' 'validate'
    case 133336:                    // 'processing-instruction' 'validate'
    case 133714:                    // 'attribute' 'value'
    case 133753:                    // 'element' 'value'
    case 133816:                    // 'namespace' 'value'
    case 133848:                    // 'processing-instruction' 'value'
    case 134226:                    // 'attribute' 'variable'
    case 134265:                    // 'element' 'variable'
    case 134328:                    // 'namespace' 'variable'
    case 134360:                    // 'processing-instruction' 'variable'
    case 134738:                    // 'attribute' 'version'
    case 134777:                    // 'element' 'version'
    case 134840:                    // 'namespace' 'version'
    case 134872:                    // 'processing-instruction' 'version'
    case 136786:                    // 'attribute' 'while'
    case 136825:                    // 'element' 'while'
    case 136888:                    // 'namespace' 'while'
    case 136920:                    // 'processing-instruction' 'while'
    case 140370:                    // 'attribute' 'xquery'
    case 140409:                    // 'element' 'xquery'
    case 140472:                    // 'namespace' 'xquery'
    case 140504:                    // 'processing-instruction' 'xquery'
    case 141394:                    // 'attribute' '{'
    case 141408:                    // 'comment' '{'
    case 141431:                    // 'document' '{'
    case 141433:                    // 'element' '{'
    case 141496:                    // 'namespace' '{'
    case 141514:                    // 'ordered' '{'
    case 141528:                    // 'processing-instruction' '{'
    case 141556:                    // 'text' '{'
    case 141568:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26185:                     // 'ancestor' '::'
    case 26186:                     // 'ancestor-or-self' '::'
    case 26318:                     // 'parent' '::'
    case 26324:                     // 'preceding' '::'
    case 26325:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(238);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26185:                     // 'ancestor' '::'
    case 26186:                     // 'ancestor-or-self' '::'
    case 26318:                     // 'parent' '::'
    case 26324:                     // 'preceding' '::'
    case 26325:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(238);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(245);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 229:                       // 'self'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26194:                     // 'attribute' '::'
    case 26205:                     // 'child' '::'
    case 26223:                     // 'descendant' '::'
    case 26224:                     // 'descendant-or-self' '::'
    case 26247:                     // 'following' '::'
    case 26248:                     // 'following-sibling' '::'
    case 26341:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(245);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 229:                       // 'self'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26194:                     // 'attribute' '::'
    case 26205:                     // 'child' '::'
    case 26223:                     // 'descendant' '::'
    case 26224:                     // 'descendant-or-self' '::'
    case 26247:                     // 'following' '::'
    case 26248:                     // 'following-sibling' '::'
    case 26341:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 93:                        // 'child'
      shift(93);                    // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 111:                       // 'descendant'
      shift(111);                   // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 82:                        // 'attribute'
      shift(82);                    // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 229:                       // 'self'
      shift(229);                   // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 112:                       // 'descendant-or-self'
      shift(112);                   // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 136:                       // 'following-sibling'
      shift(136);                   // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    default:
      shift(135);                   // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 93:                        // 'child'
      shiftT(93);                   // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 111:                       // 'descendant'
      shiftT(111);                  // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 82:                        // 'attribute'
      shiftT(82);                   // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 229:                       // 'self'
      shiftT(229);                  // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 112:                       // 'descendant-or-self'
      shiftT(112);                  // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 136:                       // 'following-sibling'
      shiftT(136);                  // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    default:
      shiftT(135);                  // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 66)                   // '@'
    {
      shift(66);                    // '@'
    }
    lookahead1W(257);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 66)                   // '@'
    {
      shiftT(66);                   // '@'
    }
    lookahead1W(257);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 45:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 45:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 206:                       // 'parent'
      shift(206);                   // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 73:                        // 'ancestor'
      shift(73);                    // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 213:                       // 'preceding-sibling'
      shift(213);                   // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 212:                       // 'preceding'
      shift(212);                   // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    default:
      shift(74);                    // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 206:                       // 'parent'
      shiftT(206);                  // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 73:                        // 'ancestor'
      shiftT(73);                   // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 213:                       // 'preceding-sibling'
      shiftT(213);                  // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 212:                       // 'preceding'
      shiftT(212);                  // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    default:
      shiftT(74);                   // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    shift(45);                      // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    shiftT(45);                     // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 216:                       // 'processing-instruction'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 244:                       // 'text'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17593:                     // 'namespace-node' '('
    case 17599:                     // 'node' '('
    case 17624:                     // 'processing-instruction' '('
    case 17634:                     // 'schema-attribute' '('
    case 17635:                     // 'schema-element' '('
    case 17652:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 216:                       // 'processing-instruction'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 244:                       // 'text'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17593:                     // 'namespace-node' '('
    case 17599:                     // 'node' '('
    case 17624:                     // 'processing-instruction' '('
    case 17634:                     // 'schema-attribute' '('
    case 17635:                     // 'schema-element' '('
    case 17652:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 5:                         // Wildcard
      shift(5);                     // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 5:                         // Wildcard
      shiftT(5);                    // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(241);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      if (l1 != 34                  // '('
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        whitespace();
        parse_Predicate();
        break;
      default:
        whitespace();
        parse_ArgumentList();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(241);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
      if (l1 != 34                  // '('
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        try_Predicate();
        break;
      default:
        try_ArgumentList();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    shift(34);                      // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        whitespace();
        parse_Argument();
      }
    }
    shift(37);                      // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    shiftT(34);                     // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shiftT(41);                 // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        try_Argument();
      }
    }
    shiftT(37);                     // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(238);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
      if (l1 != 68)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(238);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
      if (l1 != 68)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    shift(68);                      // '['
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(69);                      // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    shiftT(68);                     // '['
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(69);                     // ']'
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      shift(8);                     // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      shift(9);                     // DecimalLiteral
      break;
    default:
      shift(10);                    // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      shiftT(8);                    // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      shiftT(9);                    // DecimalLiteral
      break;
    default:
      shiftT(10);                   // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    shiftT(31);                     // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    shift(34);                      // '('
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    shift(37);                      // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    shiftT(34);                     // '('
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    shiftT(37);                     // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    shift(44);                      // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    shiftT(44);                     // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    shift(202);                     // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    shiftT(202);                    // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(282);                    // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    shift(256);                     // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    shiftT(256);                    // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(282);                    // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 64:                        // '?'
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 64:                        // '?'
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    shift(64);                      // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    shiftT(64);                     // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
      parse_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
      try_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    shift(54);                      // '<'
    lookahead1(4);                  // QName
    shift(20);                      // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      shift(48);                    // '/>'
      break;
    default:
      shift(61);                    // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      shift(56);                    // '</'
      lookahead1(4);                // QName
      shift(20);                    // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        shift(21);                  // S
      }
      lookahead1(8);                // '>'
      shift(61);                    // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    shiftT(54);                     // '<'
    lookahead1(4);                  // QName
    shiftT(20);                     // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      shiftT(48);                   // '/>'
      break;
    default:
      shiftT(61);                   // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      shiftT(56);                   // '</'
      lookahead1(4);                // QName
      shiftT(20);                   // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        shiftT(21);                 // S
      }
      lookahead1(8);                // '>'
      shiftT(61);                   // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      shift(21);                    // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        shift(20);                  // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          shift(21);                // S
        }
        lookahead1(7);              // '='
        shift(60);                  // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          shift(21);                // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      shiftT(21);                   // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        shiftT(20);                 // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          shiftT(21);               // S
        }
        lookahead1(7);              // '='
        shiftT(60);                 // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          shiftT(21);               // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      shift(28);                    // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          shift(13);                // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      shift(28);                    // '"'
      break;
    default:
      shift(33);                    // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          shift(14);                // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      shift(33);                    // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      shiftT(28);                   // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          shiftT(13);               // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      shiftT(28);                   // '"'
      break;
    default:
      shiftT(33);                   // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          shiftT(14);               // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      shiftT(33);                   // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      shift(16);                    // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      shiftT(16);                   // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      shift(17);                    // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      shiftT(17);                   // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      shift(4);                     // CDataSection
      break;
    case 15:                        // ElementContentChar
      shift(15);                    // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      shiftT(4);                    // CDataSection
      break;
    case 15:                        // ElementContentChar
      shiftT(15);                   // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    shift(55);                      // '<!--'
    lookahead1(1);                  // DirCommentContents
    shift(2);                       // DirCommentContents
    lookahead1(6);                  // '-->'
    shift(43);                      // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    shiftT(55);                     // '<!--'
    lookahead1(1);                  // DirCommentContents
    shiftT(2);                      // DirCommentContents
    lookahead1(6);                  // '-->'
    shiftT(43);                     // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    shift(59);                      // '<?'
    lookahead1(3);                  // PITarget
    shift(18);                      // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
      lookahead1(2);                // DirPIContents
      shift(3);                     // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shift(65);                      // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    shiftT(59);                     // '<?'
    lookahead1(3);                  // PITarget
    shiftT(18);                     // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
      lookahead1(2);                // DirPIContents
      shiftT(3);                    // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shiftT(65);                     // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 119:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 121:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 82:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 184:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 244:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 119:                       // 'document'
      try_CompDocConstructor();
      break;
    case 121:                       // 'element'
      try_CompElemConstructor();
      break;
    case 82:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 184:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 244:                       // 'text'
      try_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    shift(121);                     // 'element'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_Expr();
      shift(282);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 282)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    shift(282);                     // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    shiftT(121);                    // 'element'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 276:                       // '{'
      shiftT(276);                  // '{'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_Expr();
      shiftT(282);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 282)                  // '}'
    {
      try_ContentExpr();
    }
    shiftT(282);                    // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    shift(184);                     // 'namespace'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_PrefixExpr();
      shift(282);                   // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_URIExpr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    shiftT(184);                    // 'namespace'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 276:                       // '{'
      shiftT(276);                  // '{'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_PrefixExpr();
      shiftT(282);                  // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_URIExpr();
    shiftT(282);                    // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shift(29);                      // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shift(8);                       // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shiftT(29);                     // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shiftT(8);                      // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(145);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(37);                      // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 79)                   // 'as'
    {
      shift(79);                    // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(145);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    shiftT(37);                     // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 79)                   // 'as'
    {
      shiftT(79);                   // 'as'
      lookahead1W(260);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 64)                   // '?'
    {
      shift(64);                    // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
    if (l1 == 64)                   // '?'
    {
      shiftT(64);                   // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    shift(79);                      // 'as'
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    shiftT(79);                     // 'as'
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(243);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      shift(124);                   // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(34);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(37);                    // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(239);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 64:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(243);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      shiftT(124);                  // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(34);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(37);                   // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(239);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 64:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 64:                        // '?'
      shift(64);                    // '?'
      break;
    case 39:                        // '*'
      shift(39);                    // '*'
      break;
    default:
      shift(40);                    // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 64:                        // '?'
      shiftT(64);                   // '?'
      break;
    case 39:                        // '*'
      shiftT(39);                   // '*'
      break;
    default:
      shiftT(40);                   // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 78:                        // 'array'
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 145:                       // 'function'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 194:                       // 'object'
    case 216:                       // 'processing-instruction'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 242:                       // 'structured-item'
    case 244:                       // 'text'
      lookahead2W(243);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17593:                     // 'namespace-node' '('
    case 17599:                     // 'node' '('
    case 17624:                     // 'processing-instruction' '('
    case 17634:                     // 'schema-attribute' '('
    case 17635:                     // 'schema-element' '('
    case 17652:                     // 'text' '('
      parse_KindTest();
      break;
    case 17573:                     // 'item' '('
      shift(165);                   // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(34);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(37);                    // ')'
      break;
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    case 17486:                     // 'array' '('
    case 17575:                     // 'json-item' '('
    case 17602:                     // 'object' '('
      parse_JSONTest();
      break;
    case 17650:                     // 'structured-item' '('
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 78:                        // 'array'
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 145:                       // 'function'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 194:                       // 'object'
    case 216:                       // 'processing-instruction'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 242:                       // 'structured-item'
    case 244:                       // 'text'
      lookahead2W(243);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17593:                     // 'namespace-node' '('
    case 17599:                     // 'node' '('
    case 17624:                     // 'processing-instruction' '('
    case 17634:                     // 'schema-attribute' '('
    case 17635:                     // 'schema-element' '('
    case 17652:                     // 'text' '('
      try_KindTest();
      break;
    case 17573:                     // 'item' '('
      shiftT(165);                  // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(34);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(37);                   // ')'
      break;
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      try_FunctionTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    case 17486:                     // 'array' '('
    case 17575:                     // 'json-item' '('
    case 17602:                     // 'object' '('
      try_JSONTest();
      break;
    case 17650:                     // 'structured-item' '('
      try_StructuredItemTest();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 167:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 194:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 167:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 194:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    shift(242);                     // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    shiftT(242);                    // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    shift(167);                     // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    shiftT(167);                    // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    shift(194);                     // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    shiftT(194);                    // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    shift(78);                      // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    shiftT(78);                     // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 120:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 121:                       // 'element'
      parse_ElementTest();
      break;
    case 82:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 227:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 226:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 216:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 96:                        // 'comment'
      parse_CommentTest();
      break;
    case 244:                       // 'text'
      parse_TextTest();
      break;
    case 185:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 120:                       // 'document-node'
      try_DocumentTest();
      break;
    case 121:                       // 'element'
      try_ElementTest();
      break;
    case 82:                        // 'attribute'
      try_AttributeTest();
      break;
    case 227:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 226:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 216:                       // 'processing-instruction'
      try_PITest();
      break;
    case 96:                        // 'comment'
      try_CommentTest();
      break;
    case 244:                       // 'text'
      try_TextTest();
      break;
    case 185:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    shift(191);                     // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    shiftT(191);                    // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    shift(120);                     // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    shiftT(120);                    // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    shift(244);                     // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    shiftT(244);                    // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    shift(96);                      // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    shiftT(96);                     // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    shift(185);                     // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    shiftT(185);                    // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    shift(216);                     // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(253);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        shift(11);                  // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    shiftT(216);                    // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(253);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        shiftT(11);                 // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    shift(82);                      // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(261);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        shift(41);                  // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    shiftT(82);                     // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(261);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        shiftT(41);                 // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      shift(38);                    // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      shiftT(38);                   // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    shift(226);                     // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    shiftT(226);                    // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    shift(121);                     // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(261);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        shift(41);                  // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        whitespace();
        parse_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          shift(64);                // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    shiftT(121);                    // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(261);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        shiftT(41);                 // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        try_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          shiftT(64);               // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      shift(38);                    // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      shiftT(38);                   // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    shift(227);                     // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    shiftT(227);                    // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(5, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(5, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    shift(145);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shift(38);                      // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    shiftT(145);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shiftT(38);                     // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    shift(145);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(260);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
        whitespace();
        parse_SequenceType();
      }
    }
    shift(37);                      // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    shift(79);                      // 'as'
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    shiftT(145);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(263);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shiftT(41);                 // ','
        lookahead1W(260);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
        try_SequenceType();
      }
    }
    shiftT(37);                     // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    shiftT(79);                     // 'as'
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    shift(34);                      // '('
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    shiftT(34);                     // '('
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(72);                // S^WS | '(:' | 'revalidation'
    shift(222);                     // 'revalidation'
    lookahead1W(152);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 240:                       // 'strict'
      shift(240);                   // 'strict'
      break;
    case 171:                       // 'lax'
      shift(171);                   // 'lax'
      break;
    default:
      shift(233);                   // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 70:                        // 'after'
      shift(70);                    // 'after'
      break;
    case 84:                        // 'before'
      shift(84);                    // 'before'
      break;
    default:
      if (l1 == 79)                 // 'as'
      {
        shift(79);                  // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          shift(134);               // 'first'
          break;
        default:
          shift(170);               // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      shift(163);                   // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 70:                        // 'after'
      shiftT(70);                   // 'after'
      break;
    case 84:                        // 'before'
      shiftT(84);                   // 'before'
      break;
    default:
      if (l1 == 79)                 // 'as'
      {
        shiftT(79);                 // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          shiftT(134);              // 'first'
          break;
        default:
          shiftT(170);              // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      shiftT(163);                  // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    shift(159);                     // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 191:                       // 'node'
      shift(191);                   // 'node'
      break;
    default:
      shift(192);                   // 'nodes'
    }
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    shiftT(159);                    // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 191:                       // 'node'
      shiftT(191);                  // 'node'
      break;
    default:
      shiftT(192);                  // 'nodes'
    }
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    shift(110);                     // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 191:                       // 'node'
      shift(191);                   // 'node'
      break;
    default:
      shift(192);                   // 'nodes'
    }
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    shiftT(110);                    // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 191:                       // 'node'
      shiftT(191);                  // 'node'
      break;
    default:
      shiftT(192);                  // 'nodes'
    }
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    shift(219);                     // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 261)                  // 'value'
    {
      shift(261);                   // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      shift(196);                   // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    shift(191);                     // 'node'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_TargetExpr();
    shift(270);                     // 'with'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    shiftT(219);                    // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 261)                  // 'value'
    {
      shiftT(261);                  // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      shiftT(196);                  // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    shiftT(191);                    // 'node'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_TargetExpr();
    shiftT(270);                    // 'with'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    shift(218);                     // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    shift(191);                     // 'node'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_TargetExpr();
    shift(79);                      // 'as'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    shiftT(218);                    // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    shiftT(191);                    // 'node'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_TargetExpr();
    shiftT(79);                     // 'as'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    shift(103);                     // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_TransformSpec();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_TransformSpec();
    }
    shift(181);                     // 'modify'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    shift(220);                     // 'return'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    shiftT(103);                    // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_TransformSpec();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_TransformSpec();
    }
    shiftT(181);                    // 'modify'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
    shiftT(220);                    // 'return'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_TransformSpec()
  {
    eventHandler.startNonterminal("TransformSpec", e0);
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    shift(52);                      // ':='
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformSpec", e0);
  }

  function try_TransformSpec()
  {
    shiftT(31);                     // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    shiftT(52);                     // ':='
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(151);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 115                 // 'different'
       && lk != 117                 // 'distance'
       && lk != 127                 // 'entire'
       && lk != 202                 // 'ordered'
       && lk != 223                 // 'same'
       && lk != 269                 // 'window'
       && lk != 64593               // 'at' 'end'
       && lk != 121425)             // 'at' 'start'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(151);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 115                 // 'different'
       && lk != 117                 // 'distance'
       && lk != 127                 // 'entire'
       && lk != 202                 // 'ordered'
       && lk != 223                 // 'same'
       && lk != 269                 // 'window'
       && lk != 64593               // 'at' 'end'
       && lk != 121425)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    shift(264);                     // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    shiftT(264);                    // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(282);                    // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 144)                // 'ftor'
      {
        break;
      }
      shift(144);                   // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 144)                // 'ftor'
      {
        break;
      }
      shiftT(144);                  // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 142)                // 'ftand'
      {
        break;
      }
      shift(142);                   // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 142)                // 'ftand'
      {
        break;
      }
      shiftT(142);                  // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 != 193)                // 'not'
      {
        break;
      }
      shift(193);                   // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      shift(154);                   // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 != 193)                // 'not'
      {
        break;
      }
      shiftT(193);                  // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      shiftT(154);                  // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 143)                  // 'ftnot'
    {
      shift(143);                   // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 143)                  // 'ftnot'
    {
      shiftT(143);                  // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    if (l1 == 259)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 264)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(215);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    if (l1 == 259)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 264)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      shift(34);                    // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      shift(37);                    // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(216);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 == 195)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      shiftT(34);                   // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      shiftT(37);                   // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(216);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 == 195)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(222);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    if (l1 == 71                    // 'all'
     || l1 == 76                    // 'any'
     || l1 == 210)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(222);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    if (l1 == 71                    // 'all'
     || l1 == 76                    // 'any'
     || l1 == 210)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    default:
      shift(276);                   // '{'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_Expr();
      shift(282);                   // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    default:
      shiftT(276);                  // '{'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_Expr();
      shiftT(282);                  // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    shift(276);                     // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 282)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    shift(282);                     // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    shiftT(276);                    // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 282)                  // '}'
    {
      try_FTSelection();
    }
    shiftT(282);                    // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 76:                        // 'any'
      shift(76);                    // 'any'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 == 272)                // 'word'
      {
        shift(272);                 // 'word'
      }
      break;
    case 71:                        // 'all'
      shift(71);                    // 'all'
      lookahead1W(220);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 == 273)                // 'words'
      {
        shift(273);                 // 'words'
      }
      break;
    default:
      shift(210);                   // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 76:                        // 'any'
      shiftT(76);                   // 'any'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 == 272)                // 'word'
      {
        shiftT(272);                // 'word'
      }
      break;
    case 71:                        // 'all'
      shiftT(71);                   // 'all'
      lookahead1W(220);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 == 273)                // 'words'
      {
        shiftT(273);                // 'words'
      }
      break;
    default:
      shiftT(210);                  // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    shift(195);                     // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    shift(247);                     // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    shiftT(195);                    // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    shiftT(247);                    // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 130:                       // 'exactly'
      shift(130);                   // 'exactly'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_AdditiveExpr();
      break;
    case 81:                        // 'at'
      shift(81);                    // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        shift(173);                 // 'least'
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        shift(183);                 // 'most'
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      shift(140);                   // 'from'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_AdditiveExpr();
      shift(248);                   // 'to'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 130:                       // 'exactly'
      shiftT(130);                  // 'exactly'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_AdditiveExpr();
      break;
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        shiftT(173);                // 'least'
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        try_AdditiveExpr();
        break;
      default:
        shiftT(183);                // 'most'
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        try_AdditiveExpr();
      }
      break;
    default:
      shiftT(140);                  // 'from'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_AdditiveExpr();
      shiftT(248);                  // 'to'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 202:                       // 'ordered'
      parse_FTOrder();
      break;
    case 269:                       // 'window'
      parse_FTWindow();
      break;
    case 117:                       // 'distance'
      parse_FTDistance();
      break;
    case 115:                       // 'different'
    case 223:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 202:                       // 'ordered'
      try_FTOrder();
      break;
    case 269:                       // 'window'
      try_FTWindow();
      break;
    case 117:                       // 'distance'
      try_FTDistance();
      break;
    case 115:                       // 'different'
    case 223:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    shift(202);                     // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    shiftT(202);                    // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    shift(269);                     // 'window'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    shiftT(269);                    // 'window'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    shift(117);                     // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    shiftT(117);                    // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 273:                       // 'words'
      shift(273);                   // 'words'
      break;
    case 232:                       // 'sentences'
      shift(232);                   // 'sentences'
      break;
    default:
      shift(205);                   // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 273:                       // 'words'
      shiftT(273);                  // 'words'
      break;
    case 232:                       // 'sentences'
      shiftT(232);                  // 'sentences'
      break;
    default:
      shiftT(205);                  // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 223:                       // 'same'
      shift(223);                   // 'same'
      break;
    default:
      shift(115);                   // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 223:                       // 'same'
      shiftT(223);                  // 'same'
      break;
    default:
      shiftT(115);                  // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 231:                       // 'sentence'
      shift(231);                   // 'sentence'
      break;
    default:
      shift(204);                   // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 231:                       // 'sentence'
      shiftT(231);                  // 'sentence'
      break;
    default:
      shiftT(204);                  // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 81:                        // 'at'
      shift(81);                    // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 237:                     // 'start'
        shift(237);                 // 'start'
        break;
      default:
        shift(126);                 // 'end'
      }
      break;
    default:
      shift(127);                   // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      shift(100);                   // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 237:                     // 'start'
        shiftT(237);                // 'start'
        break;
      default:
        shiftT(126);                // 'end'
      }
      break;
    default:
      shiftT(127);                  // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      shiftT(100);                  // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      shift(259);                   // 'using'
      lookahead1W(182);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
      whitespace();
      parse_FTMatchOption();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 != 259)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      shiftT(259);                  // 'using'
      lookahead1W(182);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
      try_FTMatchOption();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
      if (l1 != 259)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 188:                       // 'no'
      lookahead2W(161);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 169:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 268:                       // 'wildcards'
    case 137404:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 246:                       // 'thesaurus'
    case 126140:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 238:                       // 'stemming'
    case 122044:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 239:                       // 'stop'
    case 122556:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 199:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 188:                       // 'no'
      lookahead2W(161);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 169:                       // 'language'
      try_FTLanguageOption();
      break;
    case 268:                       // 'wildcards'
    case 137404:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 246:                       // 'thesaurus'
    case 126140:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 238:                       // 'stemming'
    case 122044:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 239:                       // 'stop'
    case 122556:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 199:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 88:                        // 'case'
      shift(88);                    // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 158:                     // 'insensitive'
        shift(158);                 // 'insensitive'
        break;
      default:
        shift(230);                 // 'sensitive'
      }
      break;
    case 177:                       // 'lowercase'
      shift(177);                   // 'lowercase'
      break;
    default:
      shift(258);                   // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 88:                        // 'case'
      shiftT(88);                   // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 158:                     // 'insensitive'
        shiftT(158);                // 'insensitive'
        break;
      default:
        shiftT(230);                // 'sensitive'
      }
      break;
    case 177:                       // 'lowercase'
      shiftT(177);                  // 'lowercase'
      break;
    default:
      shiftT(258);                  // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    shift(114);                     // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 158:                       // 'insensitive'
      shift(158);                   // 'insensitive'
      break;
    default:
      shift(230);                   // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    shiftT(114);                    // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 158:                       // 'insensitive'
      shiftT(158);                  // 'insensitive'
      break;
    default:
      shiftT(230);                  // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 238:                       // 'stemming'
      shift(238);                   // 'stemming'
      break;
    default:
      shift(188);                   // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      shift(238);                   // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 238:                       // 'stemming'
      shiftT(238);                  // 'stemming'
      break;
    default:
      shiftT(188);                  // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      shiftT(238);                  // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 246:                       // 'thesaurus'
      shift(246);                   // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 81:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 109:                     // 'default'
        shift(109);                 // 'default'
        break;
      default:
        shift(34);                  // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 81:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          shift(109);               // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          shift(41);                // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        shift(37);                  // ')'
      }
      break;
    default:
      shift(188);                   // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      shift(246);                   // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 246:                       // 'thesaurus'
      shiftT(246);                  // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 81:                      // 'at'
        try_FTThesaurusID();
        break;
      case 109:                     // 'default'
        shiftT(109);                // 'default'
        break;
      default:
        shiftT(34);                 // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 81:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          shiftT(109);              // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          shiftT(41);               // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        shiftT(37);                 // ')'
      }
      break;
    default:
      shiftT(188);                  // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      shiftT(246);                  // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    shift(81);                      // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    if (l1 == 217)                  // 'relationship'
    {
      shift(217);                   // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
    }
    lookahead1W(217);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(165);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 140                   // 'from'
     || lk == 88657                 // 'at' 'least'
     || lk == 93777)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      shift(175);                   // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    shiftT(81);                     // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    if (l1 == 217)                  // 'relationship'
    {
      shiftT(217);                  // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(11);                   // StringLiteral
    }
    lookahead1W(217);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(165);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 140                   // 'from'
     || lk == 88657                 // 'at' 'least'
     || lk == 93777)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      shiftT(175);                  // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 130:                       // 'exactly'
      shift(130);                   // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
      break;
    case 81:                        // 'at'
      shift(81);                    // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        shift(173);                 // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(8);                   // IntegerLiteral
        break;
      default:
        shift(183);                 // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(8);                   // IntegerLiteral
      }
      break;
    default:
      shift(140);                   // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      shift(248);                   // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 130:                       // 'exactly'
      shiftT(130);                  // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
      break;
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        shiftT(173);                // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(8);                  // IntegerLiteral
        break;
      default:
        shiftT(183);                // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(8);                  // IntegerLiteral
      }
      break;
    default:
      shiftT(140);                  // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      shiftT(248);                  // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 239:                       // 'stop'
      shift(239);                   // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      shift(273);                   // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        shift(109);                 // 'default'
        for (;;)
        {
          lookahead1W(218);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
          if (l1 != 131             // 'except'
           && l1 != 254)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(218);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
          if (l1 != 131             // 'except'
           && l1 != 254)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shift(188);                   // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      shift(239);                   // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      shift(273);                   // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 239:                       // 'stop'
      shiftT(239);                  // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      shiftT(273);                  // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        shiftT(109);                // 'default'
        for (;;)
        {
          lookahead1W(218);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
          if (l1 != 131             // 'except'
           && l1 != 254)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(218);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
          if (l1 != 131             // 'except'
           && l1 != 254)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shiftT(188);                  // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      shiftT(239);                  // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      shiftT(273);                  // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 81:                        // 'at'
      shift(81);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      break;
    default:
      shift(34);                    // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(11);                  // StringLiteral
      }
      shift(37);                    // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
      break;
    default:
      shiftT(34);                   // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(11);                   // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shiftT(41);                 // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shiftT(11);                 // StringLiteral
      }
      shiftT(37);                   // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 254:                       // 'union'
      shift(254);                   // 'union'
      break;
    default:
      shift(131);                   // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 254:                       // 'union'
      shiftT(254);                  // 'union'
      break;
    default:
      shiftT(131);                  // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    shift(169);                     // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    shiftT(169);                    // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(11);                     // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 268:                       // 'wildcards'
      shift(268);                   // 'wildcards'
      break;
    default:
      shift(188);                   // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      shift(268);                   // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 268:                       // 'wildcards'
      shiftT(268);                  // 'wildcards'
      break;
    default:
      shiftT(188);                  // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      shiftT(268);                  // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    shift(199);                     // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    shiftT(199);                    // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(11);                     // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    shift(271);                     // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    shift(100);                     // 'content'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    shiftT(271);                    // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    shiftT(100);                    // 'content'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    shift(95);                      // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(107);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    shift(79);                      // 'as'
    lookahead1W(178);               // S^WS | '(:' | 'attribute' | 'comment' | 'document-node' | 'element' |
    whitespace();
    parse_KindTest();
    lookahead1W(156);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 53)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(146);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 94)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    shift(79);                      // 'as'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_AtomicType();
    lookahead1W(169);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 39                    // '*'
     || l1 == 40                    // '+'
     || l1 == 64)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    shift(94);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    shift(155);                     // 'index'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_IndexName();
    lookahead1W(65);                // S^WS | '(:' | 'on'
    shift(197);                     // 'on'
    lookahead1W(63);                // S^WS | '(:' | 'nodes'
    shift(192);                     // 'nodes'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_IndexDomainExpr();
    shift(87);                      // 'by'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ',' | ';'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    shift(161);                     // 'integrity'
    lookahead1W(40);                // S^WS | '(:' | 'constraint'
    shift(97);                      // 'constraint'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(120);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 197:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    shift(197);                     // 'on'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    shift(95);                      // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(140);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 31:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 191:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    shift(92);                      // 'check'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    shift(191);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    shift(92);                      // 'check'
    lookahead1W(80);                // S^WS | '(:' | 'unique'
    shift(255);                     // 'unique'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    shift(168);                     // 'key'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    shift(138);                     // 'foreach'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    shift(191);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    shift(92);                      // 'check'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    shift(139);                     // 'foreign'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    shift(168);                     // 'key'
    lookahead1W(51);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    shift(140);                     // 'from'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    shift(248);                     // 'to'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    shift(95);                      // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(62);                // S^WS | '(:' | 'node'
    shift(191);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(57);                // S^WS | '(:' | 'key'
    shift(168);                     // 'key'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    shiftT(36);                     // '(:'
    for (;;)
    {
      lookahead1(89);               // CommentContents | '(:' | ':)'
      if (l1 == 50)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 24:                      // CommentContents
        shiftT(24);                 // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    shiftT(50);                     // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 22:                        // S^WS
      shiftT(22);                   // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(250);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
    switch (l1)
    {
    case 82:                        // 'attribute'
      shift(82);                    // 'attribute'
      break;
    case 96:                        // 'comment'
      shift(96);                    // 'comment'
      break;
    case 120:                       // 'document-node'
      shift(120);                   // 'document-node'
      break;
    case 121:                       // 'element'
      shift(121);                   // 'element'
      break;
    case 124:                       // 'empty-sequence'
      shift(124);                   // 'empty-sequence'
      break;
    case 145:                       // 'function'
      shift(145);                   // 'function'
      break;
    case 152:                       // 'if'
      shift(152);                   // 'if'
      break;
    case 165:                       // 'item'
      shift(165);                   // 'item'
      break;
    case 185:                       // 'namespace-node'
      shift(185);                   // 'namespace-node'
      break;
    case 191:                       // 'node'
      shift(191);                   // 'node'
      break;
    case 216:                       // 'processing-instruction'
      shift(216);                   // 'processing-instruction'
      break;
    case 226:                       // 'schema-attribute'
      shift(226);                   // 'schema-attribute'
      break;
    case 227:                       // 'schema-element'
      shift(227);                   // 'schema-element'
      break;
    case 243:                       // 'switch'
      shift(243);                   // 'switch'
      break;
    case 244:                       // 'text'
      shift(244);                   // 'text'
      break;
    case 253:                       // 'typeswitch'
      shift(253);                   // 'typeswitch'
      break;
    case 78:                        // 'array'
      shift(78);                    // 'array'
      break;
    case 167:                       // 'json-item'
      shift(167);                   // 'json-item'
      break;
    case 242:                       // 'structured-item'
      shift(242);                   // 'structured-item'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(250);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
    switch (l1)
    {
    case 82:                        // 'attribute'
      shiftT(82);                   // 'attribute'
      break;
    case 96:                        // 'comment'
      shiftT(96);                   // 'comment'
      break;
    case 120:                       // 'document-node'
      shiftT(120);                  // 'document-node'
      break;
    case 121:                       // 'element'
      shiftT(121);                  // 'element'
      break;
    case 124:                       // 'empty-sequence'
      shiftT(124);                  // 'empty-sequence'
      break;
    case 145:                       // 'function'
      shiftT(145);                  // 'function'
      break;
    case 152:                       // 'if'
      shiftT(152);                  // 'if'
      break;
    case 165:                       // 'item'
      shiftT(165);                  // 'item'
      break;
    case 185:                       // 'namespace-node'
      shiftT(185);                  // 'namespace-node'
      break;
    case 191:                       // 'node'
      shiftT(191);                  // 'node'
      break;
    case 216:                       // 'processing-instruction'
      shiftT(216);                  // 'processing-instruction'
      break;
    case 226:                       // 'schema-attribute'
      shiftT(226);                  // 'schema-attribute'
      break;
    case 227:                       // 'schema-element'
      shiftT(227);                  // 'schema-element'
      break;
    case 243:                       // 'switch'
      shiftT(243);                  // 'switch'
      break;
    case 244:                       // 'text'
      shiftT(244);                  // 'text'
      break;
    case 253:                       // 'typeswitch'
      shiftT(253);                  // 'typeswitch'
      break;
    case 78:                        // 'array'
      shiftT(78);                   // 'array'
      break;
    case 167:                       // 'json-item'
      shiftT(167);                  // 'json-item'
      break;
    case 242:                       // 'structured-item'
      shiftT(242);                  // 'structured-item'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 6:                         // EQName^Token
      shift(6);                     // EQName^Token
      break;
    case 70:                        // 'after'
      shift(70);                    // 'after'
      break;
    case 73:                        // 'ancestor'
      shift(73);                    // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      shift(74);                    // 'ancestor-or-self'
      break;
    case 75:                        // 'and'
      shift(75);                    // 'and'
      break;
    case 79:                        // 'as'
      shift(79);                    // 'as'
      break;
    case 80:                        // 'ascending'
      shift(80);                    // 'ascending'
      break;
    case 84:                        // 'before'
      shift(84);                    // 'before'
      break;
    case 88:                        // 'case'
      shift(88);                    // 'case'
      break;
    case 89:                        // 'cast'
      shift(89);                    // 'cast'
      break;
    case 90:                        // 'castable'
      shift(90);                    // 'castable'
      break;
    case 93:                        // 'child'
      shift(93);                    // 'child'
      break;
    case 94:                        // 'collation'
      shift(94);                    // 'collation'
      break;
    case 103:                       // 'copy'
      shift(103);                   // 'copy'
      break;
    case 105:                       // 'count'
      shift(105);                   // 'count'
      break;
    case 108:                       // 'declare'
      shift(108);                   // 'declare'
      break;
    case 109:                       // 'default'
      shift(109);                   // 'default'
      break;
    case 110:                       // 'delete'
      shift(110);                   // 'delete'
      break;
    case 111:                       // 'descendant'
      shift(111);                   // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      shift(112);                   // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      shift(113);                   // 'descending'
      break;
    case 118:                       // 'div'
      shift(118);                   // 'div'
      break;
    case 119:                       // 'document'
      shift(119);                   // 'document'
      break;
    case 122:                       // 'else'
      shift(122);                   // 'else'
      break;
    case 123:                       // 'empty'
      shift(123);                   // 'empty'
      break;
    case 126:                       // 'end'
      shift(126);                   // 'end'
      break;
    case 128:                       // 'eq'
      shift(128);                   // 'eq'
      break;
    case 129:                       // 'every'
      shift(129);                   // 'every'
      break;
    case 131:                       // 'except'
      shift(131);                   // 'except'
      break;
    case 134:                       // 'first'
      shift(134);                   // 'first'
      break;
    case 135:                       // 'following'
      shift(135);                   // 'following'
      break;
    case 136:                       // 'following-sibling'
      shift(136);                   // 'following-sibling'
      break;
    case 137:                       // 'for'
      shift(137);                   // 'for'
      break;
    case 146:                       // 'ge'
      shift(146);                   // 'ge'
      break;
    case 148:                       // 'group'
      shift(148);                   // 'group'
      break;
    case 150:                       // 'gt'
      shift(150);                   // 'gt'
      break;
    case 151:                       // 'idiv'
      shift(151);                   // 'idiv'
      break;
    case 153:                       // 'import'
      shift(153);                   // 'import'
      break;
    case 159:                       // 'insert'
      shift(159);                   // 'insert'
      break;
    case 160:                       // 'instance'
      shift(160);                   // 'instance'
      break;
    case 162:                       // 'intersect'
      shift(162);                   // 'intersect'
      break;
    case 163:                       // 'into'
      shift(163);                   // 'into'
      break;
    case 164:                       // 'is'
      shift(164);                   // 'is'
      break;
    case 170:                       // 'last'
      shift(170);                   // 'last'
      break;
    case 172:                       // 'le'
      shift(172);                   // 'le'
      break;
    case 174:                       // 'let'
      shift(174);                   // 'let'
      break;
    case 178:                       // 'lt'
      shift(178);                   // 'lt'
      break;
    case 180:                       // 'mod'
      shift(180);                   // 'mod'
      break;
    case 181:                       // 'modify'
      shift(181);                   // 'modify'
      break;
    case 182:                       // 'module'
      shift(182);                   // 'module'
      break;
    case 184:                       // 'namespace'
      shift(184);                   // 'namespace'
      break;
    case 186:                       // 'ne'
      shift(186);                   // 'ne'
      break;
    case 198:                       // 'only'
      shift(198);                   // 'only'
      break;
    case 200:                       // 'or'
      shift(200);                   // 'or'
      break;
    case 201:                       // 'order'
      shift(201);                   // 'order'
      break;
    case 202:                       // 'ordered'
      shift(202);                   // 'ordered'
      break;
    case 206:                       // 'parent'
      shift(206);                   // 'parent'
      break;
    case 212:                       // 'preceding'
      shift(212);                   // 'preceding'
      break;
    case 213:                       // 'preceding-sibling'
      shift(213);                   // 'preceding-sibling'
      break;
    case 218:                       // 'rename'
      shift(218);                   // 'rename'
      break;
    case 219:                       // 'replace'
      shift(219);                   // 'replace'
      break;
    case 220:                       // 'return'
      shift(220);                   // 'return'
      break;
    case 224:                       // 'satisfies'
      shift(224);                   // 'satisfies'
      break;
    case 229:                       // 'self'
      shift(229);                   // 'self'
      break;
    case 235:                       // 'some'
      shift(235);                   // 'some'
      break;
    case 236:                       // 'stable'
      shift(236);                   // 'stable'
      break;
    case 237:                       // 'start'
      shift(237);                   // 'start'
      break;
    case 248:                       // 'to'
      shift(248);                   // 'to'
      break;
    case 249:                       // 'treat'
      shift(249);                   // 'treat'
      break;
    case 250:                       // 'try'
      shift(250);                   // 'try'
      break;
    case 254:                       // 'union'
      shift(254);                   // 'union'
      break;
    case 256:                       // 'unordered'
      shift(256);                   // 'unordered'
      break;
    case 260:                       // 'validate'
      shift(260);                   // 'validate'
      break;
    case 266:                       // 'where'
      shift(266);                   // 'where'
      break;
    case 270:                       // 'with'
      shift(270);                   // 'with'
      break;
    case 274:                       // 'xquery'
      shift(274);                   // 'xquery'
      break;
    case 72:                        // 'allowing'
      shift(72);                    // 'allowing'
      break;
    case 81:                        // 'at'
      shift(81);                    // 'at'
      break;
    case 83:                        // 'base-uri'
      shift(83);                    // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      shift(85);                    // 'boundary-space'
      break;
    case 86:                        // 'break'
      shift(86);                    // 'break'
      break;
    case 91:                        // 'catch'
      shift(91);                    // 'catch'
      break;
    case 98:                        // 'construction'
      shift(98);                    // 'construction'
      break;
    case 101:                       // 'context'
      shift(101);                   // 'context'
      break;
    case 102:                       // 'continue'
      shift(102);                   // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      shift(104);                   // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      shift(106);                   // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      shift(125);                   // 'encoding'
      break;
    case 132:                       // 'exit'
      shift(132);                   // 'exit'
      break;
    case 133:                       // 'external'
      shift(133);                   // 'external'
      break;
    case 141:                       // 'ft-option'
      shift(141);                   // 'ft-option'
      break;
    case 154:                       // 'in'
      shift(154);                   // 'in'
      break;
    case 155:                       // 'index'
      shift(155);                   // 'index'
      break;
    case 161:                       // 'integrity'
      shift(161);                   // 'integrity'
      break;
    case 171:                       // 'lax'
      shift(171);                   // 'lax'
      break;
    case 192:                       // 'nodes'
      shift(192);                   // 'nodes'
      break;
    case 199:                       // 'option'
      shift(199);                   // 'option'
      break;
    case 203:                       // 'ordering'
      shift(203);                   // 'ordering'
      break;
    case 222:                       // 'revalidation'
      shift(222);                   // 'revalidation'
      break;
    case 225:                       // 'schema'
      shift(225);                   // 'schema'
      break;
    case 228:                       // 'score'
      shift(228);                   // 'score'
      break;
    case 234:                       // 'sliding'
      shift(234);                   // 'sliding'
      break;
    case 240:                       // 'strict'
      shift(240);                   // 'strict'
      break;
    case 251:                       // 'tumbling'
      shift(251);                   // 'tumbling'
      break;
    case 252:                       // 'type'
      shift(252);                   // 'type'
      break;
    case 257:                       // 'updating'
      shift(257);                   // 'updating'
      break;
    case 261:                       // 'value'
      shift(261);                   // 'value'
      break;
    case 262:                       // 'variable'
      shift(262);                   // 'variable'
      break;
    case 263:                       // 'version'
      shift(263);                   // 'version'
      break;
    case 267:                       // 'while'
      shift(267);                   // 'while'
      break;
    case 97:                        // 'constraint'
      shift(97);                    // 'constraint'
      break;
    case 176:                       // 'loop'
      shift(176);                   // 'loop'
      break;
    case 221:                       // 'returning'
      shift(221);                   // 'returning'
      break;
    case 77:                        // 'append'
      shift(77);                    // 'append'
      break;
    case 166:                       // 'json'
      shift(166);                   // 'json'
      break;
    default:
      shift(194);                   // 'object'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 6:                         // EQName^Token
      shiftT(6);                    // EQName^Token
      break;
    case 70:                        // 'after'
      shiftT(70);                   // 'after'
      break;
    case 73:                        // 'ancestor'
      shiftT(73);                   // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      shiftT(74);                   // 'ancestor-or-self'
      break;
    case 75:                        // 'and'
      shiftT(75);                   // 'and'
      break;
    case 79:                        // 'as'
      shiftT(79);                   // 'as'
      break;
    case 80:                        // 'ascending'
      shiftT(80);                   // 'ascending'
      break;
    case 84:                        // 'before'
      shiftT(84);                   // 'before'
      break;
    case 88:                        // 'case'
      shiftT(88);                   // 'case'
      break;
    case 89:                        // 'cast'
      shiftT(89);                   // 'cast'
      break;
    case 90:                        // 'castable'
      shiftT(90);                   // 'castable'
      break;
    case 93:                        // 'child'
      shiftT(93);                   // 'child'
      break;
    case 94:                        // 'collation'
      shiftT(94);                   // 'collation'
      break;
    case 103:                       // 'copy'
      shiftT(103);                  // 'copy'
      break;
    case 105:                       // 'count'
      shiftT(105);                  // 'count'
      break;
    case 108:                       // 'declare'
      shiftT(108);                  // 'declare'
      break;
    case 109:                       // 'default'
      shiftT(109);                  // 'default'
      break;
    case 110:                       // 'delete'
      shiftT(110);                  // 'delete'
      break;
    case 111:                       // 'descendant'
      shiftT(111);                  // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      shiftT(112);                  // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      shiftT(113);                  // 'descending'
      break;
    case 118:                       // 'div'
      shiftT(118);                  // 'div'
      break;
    case 119:                       // 'document'
      shiftT(119);                  // 'document'
      break;
    case 122:                       // 'else'
      shiftT(122);                  // 'else'
      break;
    case 123:                       // 'empty'
      shiftT(123);                  // 'empty'
      break;
    case 126:                       // 'end'
      shiftT(126);                  // 'end'
      break;
    case 128:                       // 'eq'
      shiftT(128);                  // 'eq'
      break;
    case 129:                       // 'every'
      shiftT(129);                  // 'every'
      break;
    case 131:                       // 'except'
      shiftT(131);                  // 'except'
      break;
    case 134:                       // 'first'
      shiftT(134);                  // 'first'
      break;
    case 135:                       // 'following'
      shiftT(135);                  // 'following'
      break;
    case 136:                       // 'following-sibling'
      shiftT(136);                  // 'following-sibling'
      break;
    case 137:                       // 'for'
      shiftT(137);                  // 'for'
      break;
    case 146:                       // 'ge'
      shiftT(146);                  // 'ge'
      break;
    case 148:                       // 'group'
      shiftT(148);                  // 'group'
      break;
    case 150:                       // 'gt'
      shiftT(150);                  // 'gt'
      break;
    case 151:                       // 'idiv'
      shiftT(151);                  // 'idiv'
      break;
    case 153:                       // 'import'
      shiftT(153);                  // 'import'
      break;
    case 159:                       // 'insert'
      shiftT(159);                  // 'insert'
      break;
    case 160:                       // 'instance'
      shiftT(160);                  // 'instance'
      break;
    case 162:                       // 'intersect'
      shiftT(162);                  // 'intersect'
      break;
    case 163:                       // 'into'
      shiftT(163);                  // 'into'
      break;
    case 164:                       // 'is'
      shiftT(164);                  // 'is'
      break;
    case 170:                       // 'last'
      shiftT(170);                  // 'last'
      break;
    case 172:                       // 'le'
      shiftT(172);                  // 'le'
      break;
    case 174:                       // 'let'
      shiftT(174);                  // 'let'
      break;
    case 178:                       // 'lt'
      shiftT(178);                  // 'lt'
      break;
    case 180:                       // 'mod'
      shiftT(180);                  // 'mod'
      break;
    case 181:                       // 'modify'
      shiftT(181);                  // 'modify'
      break;
    case 182:                       // 'module'
      shiftT(182);                  // 'module'
      break;
    case 184:                       // 'namespace'
      shiftT(184);                  // 'namespace'
      break;
    case 186:                       // 'ne'
      shiftT(186);                  // 'ne'
      break;
    case 198:                       // 'only'
      shiftT(198);                  // 'only'
      break;
    case 200:                       // 'or'
      shiftT(200);                  // 'or'
      break;
    case 201:                       // 'order'
      shiftT(201);                  // 'order'
      break;
    case 202:                       // 'ordered'
      shiftT(202);                  // 'ordered'
      break;
    case 206:                       // 'parent'
      shiftT(206);                  // 'parent'
      break;
    case 212:                       // 'preceding'
      shiftT(212);                  // 'preceding'
      break;
    case 213:                       // 'preceding-sibling'
      shiftT(213);                  // 'preceding-sibling'
      break;
    case 218:                       // 'rename'
      shiftT(218);                  // 'rename'
      break;
    case 219:                       // 'replace'
      shiftT(219);                  // 'replace'
      break;
    case 220:                       // 'return'
      shiftT(220);                  // 'return'
      break;
    case 224:                       // 'satisfies'
      shiftT(224);                  // 'satisfies'
      break;
    case 229:                       // 'self'
      shiftT(229);                  // 'self'
      break;
    case 235:                       // 'some'
      shiftT(235);                  // 'some'
      break;
    case 236:                       // 'stable'
      shiftT(236);                  // 'stable'
      break;
    case 237:                       // 'start'
      shiftT(237);                  // 'start'
      break;
    case 248:                       // 'to'
      shiftT(248);                  // 'to'
      break;
    case 249:                       // 'treat'
      shiftT(249);                  // 'treat'
      break;
    case 250:                       // 'try'
      shiftT(250);                  // 'try'
      break;
    case 254:                       // 'union'
      shiftT(254);                  // 'union'
      break;
    case 256:                       // 'unordered'
      shiftT(256);                  // 'unordered'
      break;
    case 260:                       // 'validate'
      shiftT(260);                  // 'validate'
      break;
    case 266:                       // 'where'
      shiftT(266);                  // 'where'
      break;
    case 270:                       // 'with'
      shiftT(270);                  // 'with'
      break;
    case 274:                       // 'xquery'
      shiftT(274);                  // 'xquery'
      break;
    case 72:                        // 'allowing'
      shiftT(72);                   // 'allowing'
      break;
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      break;
    case 83:                        // 'base-uri'
      shiftT(83);                   // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      shiftT(85);                   // 'boundary-space'
      break;
    case 86:                        // 'break'
      shiftT(86);                   // 'break'
      break;
    case 91:                        // 'catch'
      shiftT(91);                   // 'catch'
      break;
    case 98:                        // 'construction'
      shiftT(98);                   // 'construction'
      break;
    case 101:                       // 'context'
      shiftT(101);                  // 'context'
      break;
    case 102:                       // 'continue'
      shiftT(102);                  // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      shiftT(104);                  // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      shiftT(106);                  // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      shiftT(125);                  // 'encoding'
      break;
    case 132:                       // 'exit'
      shiftT(132);                  // 'exit'
      break;
    case 133:                       // 'external'
      shiftT(133);                  // 'external'
      break;
    case 141:                       // 'ft-option'
      shiftT(141);                  // 'ft-option'
      break;
    case 154:                       // 'in'
      shiftT(154);                  // 'in'
      break;
    case 155:                       // 'index'
      shiftT(155);                  // 'index'
      break;
    case 161:                       // 'integrity'
      shiftT(161);                  // 'integrity'
      break;
    case 171:                       // 'lax'
      shiftT(171);                  // 'lax'
      break;
    case 192:                       // 'nodes'
      shiftT(192);                  // 'nodes'
      break;
    case 199:                       // 'option'
      shiftT(199);                  // 'option'
      break;
    case 203:                       // 'ordering'
      shiftT(203);                  // 'ordering'
      break;
    case 222:                       // 'revalidation'
      shiftT(222);                  // 'revalidation'
      break;
    case 225:                       // 'schema'
      shiftT(225);                  // 'schema'
      break;
    case 228:                       // 'score'
      shiftT(228);                  // 'score'
      break;
    case 234:                       // 'sliding'
      shiftT(234);                  // 'sliding'
      break;
    case 240:                       // 'strict'
      shiftT(240);                  // 'strict'
      break;
    case 251:                       // 'tumbling'
      shiftT(251);                  // 'tumbling'
      break;
    case 252:                       // 'type'
      shiftT(252);                  // 'type'
      break;
    case 257:                       // 'updating'
      shiftT(257);                  // 'updating'
      break;
    case 261:                       // 'value'
      shiftT(261);                  // 'value'
      break;
    case 262:                       // 'variable'
      shiftT(262);                  // 'variable'
      break;
    case 263:                       // 'version'
      shiftT(263);                  // 'version'
      break;
    case 267:                       // 'while'
      shiftT(267);                  // 'while'
      break;
    case 97:                        // 'constraint'
      shiftT(97);                   // 'constraint'
      break;
    case 176:                       // 'loop'
      shiftT(176);                  // 'loop'
      break;
    case 221:                       // 'returning'
      shiftT(221);                  // 'returning'
      break;
    case 77:                        // 'append'
      shiftT(77);                   // 'append'
      break;
    case 166:                       // 'json'
      shiftT(166);                  // 'json'
      break;
    default:
      shiftT(194);                  // 'object'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 19:                        // NCName^Token
      shift(19);                    // NCName^Token
      break;
    case 70:                        // 'after'
      shift(70);                    // 'after'
      break;
    case 75:                        // 'and'
      shift(75);                    // 'and'
      break;
    case 79:                        // 'as'
      shift(79);                    // 'as'
      break;
    case 80:                        // 'ascending'
      shift(80);                    // 'ascending'
      break;
    case 84:                        // 'before'
      shift(84);                    // 'before'
      break;
    case 88:                        // 'case'
      shift(88);                    // 'case'
      break;
    case 89:                        // 'cast'
      shift(89);                    // 'cast'
      break;
    case 90:                        // 'castable'
      shift(90);                    // 'castable'
      break;
    case 94:                        // 'collation'
      shift(94);                    // 'collation'
      break;
    case 105:                       // 'count'
      shift(105);                   // 'count'
      break;
    case 109:                       // 'default'
      shift(109);                   // 'default'
      break;
    case 113:                       // 'descending'
      shift(113);                   // 'descending'
      break;
    case 118:                       // 'div'
      shift(118);                   // 'div'
      break;
    case 122:                       // 'else'
      shift(122);                   // 'else'
      break;
    case 123:                       // 'empty'
      shift(123);                   // 'empty'
      break;
    case 126:                       // 'end'
      shift(126);                   // 'end'
      break;
    case 128:                       // 'eq'
      shift(128);                   // 'eq'
      break;
    case 131:                       // 'except'
      shift(131);                   // 'except'
      break;
    case 137:                       // 'for'
      shift(137);                   // 'for'
      break;
    case 146:                       // 'ge'
      shift(146);                   // 'ge'
      break;
    case 148:                       // 'group'
      shift(148);                   // 'group'
      break;
    case 150:                       // 'gt'
      shift(150);                   // 'gt'
      break;
    case 151:                       // 'idiv'
      shift(151);                   // 'idiv'
      break;
    case 160:                       // 'instance'
      shift(160);                   // 'instance'
      break;
    case 162:                       // 'intersect'
      shift(162);                   // 'intersect'
      break;
    case 163:                       // 'into'
      shift(163);                   // 'into'
      break;
    case 164:                       // 'is'
      shift(164);                   // 'is'
      break;
    case 172:                       // 'le'
      shift(172);                   // 'le'
      break;
    case 174:                       // 'let'
      shift(174);                   // 'let'
      break;
    case 178:                       // 'lt'
      shift(178);                   // 'lt'
      break;
    case 180:                       // 'mod'
      shift(180);                   // 'mod'
      break;
    case 181:                       // 'modify'
      shift(181);                   // 'modify'
      break;
    case 186:                       // 'ne'
      shift(186);                   // 'ne'
      break;
    case 198:                       // 'only'
      shift(198);                   // 'only'
      break;
    case 200:                       // 'or'
      shift(200);                   // 'or'
      break;
    case 201:                       // 'order'
      shift(201);                   // 'order'
      break;
    case 220:                       // 'return'
      shift(220);                   // 'return'
      break;
    case 224:                       // 'satisfies'
      shift(224);                   // 'satisfies'
      break;
    case 236:                       // 'stable'
      shift(236);                   // 'stable'
      break;
    case 237:                       // 'start'
      shift(237);                   // 'start'
      break;
    case 248:                       // 'to'
      shift(248);                   // 'to'
      break;
    case 249:                       // 'treat'
      shift(249);                   // 'treat'
      break;
    case 254:                       // 'union'
      shift(254);                   // 'union'
      break;
    case 266:                       // 'where'
      shift(266);                   // 'where'
      break;
    case 270:                       // 'with'
      shift(270);                   // 'with'
      break;
    case 73:                        // 'ancestor'
      shift(73);                    // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      shift(74);                    // 'ancestor-or-self'
      break;
    case 82:                        // 'attribute'
      shift(82);                    // 'attribute'
      break;
    case 93:                        // 'child'
      shift(93);                    // 'child'
      break;
    case 96:                        // 'comment'
      shift(96);                    // 'comment'
      break;
    case 103:                       // 'copy'
      shift(103);                   // 'copy'
      break;
    case 108:                       // 'declare'
      shift(108);                   // 'declare'
      break;
    case 110:                       // 'delete'
      shift(110);                   // 'delete'
      break;
    case 111:                       // 'descendant'
      shift(111);                   // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      shift(112);                   // 'descendant-or-self'
      break;
    case 119:                       // 'document'
      shift(119);                   // 'document'
      break;
    case 120:                       // 'document-node'
      shift(120);                   // 'document-node'
      break;
    case 121:                       // 'element'
      shift(121);                   // 'element'
      break;
    case 124:                       // 'empty-sequence'
      shift(124);                   // 'empty-sequence'
      break;
    case 129:                       // 'every'
      shift(129);                   // 'every'
      break;
    case 134:                       // 'first'
      shift(134);                   // 'first'
      break;
    case 135:                       // 'following'
      shift(135);                   // 'following'
      break;
    case 136:                       // 'following-sibling'
      shift(136);                   // 'following-sibling'
      break;
    case 145:                       // 'function'
      shift(145);                   // 'function'
      break;
    case 152:                       // 'if'
      shift(152);                   // 'if'
      break;
    case 153:                       // 'import'
      shift(153);                   // 'import'
      break;
    case 159:                       // 'insert'
      shift(159);                   // 'insert'
      break;
    case 165:                       // 'item'
      shift(165);                   // 'item'
      break;
    case 170:                       // 'last'
      shift(170);                   // 'last'
      break;
    case 182:                       // 'module'
      shift(182);                   // 'module'
      break;
    case 184:                       // 'namespace'
      shift(184);                   // 'namespace'
      break;
    case 185:                       // 'namespace-node'
      shift(185);                   // 'namespace-node'
      break;
    case 191:                       // 'node'
      shift(191);                   // 'node'
      break;
    case 202:                       // 'ordered'
      shift(202);                   // 'ordered'
      break;
    case 206:                       // 'parent'
      shift(206);                   // 'parent'
      break;
    case 212:                       // 'preceding'
      shift(212);                   // 'preceding'
      break;
    case 213:                       // 'preceding-sibling'
      shift(213);                   // 'preceding-sibling'
      break;
    case 216:                       // 'processing-instruction'
      shift(216);                   // 'processing-instruction'
      break;
    case 218:                       // 'rename'
      shift(218);                   // 'rename'
      break;
    case 219:                       // 'replace'
      shift(219);                   // 'replace'
      break;
    case 226:                       // 'schema-attribute'
      shift(226);                   // 'schema-attribute'
      break;
    case 227:                       // 'schema-element'
      shift(227);                   // 'schema-element'
      break;
    case 229:                       // 'self'
      shift(229);                   // 'self'
      break;
    case 235:                       // 'some'
      shift(235);                   // 'some'
      break;
    case 243:                       // 'switch'
      shift(243);                   // 'switch'
      break;
    case 244:                       // 'text'
      shift(244);                   // 'text'
      break;
    case 250:                       // 'try'
      shift(250);                   // 'try'
      break;
    case 253:                       // 'typeswitch'
      shift(253);                   // 'typeswitch'
      break;
    case 256:                       // 'unordered'
      shift(256);                   // 'unordered'
      break;
    case 260:                       // 'validate'
      shift(260);                   // 'validate'
      break;
    case 262:                       // 'variable'
      shift(262);                   // 'variable'
      break;
    case 274:                       // 'xquery'
      shift(274);                   // 'xquery'
      break;
    case 72:                        // 'allowing'
      shift(72);                    // 'allowing'
      break;
    case 81:                        // 'at'
      shift(81);                    // 'at'
      break;
    case 83:                        // 'base-uri'
      shift(83);                    // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      shift(85);                    // 'boundary-space'
      break;
    case 86:                        // 'break'
      shift(86);                    // 'break'
      break;
    case 91:                        // 'catch'
      shift(91);                    // 'catch'
      break;
    case 98:                        // 'construction'
      shift(98);                    // 'construction'
      break;
    case 101:                       // 'context'
      shift(101);                   // 'context'
      break;
    case 102:                       // 'continue'
      shift(102);                   // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      shift(104);                   // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      shift(106);                   // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      shift(125);                   // 'encoding'
      break;
    case 132:                       // 'exit'
      shift(132);                   // 'exit'
      break;
    case 133:                       // 'external'
      shift(133);                   // 'external'
      break;
    case 141:                       // 'ft-option'
      shift(141);                   // 'ft-option'
      break;
    case 154:                       // 'in'
      shift(154);                   // 'in'
      break;
    case 155:                       // 'index'
      shift(155);                   // 'index'
      break;
    case 161:                       // 'integrity'
      shift(161);                   // 'integrity'
      break;
    case 171:                       // 'lax'
      shift(171);                   // 'lax'
      break;
    case 192:                       // 'nodes'
      shift(192);                   // 'nodes'
      break;
    case 199:                       // 'option'
      shift(199);                   // 'option'
      break;
    case 203:                       // 'ordering'
      shift(203);                   // 'ordering'
      break;
    case 222:                       // 'revalidation'
      shift(222);                   // 'revalidation'
      break;
    case 225:                       // 'schema'
      shift(225);                   // 'schema'
      break;
    case 228:                       // 'score'
      shift(228);                   // 'score'
      break;
    case 234:                       // 'sliding'
      shift(234);                   // 'sliding'
      break;
    case 240:                       // 'strict'
      shift(240);                   // 'strict'
      break;
    case 251:                       // 'tumbling'
      shift(251);                   // 'tumbling'
      break;
    case 252:                       // 'type'
      shift(252);                   // 'type'
      break;
    case 257:                       // 'updating'
      shift(257);                   // 'updating'
      break;
    case 261:                       // 'value'
      shift(261);                   // 'value'
      break;
    case 263:                       // 'version'
      shift(263);                   // 'version'
      break;
    case 267:                       // 'while'
      shift(267);                   // 'while'
      break;
    case 97:                        // 'constraint'
      shift(97);                    // 'constraint'
      break;
    case 176:                       // 'loop'
      shift(176);                   // 'loop'
      break;
    case 221:                       // 'returning'
      shift(221);                   // 'returning'
      break;
    case 77:                        // 'append'
      shift(77);                    // 'append'
      break;
    case 166:                       // 'json'
      shift(166);                   // 'json'
      break;
    default:
      shift(194);                   // 'object'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 19:                        // NCName^Token
      shiftT(19);                   // NCName^Token
      break;
    case 70:                        // 'after'
      shiftT(70);                   // 'after'
      break;
    case 75:                        // 'and'
      shiftT(75);                   // 'and'
      break;
    case 79:                        // 'as'
      shiftT(79);                   // 'as'
      break;
    case 80:                        // 'ascending'
      shiftT(80);                   // 'ascending'
      break;
    case 84:                        // 'before'
      shiftT(84);                   // 'before'
      break;
    case 88:                        // 'case'
      shiftT(88);                   // 'case'
      break;
    case 89:                        // 'cast'
      shiftT(89);                   // 'cast'
      break;
    case 90:                        // 'castable'
      shiftT(90);                   // 'castable'
      break;
    case 94:                        // 'collation'
      shiftT(94);                   // 'collation'
      break;
    case 105:                       // 'count'
      shiftT(105);                  // 'count'
      break;
    case 109:                       // 'default'
      shiftT(109);                  // 'default'
      break;
    case 113:                       // 'descending'
      shiftT(113);                  // 'descending'
      break;
    case 118:                       // 'div'
      shiftT(118);                  // 'div'
      break;
    case 122:                       // 'else'
      shiftT(122);                  // 'else'
      break;
    case 123:                       // 'empty'
      shiftT(123);                  // 'empty'
      break;
    case 126:                       // 'end'
      shiftT(126);                  // 'end'
      break;
    case 128:                       // 'eq'
      shiftT(128);                  // 'eq'
      break;
    case 131:                       // 'except'
      shiftT(131);                  // 'except'
      break;
    case 137:                       // 'for'
      shiftT(137);                  // 'for'
      break;
    case 146:                       // 'ge'
      shiftT(146);                  // 'ge'
      break;
    case 148:                       // 'group'
      shiftT(148);                  // 'group'
      break;
    case 150:                       // 'gt'
      shiftT(150);                  // 'gt'
      break;
    case 151:                       // 'idiv'
      shiftT(151);                  // 'idiv'
      break;
    case 160:                       // 'instance'
      shiftT(160);                  // 'instance'
      break;
    case 162:                       // 'intersect'
      shiftT(162);                  // 'intersect'
      break;
    case 163:                       // 'into'
      shiftT(163);                  // 'into'
      break;
    case 164:                       // 'is'
      shiftT(164);                  // 'is'
      break;
    case 172:                       // 'le'
      shiftT(172);                  // 'le'
      break;
    case 174:                       // 'let'
      shiftT(174);                  // 'let'
      break;
    case 178:                       // 'lt'
      shiftT(178);                  // 'lt'
      break;
    case 180:                       // 'mod'
      shiftT(180);                  // 'mod'
      break;
    case 181:                       // 'modify'
      shiftT(181);                  // 'modify'
      break;
    case 186:                       // 'ne'
      shiftT(186);                  // 'ne'
      break;
    case 198:                       // 'only'
      shiftT(198);                  // 'only'
      break;
    case 200:                       // 'or'
      shiftT(200);                  // 'or'
      break;
    case 201:                       // 'order'
      shiftT(201);                  // 'order'
      break;
    case 220:                       // 'return'
      shiftT(220);                  // 'return'
      break;
    case 224:                       // 'satisfies'
      shiftT(224);                  // 'satisfies'
      break;
    case 236:                       // 'stable'
      shiftT(236);                  // 'stable'
      break;
    case 237:                       // 'start'
      shiftT(237);                  // 'start'
      break;
    case 248:                       // 'to'
      shiftT(248);                  // 'to'
      break;
    case 249:                       // 'treat'
      shiftT(249);                  // 'treat'
      break;
    case 254:                       // 'union'
      shiftT(254);                  // 'union'
      break;
    case 266:                       // 'where'
      shiftT(266);                  // 'where'
      break;
    case 270:                       // 'with'
      shiftT(270);                  // 'with'
      break;
    case 73:                        // 'ancestor'
      shiftT(73);                   // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      shiftT(74);                   // 'ancestor-or-self'
      break;
    case 82:                        // 'attribute'
      shiftT(82);                   // 'attribute'
      break;
    case 93:                        // 'child'
      shiftT(93);                   // 'child'
      break;
    case 96:                        // 'comment'
      shiftT(96);                   // 'comment'
      break;
    case 103:                       // 'copy'
      shiftT(103);                  // 'copy'
      break;
    case 108:                       // 'declare'
      shiftT(108);                  // 'declare'
      break;
    case 110:                       // 'delete'
      shiftT(110);                  // 'delete'
      break;
    case 111:                       // 'descendant'
      shiftT(111);                  // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      shiftT(112);                  // 'descendant-or-self'
      break;
    case 119:                       // 'document'
      shiftT(119);                  // 'document'
      break;
    case 120:                       // 'document-node'
      shiftT(120);                  // 'document-node'
      break;
    case 121:                       // 'element'
      shiftT(121);                  // 'element'
      break;
    case 124:                       // 'empty-sequence'
      shiftT(124);                  // 'empty-sequence'
      break;
    case 129:                       // 'every'
      shiftT(129);                  // 'every'
      break;
    case 134:                       // 'first'
      shiftT(134);                  // 'first'
      break;
    case 135:                       // 'following'
      shiftT(135);                  // 'following'
      break;
    case 136:                       // 'following-sibling'
      shiftT(136);                  // 'following-sibling'
      break;
    case 145:                       // 'function'
      shiftT(145);                  // 'function'
      break;
    case 152:                       // 'if'
      shiftT(152);                  // 'if'
      break;
    case 153:                       // 'import'
      shiftT(153);                  // 'import'
      break;
    case 159:                       // 'insert'
      shiftT(159);                  // 'insert'
      break;
    case 165:                       // 'item'
      shiftT(165);                  // 'item'
      break;
    case 170:                       // 'last'
      shiftT(170);                  // 'last'
      break;
    case 182:                       // 'module'
      shiftT(182);                  // 'module'
      break;
    case 184:                       // 'namespace'
      shiftT(184);                  // 'namespace'
      break;
    case 185:                       // 'namespace-node'
      shiftT(185);                  // 'namespace-node'
      break;
    case 191:                       // 'node'
      shiftT(191);                  // 'node'
      break;
    case 202:                       // 'ordered'
      shiftT(202);                  // 'ordered'
      break;
    case 206:                       // 'parent'
      shiftT(206);                  // 'parent'
      break;
    case 212:                       // 'preceding'
      shiftT(212);                  // 'preceding'
      break;
    case 213:                       // 'preceding-sibling'
      shiftT(213);                  // 'preceding-sibling'
      break;
    case 216:                       // 'processing-instruction'
      shiftT(216);                  // 'processing-instruction'
      break;
    case 218:                       // 'rename'
      shiftT(218);                  // 'rename'
      break;
    case 219:                       // 'replace'
      shiftT(219);                  // 'replace'
      break;
    case 226:                       // 'schema-attribute'
      shiftT(226);                  // 'schema-attribute'
      break;
    case 227:                       // 'schema-element'
      shiftT(227);                  // 'schema-element'
      break;
    case 229:                       // 'self'
      shiftT(229);                  // 'self'
      break;
    case 235:                       // 'some'
      shiftT(235);                  // 'some'
      break;
    case 243:                       // 'switch'
      shiftT(243);                  // 'switch'
      break;
    case 244:                       // 'text'
      shiftT(244);                  // 'text'
      break;
    case 250:                       // 'try'
      shiftT(250);                  // 'try'
      break;
    case 253:                       // 'typeswitch'
      shiftT(253);                  // 'typeswitch'
      break;
    case 256:                       // 'unordered'
      shiftT(256);                  // 'unordered'
      break;
    case 260:                       // 'validate'
      shiftT(260);                  // 'validate'
      break;
    case 262:                       // 'variable'
      shiftT(262);                  // 'variable'
      break;
    case 274:                       // 'xquery'
      shiftT(274);                  // 'xquery'
      break;
    case 72:                        // 'allowing'
      shiftT(72);                   // 'allowing'
      break;
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      break;
    case 83:                        // 'base-uri'
      shiftT(83);                   // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      shiftT(85);                   // 'boundary-space'
      break;
    case 86:                        // 'break'
      shiftT(86);                   // 'break'
      break;
    case 91:                        // 'catch'
      shiftT(91);                   // 'catch'
      break;
    case 98:                        // 'construction'
      shiftT(98);                   // 'construction'
      break;
    case 101:                       // 'context'
      shiftT(101);                  // 'context'
      break;
    case 102:                       // 'continue'
      shiftT(102);                  // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      shiftT(104);                  // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      shiftT(106);                  // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      shiftT(125);                  // 'encoding'
      break;
    case 132:                       // 'exit'
      shiftT(132);                  // 'exit'
      break;
    case 133:                       // 'external'
      shiftT(133);                  // 'external'
      break;
    case 141:                       // 'ft-option'
      shiftT(141);                  // 'ft-option'
      break;
    case 154:                       // 'in'
      shiftT(154);                  // 'in'
      break;
    case 155:                       // 'index'
      shiftT(155);                  // 'index'
      break;
    case 161:                       // 'integrity'
      shiftT(161);                  // 'integrity'
      break;
    case 171:                       // 'lax'
      shiftT(171);                  // 'lax'
      break;
    case 192:                       // 'nodes'
      shiftT(192);                  // 'nodes'
      break;
    case 199:                       // 'option'
      shiftT(199);                  // 'option'
      break;
    case 203:                       // 'ordering'
      shiftT(203);                  // 'ordering'
      break;
    case 222:                       // 'revalidation'
      shiftT(222);                  // 'revalidation'
      break;
    case 225:                       // 'schema'
      shiftT(225);                  // 'schema'
      break;
    case 228:                       // 'score'
      shiftT(228);                  // 'score'
      break;
    case 234:                       // 'sliding'
      shiftT(234);                  // 'sliding'
      break;
    case 240:                       // 'strict'
      shiftT(240);                  // 'strict'
      break;
    case 251:                       // 'tumbling'
      shiftT(251);                  // 'tumbling'
      break;
    case 252:                       // 'type'
      shiftT(252);                  // 'type'
      break;
    case 257:                       // 'updating'
      shiftT(257);                  // 'updating'
      break;
    case 261:                       // 'value'
      shiftT(261);                  // 'value'
      break;
    case 263:                       // 'version'
      shiftT(263);                  // 'version'
      break;
    case 267:                       // 'while'
      shiftT(267);                  // 'while'
      break;
    case 97:                        // 'constraint'
      shiftT(97);                   // 'constraint'
      break;
    case 176:                       // 'loop'
      shiftT(176);                  // 'loop'
      break;
    case 221:                       // 'returning'
      shiftT(221);                  // 'returning'
      break;
    case 77:                        // 'append'
      shiftT(77);                   // 'append'
      break;
    case 166:                       // 'json'
      shiftT(166);                  // 'json'
      break;
    default:
      shiftT(194);                  // 'object'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(269);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 35:                      // '(#'
        lookahead2(252);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
        break;
      case 46:                      // '/'
        lookahead2W(284);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 47:                      // '//'
        lookahead2W(265);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 66:                      // '@'
        lookahead2W(257);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        break;
      case 68:                      // '['
        lookahead2W(272);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 77:                      // 'append'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 82:                      // 'attribute'
        lookahead2W(281);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
        break;
      case 121:                     // 'element'
        lookahead2W(280);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
        break;
      case 132:                     // 'exit'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 137:                     // 'for'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
        break;
      case 174:                     // 'let'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
        break;
      case 218:                     // 'rename'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 219:                     // 'replace'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 260:                     // 'validate'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 276:                     // '{'
        lookahead2W(277);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 278:                     // '{|'
        lookahead2W(273);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(186);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        lookahead2W(201);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 184:                     // 'namespace'
      case 216:                     // 'processing-instruction'
        lookahead2W(268);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 235:                     // 'some'
      case 262:                     // 'variable'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(192);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
        break;
      case 78:                      // 'array'
      case 124:                     // 'empty-sequence'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 242:                     // 'structured-item'
        lookahead2W(191);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 202:                     // 'ordered'
      case 244:                     // 'text'
      case 250:                     // 'try'
      case 256:                     // 'unordered'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 206:                     // 'parent'
      case 212:                     // 'preceding'
      case 213:                     // 'preceding-sibling'
      case 229:                     // 'self'
        lookahead2W(198);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 131:                     // 'except'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 152:                     // 'if'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 166:                     // 'json'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 180:                     // 'mod'
      case 181:                     // 'modify'
      case 182:                     // 'module'
      case 185:                     // 'namespace-node'
      case 186:                     // 'ne'
      case 191:                     // 'node'
      case 192:                     // 'nodes'
      case 194:                     // 'object'
      case 198:                     // 'only'
      case 199:                     // 'option'
      case 200:                     // 'or'
      case 201:                     // 'order'
      case 203:                     // 'ordering'
      case 220:                     // 'return'
      case 221:                     // 'returning'
      case 222:                     // 'revalidation'
      case 224:                     // 'satisfies'
      case 225:                     // 'schema'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 228:                     // 'score'
      case 234:                     // 'sliding'
      case 236:                     // 'stable'
      case 237:                     // 'start'
      case 240:                     // 'strict'
      case 243:                     // 'switch'
      case 248:                     // 'to'
      case 249:                     // 'treat'
      case 251:                     // 'tumbling'
      case 252:                     // 'type'
      case 253:                     // 'typeswitch'
      case 254:                     // 'union'
      case 257:                     // 'updating'
      case 261:                     // 'value'
      case 263:                     // 'version'
      case 266:                     // 'where'
      case 267:                     // 'while'
      case 270:                     // 'with'
      case 274:                     // 'xquery'
        lookahead2W(195);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 53                  // ';'
       && lk != 282                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12870               // 'after' EOF
       && lk != 12872               // 'allowing' EOF
       && lk != 12873               // 'ancestor' EOF
       && lk != 12874               // 'ancestor-or-self' EOF
       && lk != 12875               // 'and' EOF
       && lk != 12877               // 'append' EOF
       && lk != 12878               // 'array' EOF
       && lk != 12879               // 'as' EOF
       && lk != 12880               // 'ascending' EOF
       && lk != 12881               // 'at' EOF
       && lk != 12882               // 'attribute' EOF
       && lk != 12883               // 'base-uri' EOF
       && lk != 12884               // 'before' EOF
       && lk != 12885               // 'boundary-space' EOF
       && lk != 12886               // 'break' EOF
       && lk != 12888               // 'case' EOF
       && lk != 12889               // 'cast' EOF
       && lk != 12890               // 'castable' EOF
       && lk != 12891               // 'catch' EOF
       && lk != 12893               // 'child' EOF
       && lk != 12894               // 'collation' EOF
       && lk != 12896               // 'comment' EOF
       && lk != 12897               // 'constraint' EOF
       && lk != 12898               // 'construction' EOF
       && lk != 12901               // 'context' EOF
       && lk != 12902               // 'continue' EOF
       && lk != 12903               // 'copy' EOF
       && lk != 12904               // 'copy-namespaces' EOF
       && lk != 12905               // 'count' EOF
       && lk != 12906               // 'decimal-format' EOF
       && lk != 12908               // 'declare' EOF
       && lk != 12909               // 'default' EOF
       && lk != 12910               // 'delete' EOF
       && lk != 12911               // 'descendant' EOF
       && lk != 12912               // 'descendant-or-self' EOF
       && lk != 12913               // 'descending' EOF
       && lk != 12918               // 'div' EOF
       && lk != 12919               // 'document' EOF
       && lk != 12920               // 'document-node' EOF
       && lk != 12921               // 'element' EOF
       && lk != 12922               // 'else' EOF
       && lk != 12923               // 'empty' EOF
       && lk != 12924               // 'empty-sequence' EOF
       && lk != 12925               // 'encoding' EOF
       && lk != 12926               // 'end' EOF
       && lk != 12928               // 'eq' EOF
       && lk != 12929               // 'every' EOF
       && lk != 12931               // 'except' EOF
       && lk != 12932               // 'exit' EOF
       && lk != 12933               // 'external' EOF
       && lk != 12934               // 'first' EOF
       && lk != 12935               // 'following' EOF
       && lk != 12936               // 'following-sibling' EOF
       && lk != 12937               // 'for' EOF
       && lk != 12941               // 'ft-option' EOF
       && lk != 12945               // 'function' EOF
       && lk != 12946               // 'ge' EOF
       && lk != 12948               // 'group' EOF
       && lk != 12950               // 'gt' EOF
       && lk != 12951               // 'idiv' EOF
       && lk != 12952               // 'if' EOF
       && lk != 12953               // 'import' EOF
       && lk != 12954               // 'in' EOF
       && lk != 12955               // 'index' EOF
       && lk != 12959               // 'insert' EOF
       && lk != 12960               // 'instance' EOF
       && lk != 12961               // 'integrity' EOF
       && lk != 12962               // 'intersect' EOF
       && lk != 12963               // 'into' EOF
       && lk != 12964               // 'is' EOF
       && lk != 12965               // 'item' EOF
       && lk != 12966               // 'json' EOF
       && lk != 12967               // 'json-item' EOF
       && lk != 12970               // 'last' EOF
       && lk != 12971               // 'lax' EOF
       && lk != 12972               // 'le' EOF
       && lk != 12974               // 'let' EOF
       && lk != 12976               // 'loop' EOF
       && lk != 12978               // 'lt' EOF
       && lk != 12980               // 'mod' EOF
       && lk != 12981               // 'modify' EOF
       && lk != 12982               // 'module' EOF
       && lk != 12984               // 'namespace' EOF
       && lk != 12985               // 'namespace-node' EOF
       && lk != 12986               // 'ne' EOF
       && lk != 12991               // 'node' EOF
       && lk != 12992               // 'nodes' EOF
       && lk != 12994               // 'object' EOF
       && lk != 12998               // 'only' EOF
       && lk != 12999               // 'option' EOF
       && lk != 13000               // 'or' EOF
       && lk != 13001               // 'order' EOF
       && lk != 13002               // 'ordered' EOF
       && lk != 13003               // 'ordering' EOF
       && lk != 13006               // 'parent' EOF
       && lk != 13012               // 'preceding' EOF
       && lk != 13013               // 'preceding-sibling' EOF
       && lk != 13016               // 'processing-instruction' EOF
       && lk != 13018               // 'rename' EOF
       && lk != 13019               // 'replace' EOF
       && lk != 13020               // 'return' EOF
       && lk != 13021               // 'returning' EOF
       && lk != 13022               // 'revalidation' EOF
       && lk != 13024               // 'satisfies' EOF
       && lk != 13025               // 'schema' EOF
       && lk != 13026               // 'schema-attribute' EOF
       && lk != 13027               // 'schema-element' EOF
       && lk != 13028               // 'score' EOF
       && lk != 13029               // 'self' EOF
       && lk != 13034               // 'sliding' EOF
       && lk != 13035               // 'some' EOF
       && lk != 13036               // 'stable' EOF
       && lk != 13037               // 'start' EOF
       && lk != 13040               // 'strict' EOF
       && lk != 13042               // 'structured-item' EOF
       && lk != 13043               // 'switch' EOF
       && lk != 13044               // 'text' EOF
       && lk != 13048               // 'to' EOF
       && lk != 13049               // 'treat' EOF
       && lk != 13050               // 'try' EOF
       && lk != 13051               // 'tumbling' EOF
       && lk != 13052               // 'type' EOF
       && lk != 13053               // 'typeswitch' EOF
       && lk != 13054               // 'union' EOF
       && lk != 13056               // 'unordered' EOF
       && lk != 13057               // 'updating' EOF
       && lk != 13060               // 'validate' EOF
       && lk != 13061               // 'value' EOF
       && lk != 13062               // 'variable' EOF
       && lk != 13063               // 'version' EOF
       && lk != 13066               // 'where' EOF
       && lk != 13067               // 'while' EOF
       && lk != 13070               // 'with' EOF
       && lk != 13074               // 'xquery' EOF
       && lk != 16134               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21062               // 'after' ','
       && lk != 21064               // 'allowing' ','
       && lk != 21065               // 'ancestor' ','
       && lk != 21066               // 'ancestor-or-self' ','
       && lk != 21067               // 'and' ','
       && lk != 21069               // 'append' ','
       && lk != 21070               // 'array' ','
       && lk != 21071               // 'as' ','
       && lk != 21072               // 'ascending' ','
       && lk != 21073               // 'at' ','
       && lk != 21074               // 'attribute' ','
       && lk != 21075               // 'base-uri' ','
       && lk != 21076               // 'before' ','
       && lk != 21077               // 'boundary-space' ','
       && lk != 21078               // 'break' ','
       && lk != 21080               // 'case' ','
       && lk != 21081               // 'cast' ','
       && lk != 21082               // 'castable' ','
       && lk != 21083               // 'catch' ','
       && lk != 21085               // 'child' ','
       && lk != 21086               // 'collation' ','
       && lk != 21088               // 'comment' ','
       && lk != 21089               // 'constraint' ','
       && lk != 21090               // 'construction' ','
       && lk != 21093               // 'context' ','
       && lk != 21094               // 'continue' ','
       && lk != 21095               // 'copy' ','
       && lk != 21096               // 'copy-namespaces' ','
       && lk != 21097               // 'count' ','
       && lk != 21098               // 'decimal-format' ','
       && lk != 21100               // 'declare' ','
       && lk != 21101               // 'default' ','
       && lk != 21102               // 'delete' ','
       && lk != 21103               // 'descendant' ','
       && lk != 21104               // 'descendant-or-self' ','
       && lk != 21105               // 'descending' ','
       && lk != 21110               // 'div' ','
       && lk != 21111               // 'document' ','
       && lk != 21112               // 'document-node' ','
       && lk != 21113               // 'element' ','
       && lk != 21114               // 'else' ','
       && lk != 21115               // 'empty' ','
       && lk != 21116               // 'empty-sequence' ','
       && lk != 21117               // 'encoding' ','
       && lk != 21118               // 'end' ','
       && lk != 21120               // 'eq' ','
       && lk != 21121               // 'every' ','
       && lk != 21123               // 'except' ','
       && lk != 21124               // 'exit' ','
       && lk != 21125               // 'external' ','
       && lk != 21126               // 'first' ','
       && lk != 21127               // 'following' ','
       && lk != 21128               // 'following-sibling' ','
       && lk != 21129               // 'for' ','
       && lk != 21133               // 'ft-option' ','
       && lk != 21137               // 'function' ','
       && lk != 21138               // 'ge' ','
       && lk != 21140               // 'group' ','
       && lk != 21142               // 'gt' ','
       && lk != 21143               // 'idiv' ','
       && lk != 21144               // 'if' ','
       && lk != 21145               // 'import' ','
       && lk != 21146               // 'in' ','
       && lk != 21147               // 'index' ','
       && lk != 21151               // 'insert' ','
       && lk != 21152               // 'instance' ','
       && lk != 21153               // 'integrity' ','
       && lk != 21154               // 'intersect' ','
       && lk != 21155               // 'into' ','
       && lk != 21156               // 'is' ','
       && lk != 21157               // 'item' ','
       && lk != 21158               // 'json' ','
       && lk != 21159               // 'json-item' ','
       && lk != 21162               // 'last' ','
       && lk != 21163               // 'lax' ','
       && lk != 21164               // 'le' ','
       && lk != 21166               // 'let' ','
       && lk != 21168               // 'loop' ','
       && lk != 21170               // 'lt' ','
       && lk != 21172               // 'mod' ','
       && lk != 21173               // 'modify' ','
       && lk != 21174               // 'module' ','
       && lk != 21176               // 'namespace' ','
       && lk != 21177               // 'namespace-node' ','
       && lk != 21178               // 'ne' ','
       && lk != 21183               // 'node' ','
       && lk != 21184               // 'nodes' ','
       && lk != 21186               // 'object' ','
       && lk != 21190               // 'only' ','
       && lk != 21191               // 'option' ','
       && lk != 21192               // 'or' ','
       && lk != 21193               // 'order' ','
       && lk != 21194               // 'ordered' ','
       && lk != 21195               // 'ordering' ','
       && lk != 21198               // 'parent' ','
       && lk != 21204               // 'preceding' ','
       && lk != 21205               // 'preceding-sibling' ','
       && lk != 21208               // 'processing-instruction' ','
       && lk != 21210               // 'rename' ','
       && lk != 21211               // 'replace' ','
       && lk != 21212               // 'return' ','
       && lk != 21213               // 'returning' ','
       && lk != 21214               // 'revalidation' ','
       && lk != 21216               // 'satisfies' ','
       && lk != 21217               // 'schema' ','
       && lk != 21218               // 'schema-attribute' ','
       && lk != 21219               // 'schema-element' ','
       && lk != 21220               // 'score' ','
       && lk != 21221               // 'self' ','
       && lk != 21226               // 'sliding' ','
       && lk != 21227               // 'some' ','
       && lk != 21228               // 'stable' ','
       && lk != 21229               // 'start' ','
       && lk != 21232               // 'strict' ','
       && lk != 21234               // 'structured-item' ','
       && lk != 21235               // 'switch' ','
       && lk != 21236               // 'text' ','
       && lk != 21240               // 'to' ','
       && lk != 21241               // 'treat' ','
       && lk != 21242               // 'try' ','
       && lk != 21243               // 'tumbling' ','
       && lk != 21244               // 'type' ','
       && lk != 21245               // 'typeswitch' ','
       && lk != 21246               // 'union' ','
       && lk != 21248               // 'unordered' ','
       && lk != 21249               // 'updating' ','
       && lk != 21252               // 'validate' ','
       && lk != 21253               // 'value' ','
       && lk != 21254               // 'variable' ','
       && lk != 21255               // 'version' ','
       && lk != 21258               // 'where' ','
       && lk != 21259               // 'while' ','
       && lk != 21262               // 'with' ','
       && lk != 21266               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27316               // 'mod' ';'
       && lk != 27317               // 'modify' ';'
       && lk != 27318               // 'module' ';'
       && lk != 27320               // 'namespace' ';'
       && lk != 27321               // 'namespace-node' ';'
       && lk != 27322               // 'ne' ';'
       && lk != 27327               // 'node' ';'
       && lk != 27328               // 'nodes' ';'
       && lk != 27330               // 'object' ';'
       && lk != 27334               // 'only' ';'
       && lk != 27335               // 'option' ';'
       && lk != 27336               // 'or' ';'
       && lk != 27337               // 'order' ';'
       && lk != 27338               // 'ordered' ';'
       && lk != 27339               // 'ordering' ';'
       && lk != 27342               // 'parent' ';'
       && lk != 27348               // 'preceding' ';'
       && lk != 27349               // 'preceding-sibling' ';'
       && lk != 27352               // 'processing-instruction' ';'
       && lk != 27354               // 'rename' ';'
       && lk != 27355               // 'replace' ';'
       && lk != 27356               // 'return' ';'
       && lk != 27357               // 'returning' ';'
       && lk != 27358               // 'revalidation' ';'
       && lk != 27360               // 'satisfies' ';'
       && lk != 27361               // 'schema' ';'
       && lk != 27362               // 'schema-attribute' ';'
       && lk != 27363               // 'schema-element' ';'
       && lk != 27364               // 'score' ';'
       && lk != 27365               // 'self' ';'
       && lk != 27370               // 'sliding' ';'
       && lk != 27371               // 'some' ';'
       && lk != 27372               // 'stable' ';'
       && lk != 27373               // 'start' ';'
       && lk != 27376               // 'strict' ';'
       && lk != 27378               // 'structured-item' ';'
       && lk != 27379               // 'switch' ';'
       && lk != 27380               // 'text' ';'
       && lk != 27384               // 'to' ';'
       && lk != 27385               // 'treat' ';'
       && lk != 27386               // 'try' ';'
       && lk != 27387               // 'tumbling' ';'
       && lk != 27388               // 'type' ';'
       && lk != 27389               // 'typeswitch' ';'
       && lk != 27390               // 'union' ';'
       && lk != 27392               // 'unordered' ';'
       && lk != 27393               // 'updating' ';'
       && lk != 27396               // 'validate' ';'
       && lk != 27397               // 'value' ';'
       && lk != 27398               // 'variable' ';'
       && lk != 27399               // 'version' ';'
       && lk != 27402               // 'where' ';'
       && lk != 27403               // 'while' ';'
       && lk != 27406               // 'with' ';'
       && lk != 27410               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113284              // 'exit' 'returning'
       && lk != 144389              // Wildcard '}'
       && lk != 144390              // EQName^Token '}'
       && lk != 144392              // IntegerLiteral '}'
       && lk != 144393              // DecimalLiteral '}'
       && lk != 144394              // DoubleLiteral '}'
       && lk != 144395              // StringLiteral '}'
       && lk != 144428              // '.' '}'
       && lk != 144429              // '..' '}'
       && lk != 144430              // '/' '}'
       && lk != 144454              // 'after' '}'
       && lk != 144456              // 'allowing' '}'
       && lk != 144457              // 'ancestor' '}'
       && lk != 144458              // 'ancestor-or-self' '}'
       && lk != 144459              // 'and' '}'
       && lk != 144461              // 'append' '}'
       && lk != 144462              // 'array' '}'
       && lk != 144463              // 'as' '}'
       && lk != 144464              // 'ascending' '}'
       && lk != 144465              // 'at' '}'
       && lk != 144466              // 'attribute' '}'
       && lk != 144467              // 'base-uri' '}'
       && lk != 144468              // 'before' '}'
       && lk != 144469              // 'boundary-space' '}'
       && lk != 144470              // 'break' '}'
       && lk != 144472              // 'case' '}'
       && lk != 144473              // 'cast' '}'
       && lk != 144474              // 'castable' '}'
       && lk != 144475              // 'catch' '}'
       && lk != 144477              // 'child' '}'
       && lk != 144478              // 'collation' '}'
       && lk != 144480              // 'comment' '}'
       && lk != 144481              // 'constraint' '}'
       && lk != 144482              // 'construction' '}'
       && lk != 144485              // 'context' '}'
       && lk != 144486              // 'continue' '}'
       && lk != 144487              // 'copy' '}'
       && lk != 144488              // 'copy-namespaces' '}'
       && lk != 144489              // 'count' '}'
       && lk != 144490              // 'decimal-format' '}'
       && lk != 144492              // 'declare' '}'
       && lk != 144493              // 'default' '}'
       && lk != 144494              // 'delete' '}'
       && lk != 144495              // 'descendant' '}'
       && lk != 144496              // 'descendant-or-self' '}'
       && lk != 144497              // 'descending' '}'
       && lk != 144502              // 'div' '}'
       && lk != 144503              // 'document' '}'
       && lk != 144504              // 'document-node' '}'
       && lk != 144505              // 'element' '}'
       && lk != 144506              // 'else' '}'
       && lk != 144507              // 'empty' '}'
       && lk != 144508              // 'empty-sequence' '}'
       && lk != 144509              // 'encoding' '}'
       && lk != 144510              // 'end' '}'
       && lk != 144512              // 'eq' '}'
       && lk != 144513              // 'every' '}'
       && lk != 144515              // 'except' '}'
       && lk != 144516              // 'exit' '}'
       && lk != 144517              // 'external' '}'
       && lk != 144518              // 'first' '}'
       && lk != 144519              // 'following' '}'
       && lk != 144520              // 'following-sibling' '}'
       && lk != 144521              // 'for' '}'
       && lk != 144525              // 'ft-option' '}'
       && lk != 144529              // 'function' '}'
       && lk != 144530              // 'ge' '}'
       && lk != 144532              // 'group' '}'
       && lk != 144534              // 'gt' '}'
       && lk != 144535              // 'idiv' '}'
       && lk != 144536              // 'if' '}'
       && lk != 144537              // 'import' '}'
       && lk != 144538              // 'in' '}'
       && lk != 144539              // 'index' '}'
       && lk != 144543              // 'insert' '}'
       && lk != 144544              // 'instance' '}'
       && lk != 144545              // 'integrity' '}'
       && lk != 144546              // 'intersect' '}'
       && lk != 144547              // 'into' '}'
       && lk != 144548              // 'is' '}'
       && lk != 144549              // 'item' '}'
       && lk != 144550              // 'json' '}'
       && lk != 144551              // 'json-item' '}'
       && lk != 144554              // 'last' '}'
       && lk != 144555              // 'lax' '}'
       && lk != 144556              // 'le' '}'
       && lk != 144558              // 'let' '}'
       && lk != 144560              // 'loop' '}'
       && lk != 144562              // 'lt' '}'
       && lk != 144564              // 'mod' '}'
       && lk != 144565              // 'modify' '}'
       && lk != 144566              // 'module' '}'
       && lk != 144568              // 'namespace' '}'
       && lk != 144569              // 'namespace-node' '}'
       && lk != 144570              // 'ne' '}'
       && lk != 144575              // 'node' '}'
       && lk != 144576              // 'nodes' '}'
       && lk != 144578              // 'object' '}'
       && lk != 144582              // 'only' '}'
       && lk != 144583              // 'option' '}'
       && lk != 144584              // 'or' '}'
       && lk != 144585              // 'order' '}'
       && lk != 144586              // 'ordered' '}'
       && lk != 144587              // 'ordering' '}'
       && lk != 144590              // 'parent' '}'
       && lk != 144596              // 'preceding' '}'
       && lk != 144597              // 'preceding-sibling' '}'
       && lk != 144600              // 'processing-instruction' '}'
       && lk != 144602              // 'rename' '}'
       && lk != 144603              // 'replace' '}'
       && lk != 144604              // 'return' '}'
       && lk != 144605              // 'returning' '}'
       && lk != 144606              // 'revalidation' '}'
       && lk != 144608              // 'satisfies' '}'
       && lk != 144609              // 'schema' '}'
       && lk != 144610              // 'schema-attribute' '}'
       && lk != 144611              // 'schema-element' '}'
       && lk != 144612              // 'score' '}'
       && lk != 144613              // 'self' '}'
       && lk != 144618              // 'sliding' '}'
       && lk != 144619              // 'some' '}'
       && lk != 144620              // 'stable' '}'
       && lk != 144621              // 'start' '}'
       && lk != 144624              // 'strict' '}'
       && lk != 144626              // 'structured-item' '}'
       && lk != 144627              // 'switch' '}'
       && lk != 144628              // 'text' '}'
       && lk != 144632              // 'to' '}'
       && lk != 144633              // 'treat' '}'
       && lk != 144634              // 'try' '}'
       && lk != 144635              // 'tumbling' '}'
       && lk != 144636              // 'type' '}'
       && lk != 144637              // 'typeswitch' '}'
       && lk != 144638              // 'union' '}'
       && lk != 144640              // 'unordered' '}'
       && lk != 144641              // 'updating' '}'
       && lk != 144644              // 'validate' '}'
       && lk != 144645              // 'value' '}'
       && lk != 144646              // 'variable' '}'
       && lk != 144647              // 'version' '}'
       && lk != 144650              // 'where' '}'
       && lk != 144651              // 'while' '}'
       && lk != 144654              // 'with' '}'
       && lk != 144658)             // 'xquery' '}'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0, lk);
        }
      }
      if (lk != -1
       && lk != 53                  // ';'
       && lk != 16134               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27316               // 'mod' ';'
       && lk != 27317               // 'modify' ';'
       && lk != 27318               // 'module' ';'
       && lk != 27320               // 'namespace' ';'
       && lk != 27321               // 'namespace-node' ';'
       && lk != 27322               // 'ne' ';'
       && lk != 27327               // 'node' ';'
       && lk != 27328               // 'nodes' ';'
       && lk != 27330               // 'object' ';'
       && lk != 27334               // 'only' ';'
       && lk != 27335               // 'option' ';'
       && lk != 27336               // 'or' ';'
       && lk != 27337               // 'order' ';'
       && lk != 27338               // 'ordered' ';'
       && lk != 27339               // 'ordering' ';'
       && lk != 27342               // 'parent' ';'
       && lk != 27348               // 'preceding' ';'
       && lk != 27349               // 'preceding-sibling' ';'
       && lk != 27352               // 'processing-instruction' ';'
       && lk != 27354               // 'rename' ';'
       && lk != 27355               // 'replace' ';'
       && lk != 27356               // 'return' ';'
       && lk != 27357               // 'returning' ';'
       && lk != 27358               // 'revalidation' ';'
       && lk != 27360               // 'satisfies' ';'
       && lk != 27361               // 'schema' ';'
       && lk != 27362               // 'schema-attribute' ';'
       && lk != 27363               // 'schema-element' ';'
       && lk != 27364               // 'score' ';'
       && lk != 27365               // 'self' ';'
       && lk != 27370               // 'sliding' ';'
       && lk != 27371               // 'some' ';'
       && lk != 27372               // 'stable' ';'
       && lk != 27373               // 'start' ';'
       && lk != 27376               // 'strict' ';'
       && lk != 27378               // 'structured-item' ';'
       && lk != 27379               // 'switch' ';'
       && lk != 27380               // 'text' ';'
       && lk != 27384               // 'to' ';'
       && lk != 27385               // 'treat' ';'
       && lk != 27386               // 'try' ';'
       && lk != 27387               // 'tumbling' ';'
       && lk != 27388               // 'type' ';'
       && lk != 27389               // 'typeswitch' ';'
       && lk != 27390               // 'union' ';'
       && lk != 27392               // 'unordered' ';'
       && lk != 27393               // 'updating' ';'
       && lk != 27396               // 'validate' ';'
       && lk != 27397               // 'value' ';'
       && lk != 27398               // 'variable' ';'
       && lk != 27399               // 'version' ';'
       && lk != 27402               // 'where' ';'
       && lk != 27403               // 'while' ';'
       && lk != 27406               // 'with' ';'
       && lk != 27410               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113284)             // 'exit' 'returning'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(269);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 35:                      // '(#'
        lookahead2(252);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
        break;
      case 46:                      // '/'
        lookahead2W(284);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 47:                      // '//'
        lookahead2W(265);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 66:                      // '@'
        lookahead2W(257);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        break;
      case 68:                      // '['
        lookahead2W(272);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 77:                      // 'append'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 82:                      // 'attribute'
        lookahead2W(281);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
        break;
      case 121:                     // 'element'
        lookahead2W(280);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
        break;
      case 132:                     // 'exit'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 137:                     // 'for'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
        break;
      case 174:                     // 'let'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
        break;
      case 218:                     // 'rename'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 219:                     // 'replace'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 260:                     // 'validate'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 276:                     // '{'
        lookahead2W(277);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 278:                     // '{|'
        lookahead2W(273);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(186);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        lookahead2W(201);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 184:                     // 'namespace'
      case 216:                     // 'processing-instruction'
        lookahead2W(268);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 235:                     // 'some'
      case 262:                     // 'variable'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(192);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
        break;
      case 78:                      // 'array'
      case 124:                     // 'empty-sequence'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 242:                     // 'structured-item'
        lookahead2W(191);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 202:                     // 'ordered'
      case 244:                     // 'text'
      case 250:                     // 'try'
      case 256:                     // 'unordered'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 206:                     // 'parent'
      case 212:                     // 'preceding'
      case 213:                     // 'preceding-sibling'
      case 229:                     // 'self'
        lookahead2W(198);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 131:                     // 'except'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 152:                     // 'if'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 166:                     // 'json'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 180:                     // 'mod'
      case 181:                     // 'modify'
      case 182:                     // 'module'
      case 185:                     // 'namespace-node'
      case 186:                     // 'ne'
      case 191:                     // 'node'
      case 192:                     // 'nodes'
      case 194:                     // 'object'
      case 198:                     // 'only'
      case 199:                     // 'option'
      case 200:                     // 'or'
      case 201:                     // 'order'
      case 203:                     // 'ordering'
      case 220:                     // 'return'
      case 221:                     // 'returning'
      case 222:                     // 'revalidation'
      case 224:                     // 'satisfies'
      case 225:                     // 'schema'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 228:                     // 'score'
      case 234:                     // 'sliding'
      case 236:                     // 'stable'
      case 237:                     // 'start'
      case 240:                     // 'strict'
      case 243:                     // 'switch'
      case 248:                     // 'to'
      case 249:                     // 'treat'
      case 251:                     // 'tumbling'
      case 252:                     // 'type'
      case 253:                     // 'typeswitch'
      case 254:                     // 'union'
      case 257:                     // 'updating'
      case 261:                     // 'value'
      case 263:                     // 'version'
      case 266:                     // 'where'
      case 267:                     // 'while'
      case 270:                     // 'with'
      case 274:                     // 'xquery'
        lookahead2W(195);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 53                  // ';'
       && lk != 282                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12870               // 'after' EOF
       && lk != 12872               // 'allowing' EOF
       && lk != 12873               // 'ancestor' EOF
       && lk != 12874               // 'ancestor-or-self' EOF
       && lk != 12875               // 'and' EOF
       && lk != 12877               // 'append' EOF
       && lk != 12878               // 'array' EOF
       && lk != 12879               // 'as' EOF
       && lk != 12880               // 'ascending' EOF
       && lk != 12881               // 'at' EOF
       && lk != 12882               // 'attribute' EOF
       && lk != 12883               // 'base-uri' EOF
       && lk != 12884               // 'before' EOF
       && lk != 12885               // 'boundary-space' EOF
       && lk != 12886               // 'break' EOF
       && lk != 12888               // 'case' EOF
       && lk != 12889               // 'cast' EOF
       && lk != 12890               // 'castable' EOF
       && lk != 12891               // 'catch' EOF
       && lk != 12893               // 'child' EOF
       && lk != 12894               // 'collation' EOF
       && lk != 12896               // 'comment' EOF
       && lk != 12897               // 'constraint' EOF
       && lk != 12898               // 'construction' EOF
       && lk != 12901               // 'context' EOF
       && lk != 12902               // 'continue' EOF
       && lk != 12903               // 'copy' EOF
       && lk != 12904               // 'copy-namespaces' EOF
       && lk != 12905               // 'count' EOF
       && lk != 12906               // 'decimal-format' EOF
       && lk != 12908               // 'declare' EOF
       && lk != 12909               // 'default' EOF
       && lk != 12910               // 'delete' EOF
       && lk != 12911               // 'descendant' EOF
       && lk != 12912               // 'descendant-or-self' EOF
       && lk != 12913               // 'descending' EOF
       && lk != 12918               // 'div' EOF
       && lk != 12919               // 'document' EOF
       && lk != 12920               // 'document-node' EOF
       && lk != 12921               // 'element' EOF
       && lk != 12922               // 'else' EOF
       && lk != 12923               // 'empty' EOF
       && lk != 12924               // 'empty-sequence' EOF
       && lk != 12925               // 'encoding' EOF
       && lk != 12926               // 'end' EOF
       && lk != 12928               // 'eq' EOF
       && lk != 12929               // 'every' EOF
       && lk != 12931               // 'except' EOF
       && lk != 12932               // 'exit' EOF
       && lk != 12933               // 'external' EOF
       && lk != 12934               // 'first' EOF
       && lk != 12935               // 'following' EOF
       && lk != 12936               // 'following-sibling' EOF
       && lk != 12937               // 'for' EOF
       && lk != 12941               // 'ft-option' EOF
       && lk != 12945               // 'function' EOF
       && lk != 12946               // 'ge' EOF
       && lk != 12948               // 'group' EOF
       && lk != 12950               // 'gt' EOF
       && lk != 12951               // 'idiv' EOF
       && lk != 12952               // 'if' EOF
       && lk != 12953               // 'import' EOF
       && lk != 12954               // 'in' EOF
       && lk != 12955               // 'index' EOF
       && lk != 12959               // 'insert' EOF
       && lk != 12960               // 'instance' EOF
       && lk != 12961               // 'integrity' EOF
       && lk != 12962               // 'intersect' EOF
       && lk != 12963               // 'into' EOF
       && lk != 12964               // 'is' EOF
       && lk != 12965               // 'item' EOF
       && lk != 12966               // 'json' EOF
       && lk != 12967               // 'json-item' EOF
       && lk != 12970               // 'last' EOF
       && lk != 12971               // 'lax' EOF
       && lk != 12972               // 'le' EOF
       && lk != 12974               // 'let' EOF
       && lk != 12976               // 'loop' EOF
       && lk != 12978               // 'lt' EOF
       && lk != 12980               // 'mod' EOF
       && lk != 12981               // 'modify' EOF
       && lk != 12982               // 'module' EOF
       && lk != 12984               // 'namespace' EOF
       && lk != 12985               // 'namespace-node' EOF
       && lk != 12986               // 'ne' EOF
       && lk != 12991               // 'node' EOF
       && lk != 12992               // 'nodes' EOF
       && lk != 12994               // 'object' EOF
       && lk != 12998               // 'only' EOF
       && lk != 12999               // 'option' EOF
       && lk != 13000               // 'or' EOF
       && lk != 13001               // 'order' EOF
       && lk != 13002               // 'ordered' EOF
       && lk != 13003               // 'ordering' EOF
       && lk != 13006               // 'parent' EOF
       && lk != 13012               // 'preceding' EOF
       && lk != 13013               // 'preceding-sibling' EOF
       && lk != 13016               // 'processing-instruction' EOF
       && lk != 13018               // 'rename' EOF
       && lk != 13019               // 'replace' EOF
       && lk != 13020               // 'return' EOF
       && lk != 13021               // 'returning' EOF
       && lk != 13022               // 'revalidation' EOF
       && lk != 13024               // 'satisfies' EOF
       && lk != 13025               // 'schema' EOF
       && lk != 13026               // 'schema-attribute' EOF
       && lk != 13027               // 'schema-element' EOF
       && lk != 13028               // 'score' EOF
       && lk != 13029               // 'self' EOF
       && lk != 13034               // 'sliding' EOF
       && lk != 13035               // 'some' EOF
       && lk != 13036               // 'stable' EOF
       && lk != 13037               // 'start' EOF
       && lk != 13040               // 'strict' EOF
       && lk != 13042               // 'structured-item' EOF
       && lk != 13043               // 'switch' EOF
       && lk != 13044               // 'text' EOF
       && lk != 13048               // 'to' EOF
       && lk != 13049               // 'treat' EOF
       && lk != 13050               // 'try' EOF
       && lk != 13051               // 'tumbling' EOF
       && lk != 13052               // 'type' EOF
       && lk != 13053               // 'typeswitch' EOF
       && lk != 13054               // 'union' EOF
       && lk != 13056               // 'unordered' EOF
       && lk != 13057               // 'updating' EOF
       && lk != 13060               // 'validate' EOF
       && lk != 13061               // 'value' EOF
       && lk != 13062               // 'variable' EOF
       && lk != 13063               // 'version' EOF
       && lk != 13066               // 'where' EOF
       && lk != 13067               // 'while' EOF
       && lk != 13070               // 'with' EOF
       && lk != 13074               // 'xquery' EOF
       && lk != 16134               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21062               // 'after' ','
       && lk != 21064               // 'allowing' ','
       && lk != 21065               // 'ancestor' ','
       && lk != 21066               // 'ancestor-or-self' ','
       && lk != 21067               // 'and' ','
       && lk != 21069               // 'append' ','
       && lk != 21070               // 'array' ','
       && lk != 21071               // 'as' ','
       && lk != 21072               // 'ascending' ','
       && lk != 21073               // 'at' ','
       && lk != 21074               // 'attribute' ','
       && lk != 21075               // 'base-uri' ','
       && lk != 21076               // 'before' ','
       && lk != 21077               // 'boundary-space' ','
       && lk != 21078               // 'break' ','
       && lk != 21080               // 'case' ','
       && lk != 21081               // 'cast' ','
       && lk != 21082               // 'castable' ','
       && lk != 21083               // 'catch' ','
       && lk != 21085               // 'child' ','
       && lk != 21086               // 'collation' ','
       && lk != 21088               // 'comment' ','
       && lk != 21089               // 'constraint' ','
       && lk != 21090               // 'construction' ','
       && lk != 21093               // 'context' ','
       && lk != 21094               // 'continue' ','
       && lk != 21095               // 'copy' ','
       && lk != 21096               // 'copy-namespaces' ','
       && lk != 21097               // 'count' ','
       && lk != 21098               // 'decimal-format' ','
       && lk != 21100               // 'declare' ','
       && lk != 21101               // 'default' ','
       && lk != 21102               // 'delete' ','
       && lk != 21103               // 'descendant' ','
       && lk != 21104               // 'descendant-or-self' ','
       && lk != 21105               // 'descending' ','
       && lk != 21110               // 'div' ','
       && lk != 21111               // 'document' ','
       && lk != 21112               // 'document-node' ','
       && lk != 21113               // 'element' ','
       && lk != 21114               // 'else' ','
       && lk != 21115               // 'empty' ','
       && lk != 21116               // 'empty-sequence' ','
       && lk != 21117               // 'encoding' ','
       && lk != 21118               // 'end' ','
       && lk != 21120               // 'eq' ','
       && lk != 21121               // 'every' ','
       && lk != 21123               // 'except' ','
       && lk != 21124               // 'exit' ','
       && lk != 21125               // 'external' ','
       && lk != 21126               // 'first' ','
       && lk != 21127               // 'following' ','
       && lk != 21128               // 'following-sibling' ','
       && lk != 21129               // 'for' ','
       && lk != 21133               // 'ft-option' ','
       && lk != 21137               // 'function' ','
       && lk != 21138               // 'ge' ','
       && lk != 21140               // 'group' ','
       && lk != 21142               // 'gt' ','
       && lk != 21143               // 'idiv' ','
       && lk != 21144               // 'if' ','
       && lk != 21145               // 'import' ','
       && lk != 21146               // 'in' ','
       && lk != 21147               // 'index' ','
       && lk != 21151               // 'insert' ','
       && lk != 21152               // 'instance' ','
       && lk != 21153               // 'integrity' ','
       && lk != 21154               // 'intersect' ','
       && lk != 21155               // 'into' ','
       && lk != 21156               // 'is' ','
       && lk != 21157               // 'item' ','
       && lk != 21158               // 'json' ','
       && lk != 21159               // 'json-item' ','
       && lk != 21162               // 'last' ','
       && lk != 21163               // 'lax' ','
       && lk != 21164               // 'le' ','
       && lk != 21166               // 'let' ','
       && lk != 21168               // 'loop' ','
       && lk != 21170               // 'lt' ','
       && lk != 21172               // 'mod' ','
       && lk != 21173               // 'modify' ','
       && lk != 21174               // 'module' ','
       && lk != 21176               // 'namespace' ','
       && lk != 21177               // 'namespace-node' ','
       && lk != 21178               // 'ne' ','
       && lk != 21183               // 'node' ','
       && lk != 21184               // 'nodes' ','
       && lk != 21186               // 'object' ','
       && lk != 21190               // 'only' ','
       && lk != 21191               // 'option' ','
       && lk != 21192               // 'or' ','
       && lk != 21193               // 'order' ','
       && lk != 21194               // 'ordered' ','
       && lk != 21195               // 'ordering' ','
       && lk != 21198               // 'parent' ','
       && lk != 21204               // 'preceding' ','
       && lk != 21205               // 'preceding-sibling' ','
       && lk != 21208               // 'processing-instruction' ','
       && lk != 21210               // 'rename' ','
       && lk != 21211               // 'replace' ','
       && lk != 21212               // 'return' ','
       && lk != 21213               // 'returning' ','
       && lk != 21214               // 'revalidation' ','
       && lk != 21216               // 'satisfies' ','
       && lk != 21217               // 'schema' ','
       && lk != 21218               // 'schema-attribute' ','
       && lk != 21219               // 'schema-element' ','
       && lk != 21220               // 'score' ','
       && lk != 21221               // 'self' ','
       && lk != 21226               // 'sliding' ','
       && lk != 21227               // 'some' ','
       && lk != 21228               // 'stable' ','
       && lk != 21229               // 'start' ','
       && lk != 21232               // 'strict' ','
       && lk != 21234               // 'structured-item' ','
       && lk != 21235               // 'switch' ','
       && lk != 21236               // 'text' ','
       && lk != 21240               // 'to' ','
       && lk != 21241               // 'treat' ','
       && lk != 21242               // 'try' ','
       && lk != 21243               // 'tumbling' ','
       && lk != 21244               // 'type' ','
       && lk != 21245               // 'typeswitch' ','
       && lk != 21246               // 'union' ','
       && lk != 21248               // 'unordered' ','
       && lk != 21249               // 'updating' ','
       && lk != 21252               // 'validate' ','
       && lk != 21253               // 'value' ','
       && lk != 21254               // 'variable' ','
       && lk != 21255               // 'version' ','
       && lk != 21258               // 'where' ','
       && lk != 21259               // 'while' ','
       && lk != 21262               // 'with' ','
       && lk != 21266               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27316               // 'mod' ';'
       && lk != 27317               // 'modify' ';'
       && lk != 27318               // 'module' ';'
       && lk != 27320               // 'namespace' ';'
       && lk != 27321               // 'namespace-node' ';'
       && lk != 27322               // 'ne' ';'
       && lk != 27327               // 'node' ';'
       && lk != 27328               // 'nodes' ';'
       && lk != 27330               // 'object' ';'
       && lk != 27334               // 'only' ';'
       && lk != 27335               // 'option' ';'
       && lk != 27336               // 'or' ';'
       && lk != 27337               // 'order' ';'
       && lk != 27338               // 'ordered' ';'
       && lk != 27339               // 'ordering' ';'
       && lk != 27342               // 'parent' ';'
       && lk != 27348               // 'preceding' ';'
       && lk != 27349               // 'preceding-sibling' ';'
       && lk != 27352               // 'processing-instruction' ';'
       && lk != 27354               // 'rename' ';'
       && lk != 27355               // 'replace' ';'
       && lk != 27356               // 'return' ';'
       && lk != 27357               // 'returning' ';'
       && lk != 27358               // 'revalidation' ';'
       && lk != 27360               // 'satisfies' ';'
       && lk != 27361               // 'schema' ';'
       && lk != 27362               // 'schema-attribute' ';'
       && lk != 27363               // 'schema-element' ';'
       && lk != 27364               // 'score' ';'
       && lk != 27365               // 'self' ';'
       && lk != 27370               // 'sliding' ';'
       && lk != 27371               // 'some' ';'
       && lk != 27372               // 'stable' ';'
       && lk != 27373               // 'start' ';'
       && lk != 27376               // 'strict' ';'
       && lk != 27378               // 'structured-item' ';'
       && lk != 27379               // 'switch' ';'
       && lk != 27380               // 'text' ';'
       && lk != 27384               // 'to' ';'
       && lk != 27385               // 'treat' ';'
       && lk != 27386               // 'try' ';'
       && lk != 27387               // 'tumbling' ';'
       && lk != 27388               // 'type' ';'
       && lk != 27389               // 'typeswitch' ';'
       && lk != 27390               // 'union' ';'
       && lk != 27392               // 'unordered' ';'
       && lk != 27393               // 'updating' ';'
       && lk != 27396               // 'validate' ';'
       && lk != 27397               // 'value' ';'
       && lk != 27398               // 'variable' ';'
       && lk != 27399               // 'version' ';'
       && lk != 27402               // 'where' ';'
       && lk != 27403               // 'while' ';'
       && lk != 27406               // 'with' ';'
       && lk != 27410               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113284              // 'exit' 'returning'
       && lk != 144389              // Wildcard '}'
       && lk != 144390              // EQName^Token '}'
       && lk != 144392              // IntegerLiteral '}'
       && lk != 144393              // DecimalLiteral '}'
       && lk != 144394              // DoubleLiteral '}'
       && lk != 144395              // StringLiteral '}'
       && lk != 144428              // '.' '}'
       && lk != 144429              // '..' '}'
       && lk != 144430              // '/' '}'
       && lk != 144454              // 'after' '}'
       && lk != 144456              // 'allowing' '}'
       && lk != 144457              // 'ancestor' '}'
       && lk != 144458              // 'ancestor-or-self' '}'
       && lk != 144459              // 'and' '}'
       && lk != 144461              // 'append' '}'
       && lk != 144462              // 'array' '}'
       && lk != 144463              // 'as' '}'
       && lk != 144464              // 'ascending' '}'
       && lk != 144465              // 'at' '}'
       && lk != 144466              // 'attribute' '}'
       && lk != 144467              // 'base-uri' '}'
       && lk != 144468              // 'before' '}'
       && lk != 144469              // 'boundary-space' '}'
       && lk != 144470              // 'break' '}'
       && lk != 144472              // 'case' '}'
       && lk != 144473              // 'cast' '}'
       && lk != 144474              // 'castable' '}'
       && lk != 144475              // 'catch' '}'
       && lk != 144477              // 'child' '}'
       && lk != 144478              // 'collation' '}'
       && lk != 144480              // 'comment' '}'
       && lk != 144481              // 'constraint' '}'
       && lk != 144482              // 'construction' '}'
       && lk != 144485              // 'context' '}'
       && lk != 144486              // 'continue' '}'
       && lk != 144487              // 'copy' '}'
       && lk != 144488              // 'copy-namespaces' '}'
       && lk != 144489              // 'count' '}'
       && lk != 144490              // 'decimal-format' '}'
       && lk != 144492              // 'declare' '}'
       && lk != 144493              // 'default' '}'
       && lk != 144494              // 'delete' '}'
       && lk != 144495              // 'descendant' '}'
       && lk != 144496              // 'descendant-or-self' '}'
       && lk != 144497              // 'descending' '}'
       && lk != 144502              // 'div' '}'
       && lk != 144503              // 'document' '}'
       && lk != 144504              // 'document-node' '}'
       && lk != 144505              // 'element' '}'
       && lk != 144506              // 'else' '}'
       && lk != 144507              // 'empty' '}'
       && lk != 144508              // 'empty-sequence' '}'
       && lk != 144509              // 'encoding' '}'
       && lk != 144510              // 'end' '}'
       && lk != 144512              // 'eq' '}'
       && lk != 144513              // 'every' '}'
       && lk != 144515              // 'except' '}'
       && lk != 144516              // 'exit' '}'
       && lk != 144517              // 'external' '}'
       && lk != 144518              // 'first' '}'
       && lk != 144519              // 'following' '}'
       && lk != 144520              // 'following-sibling' '}'
       && lk != 144521              // 'for' '}'
       && lk != 144525              // 'ft-option' '}'
       && lk != 144529              // 'function' '}'
       && lk != 144530              // 'ge' '}'
       && lk != 144532              // 'group' '}'
       && lk != 144534              // 'gt' '}'
       && lk != 144535              // 'idiv' '}'
       && lk != 144536              // 'if' '}'
       && lk != 144537              // 'import' '}'
       && lk != 144538              // 'in' '}'
       && lk != 144539              // 'index' '}'
       && lk != 144543              // 'insert' '}'
       && lk != 144544              // 'instance' '}'
       && lk != 144545              // 'integrity' '}'
       && lk != 144546              // 'intersect' '}'
       && lk != 144547              // 'into' '}'
       && lk != 144548              // 'is' '}'
       && lk != 144549              // 'item' '}'
       && lk != 144550              // 'json' '}'
       && lk != 144551              // 'json-item' '}'
       && lk != 144554              // 'last' '}'
       && lk != 144555              // 'lax' '}'
       && lk != 144556              // 'le' '}'
       && lk != 144558              // 'let' '}'
       && lk != 144560              // 'loop' '}'
       && lk != 144562              // 'lt' '}'
       && lk != 144564              // 'mod' '}'
       && lk != 144565              // 'modify' '}'
       && lk != 144566              // 'module' '}'
       && lk != 144568              // 'namespace' '}'
       && lk != 144569              // 'namespace-node' '}'
       && lk != 144570              // 'ne' '}'
       && lk != 144575              // 'node' '}'
       && lk != 144576              // 'nodes' '}'
       && lk != 144578              // 'object' '}'
       && lk != 144582              // 'only' '}'
       && lk != 144583              // 'option' '}'
       && lk != 144584              // 'or' '}'
       && lk != 144585              // 'order' '}'
       && lk != 144586              // 'ordered' '}'
       && lk != 144587              // 'ordering' '}'
       && lk != 144590              // 'parent' '}'
       && lk != 144596              // 'preceding' '}'
       && lk != 144597              // 'preceding-sibling' '}'
       && lk != 144600              // 'processing-instruction' '}'
       && lk != 144602              // 'rename' '}'
       && lk != 144603              // 'replace' '}'
       && lk != 144604              // 'return' '}'
       && lk != 144605              // 'returning' '}'
       && lk != 144606              // 'revalidation' '}'
       && lk != 144608              // 'satisfies' '}'
       && lk != 144609              // 'schema' '}'
       && lk != 144610              // 'schema-attribute' '}'
       && lk != 144611              // 'schema-element' '}'
       && lk != 144612              // 'score' '}'
       && lk != 144613              // 'self' '}'
       && lk != 144618              // 'sliding' '}'
       && lk != 144619              // 'some' '}'
       && lk != 144620              // 'stable' '}'
       && lk != 144621              // 'start' '}'
       && lk != 144624              // 'strict' '}'
       && lk != 144626              // 'structured-item' '}'
       && lk != 144627              // 'switch' '}'
       && lk != 144628              // 'text' '}'
       && lk != 144632              // 'to' '}'
       && lk != 144633              // 'treat' '}'
       && lk != 144634              // 'try' '}'
       && lk != 144635              // 'tumbling' '}'
       && lk != 144636              // 'type' '}'
       && lk != 144637              // 'typeswitch' '}'
       && lk != 144638              // 'union' '}'
       && lk != 144640              // 'unordered' '}'
       && lk != 144641              // 'updating' '}'
       && lk != 144644              // 'validate' '}'
       && lk != 144645              // 'value' '}'
       && lk != 144646              // 'variable' '}'
       && lk != 144647              // 'version' '}'
       && lk != 144650              // 'where' '}'
       && lk != 144651              // 'while' '}'
       && lk != 144654              // 'with' '}'
       && lk != 144658)             // 'xquery' '}'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(6, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(6, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 53                  // ';'
       && lk != 16134               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27316               // 'mod' ';'
       && lk != 27317               // 'modify' ';'
       && lk != 27318               // 'module' ';'
       && lk != 27320               // 'namespace' ';'
       && lk != 27321               // 'namespace-node' ';'
       && lk != 27322               // 'ne' ';'
       && lk != 27327               // 'node' ';'
       && lk != 27328               // 'nodes' ';'
       && lk != 27330               // 'object' ';'
       && lk != 27334               // 'only' ';'
       && lk != 27335               // 'option' ';'
       && lk != 27336               // 'or' ';'
       && lk != 27337               // 'order' ';'
       && lk != 27338               // 'ordered' ';'
       && lk != 27339               // 'ordering' ';'
       && lk != 27342               // 'parent' ';'
       && lk != 27348               // 'preceding' ';'
       && lk != 27349               // 'preceding-sibling' ';'
       && lk != 27352               // 'processing-instruction' ';'
       && lk != 27354               // 'rename' ';'
       && lk != 27355               // 'replace' ';'
       && lk != 27356               // 'return' ';'
       && lk != 27357               // 'returning' ';'
       && lk != 27358               // 'revalidation' ';'
       && lk != 27360               // 'satisfies' ';'
       && lk != 27361               // 'schema' ';'
       && lk != 27362               // 'schema-attribute' ';'
       && lk != 27363               // 'schema-element' ';'
       && lk != 27364               // 'score' ';'
       && lk != 27365               // 'self' ';'
       && lk != 27370               // 'sliding' ';'
       && lk != 27371               // 'some' ';'
       && lk != 27372               // 'stable' ';'
       && lk != 27373               // 'start' ';'
       && lk != 27376               // 'strict' ';'
       && lk != 27378               // 'structured-item' ';'
       && lk != 27379               // 'switch' ';'
       && lk != 27380               // 'text' ';'
       && lk != 27384               // 'to' ';'
       && lk != 27385               // 'treat' ';'
       && lk != 27386               // 'try' ';'
       && lk != 27387               // 'tumbling' ';'
       && lk != 27388               // 'type' ';'
       && lk != 27389               // 'typeswitch' ';'
       && lk != 27390               // 'union' ';'
       && lk != 27392               // 'unordered' ';'
       && lk != 27393               // 'updating' ';'
       && lk != 27396               // 'validate' ';'
       && lk != 27397               // 'value' ';'
       && lk != 27398               // 'variable' ';'
       && lk != 27399               // 'version' ';'
       && lk != 27402               // 'where' ';'
       && lk != 27403               // 'while' ';'
       && lk != 27406               // 'with' ';'
       && lk != 27410               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113284)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 25                    // EOF
     && l1 != 282)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 25                    // EOF
     && l1 != 282)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 132:                       // 'exit'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
      break;
    case 137:                       // 'for'
      lookahead2W(196);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
      break;
    case 174:                       // 'let'
      lookahead2W(193);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
      break;
    case 250:                       // 'try'
      lookahead2W(190);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
      break;
    case 262:                       // 'variable'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
      break;
    case 276:                       // '{'
      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 86:                        // 'break'
    case 102:                       // 'continue'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
      break;
    case 152:                       // 'if'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
    case 267:                       // 'while'
      lookahead2W(185);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
      break;
    default:
      lk = l1;
    }
    if (lk == 2836                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3348                  // '{' EQName^Token
     || lk == 4372                  // '{' IntegerLiteral
     || lk == 4884                  // '{' DecimalLiteral
     || lk == 5396                  // '{' DoubleLiteral
     || lk == 5908                  // '{' StringLiteral
     || lk == 16148                 // '{' '$'
     || lk == 16660                 // '{' '%'
     || lk == 17675                 // 'while' '('
     || lk == 17684                 // '{' '('
     || lk == 18196                 // '{' '(#'
     || lk == 20756                 // '{' '+'
     || lk == 21780                 // '{' '-'
     || lk == 22804                 // '{' '.'
     || lk == 23316                 // '{' '..'
     || lk == 23828                 // '{' '/'
     || lk == 24340                 // '{' '//'
     || lk == 27412                 // '{' ';'
     || lk == 27924                 // '{' '<'
     || lk == 28436                 // '{' '<!--'
     || lk == 30484                 // '{' '<?'
     || lk == 34068                 // '{' '@'
     || lk == 35092                 // '{' '['
     || lk == 35871                 // '$' 'after'
     || lk == 35872                 // '%' 'after'
     || lk == 36116                 // '{' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 36896                 // '%' 'allowing'
     || lk == 37140                 // '{' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37408                 // '%' 'ancestor'
     || lk == 37652                 // '{' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 37920                 // '%' 'ancestor-or-self'
     || lk == 38164                 // '{' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 38432                 // '%' 'and'
     || lk == 38676                 // '{' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39456                 // '%' 'append'
     || lk == 39700                 // '{' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 39968                 // '%' 'array'
     || lk == 40212                 // '{' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40480                 // '%' 'as'
     || lk == 40724                 // '{' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 40992                 // '%' 'ascending'
     || lk == 41236                 // '{' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 41504                 // '%' 'at'
     || lk == 41748                 // '{' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42016                 // '%' 'attribute'
     || lk == 42260                 // '{' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 42528                 // '%' 'base-uri'
     || lk == 42772                 // '{' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43040                 // '%' 'before'
     || lk == 43284                 // '{' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 43552                 // '%' 'boundary-space'
     || lk == 43796                 // '{' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 44064                 // '%' 'break'
     || lk == 44308                 // '{' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45088                 // '%' 'case'
     || lk == 45332                 // '{' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 45600                 // '%' 'cast'
     || lk == 45844                 // '{' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46112                 // '%' 'castable'
     || lk == 46356                 // '{' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 46624                 // '%' 'catch'
     || lk == 46868                 // '{' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 47648                 // '%' 'child'
     || lk == 47892                 // '{' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 48160                 // '%' 'collation'
     || lk == 48404                 // '{' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49184                 // '%' 'comment'
     || lk == 49428                 // '{' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 49696                 // '%' 'constraint'
     || lk == 49940                 // '{' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 50208                 // '%' 'construction'
     || lk == 50452                 // '{' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 51744                 // '%' 'context'
     || lk == 51988                 // '{' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52256                 // '%' 'continue'
     || lk == 52500                 // '{' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 52768                 // '%' 'copy'
     || lk == 53012                 // '{' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53280                 // '%' 'copy-namespaces'
     || lk == 53524                 // '{' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 53792                 // '%' 'count'
     || lk == 54036                 // '{' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 54304                 // '%' 'decimal-format'
     || lk == 54548                 // '{' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55328                 // '%' 'declare'
     || lk == 55572                 // '{' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 55840                 // '%' 'default'
     || lk == 56084                 // '{' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56352                 // '%' 'delete'
     || lk == 56596                 // '{' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 56864                 // '%' 'descendant'
     || lk == 57108                 // '{' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57376                 // '%' 'descendant-or-self'
     || lk == 57620                 // '{' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 57888                 // '%' 'descending'
     || lk == 58132                 // '{' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60448                 // '%' 'div'
     || lk == 60692                 // '{' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 60960                 // '%' 'document'
     || lk == 61204                 // '{' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61472                 // '%' 'document-node'
     || lk == 61716                 // '{' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 61984                 // '%' 'element'
     || lk == 62228                 // '{' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 62496                 // '%' 'else'
     || lk == 62740                 // '{' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63008                 // '%' 'empty'
     || lk == 63252                 // '{' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 63520                 // '%' 'empty-sequence'
     || lk == 63764                 // '{' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64032                 // '%' 'encoding'
     || lk == 64276                 // '{' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 64544                 // '%' 'end'
     || lk == 64788                 // '{' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 65568                 // '%' 'eq'
     || lk == 65812                 // '{' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 66080                 // '%' 'every'
     || lk == 66324                 // '{' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67104                 // '%' 'except'
     || lk == 67348                 // '{' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 67616                 // '%' 'exit'
     || lk == 67860                 // '{' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68128                 // '%' 'external'
     || lk == 68372                 // '{' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 68640                 // '%' 'first'
     || lk == 68884                 // '{' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69152                 // '%' 'following'
     || lk == 69396                 // '{' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 69664                 // '%' 'following-sibling'
     || lk == 69908                 // '{' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 70176                 // '%' 'for'
     || lk == 70420                 // '{' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 72224                 // '%' 'ft-option'
     || lk == 72468                 // '{' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74272                 // '%' 'function'
     || lk == 74516                 // '{' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 74784                 // '%' 'ge'
     || lk == 75028                 // '{' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 75808                 // '%' 'group'
     || lk == 76052                 // '{' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 76832                 // '%' 'gt'
     || lk == 77076                 // '{' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77344                 // '%' 'idiv'
     || lk == 77588                 // '{' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 77856                 // '%' 'if'
     || lk == 78100                 // '{' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78368                 // '%' 'import'
     || lk == 78612                 // '{' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 78880                 // '%' 'in'
     || lk == 79124                 // '{' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 79392                 // '%' 'index'
     || lk == 79636                 // '{' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81440                 // '%' 'insert'
     || lk == 81684                 // '{' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 81952                 // '%' 'instance'
     || lk == 82196                 // '{' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82464                 // '%' 'integrity'
     || lk == 82708                 // '{' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 82976                 // '%' 'intersect'
     || lk == 83220                 // '{' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83488                 // '%' 'into'
     || lk == 83732                 // '{' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84000                 // '%' 'is'
     || lk == 84244                 // '{' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 84512                 // '%' 'item'
     || lk == 84756                 // '{' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85024                 // '%' 'json'
     || lk == 85268                 // '{' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 85536                 // '%' 'json-item'
     || lk == 85780                 // '{' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87072                 // '%' 'last'
     || lk == 87316                 // '{' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 87584                 // '%' 'lax'
     || lk == 87828                 // '{' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 88096                 // '%' 'le'
     || lk == 88340                 // '{' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 89120                 // '%' 'let'
     || lk == 89364                 // '{' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 90144                 // '%' 'loop'
     || lk == 90388                 // '{' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91168                 // '%' 'lt'
     || lk == 91412                 // '{' 'lt'
     || lk == 92191                 // '$' 'mod'
     || lk == 92192                 // '%' 'mod'
     || lk == 92436                 // '{' 'mod'
     || lk == 92703                 // '$' 'modify'
     || lk == 92704                 // '%' 'modify'
     || lk == 92948                 // '{' 'modify'
     || lk == 93215                 // '$' 'module'
     || lk == 93216                 // '%' 'module'
     || lk == 93460                 // '{' 'module'
     || lk == 94239                 // '$' 'namespace'
     || lk == 94240                 // '%' 'namespace'
     || lk == 94484                 // '{' 'namespace'
     || lk == 94751                 // '$' 'namespace-node'
     || lk == 94752                 // '%' 'namespace-node'
     || lk == 94996                 // '{' 'namespace-node'
     || lk == 95263                 // '$' 'ne'
     || lk == 95264                 // '%' 'ne'
     || lk == 95508                 // '{' 'ne'
     || lk == 97823                 // '$' 'node'
     || lk == 97824                 // '%' 'node'
     || lk == 98068                 // '{' 'node'
     || lk == 98335                 // '$' 'nodes'
     || lk == 98336                 // '%' 'nodes'
     || lk == 98580                 // '{' 'nodes'
     || lk == 99359                 // '$' 'object'
     || lk == 99360                 // '%' 'object'
     || lk == 99604                 // '{' 'object'
     || lk == 101407                // '$' 'only'
     || lk == 101408                // '%' 'only'
     || lk == 101652                // '{' 'only'
     || lk == 101919                // '$' 'option'
     || lk == 101920                // '%' 'option'
     || lk == 102164                // '{' 'option'
     || lk == 102431                // '$' 'or'
     || lk == 102432                // '%' 'or'
     || lk == 102676                // '{' 'or'
     || lk == 102943                // '$' 'order'
     || lk == 102944                // '%' 'order'
     || lk == 103188                // '{' 'order'
     || lk == 103455                // '$' 'ordered'
     || lk == 103456                // '%' 'ordered'
     || lk == 103700                // '{' 'ordered'
     || lk == 103967                // '$' 'ordering'
     || lk == 103968                // '%' 'ordering'
     || lk == 104212                // '{' 'ordering'
     || lk == 105503                // '$' 'parent'
     || lk == 105504                // '%' 'parent'
     || lk == 105748                // '{' 'parent'
     || lk == 108575                // '$' 'preceding'
     || lk == 108576                // '%' 'preceding'
     || lk == 108820                // '{' 'preceding'
     || lk == 109087                // '$' 'preceding-sibling'
     || lk == 109088                // '%' 'preceding-sibling'
     || lk == 109332                // '{' 'preceding-sibling'
     || lk == 110623                // '$' 'processing-instruction'
     || lk == 110624                // '%' 'processing-instruction'
     || lk == 110868                // '{' 'processing-instruction'
     || lk == 111647                // '$' 'rename'
     || lk == 111648                // '%' 'rename'
     || lk == 111892                // '{' 'rename'
     || lk == 112159                // '$' 'replace'
     || lk == 112160                // '%' 'replace'
     || lk == 112404                // '{' 'replace'
     || lk == 112671                // '$' 'return'
     || lk == 112672                // '%' 'return'
     || lk == 112916                // '{' 'return'
     || lk == 113183                // '$' 'returning'
     || lk == 113184                // '%' 'returning'
     || lk == 113428                // '{' 'returning'
     || lk == 113695                // '$' 'revalidation'
     || lk == 113696                // '%' 'revalidation'
     || lk == 113940                // '{' 'revalidation'
     || lk == 114719                // '$' 'satisfies'
     || lk == 114720                // '%' 'satisfies'
     || lk == 114964                // '{' 'satisfies'
     || lk == 115231                // '$' 'schema'
     || lk == 115232                // '%' 'schema'
     || lk == 115476                // '{' 'schema'
     || lk == 115743                // '$' 'schema-attribute'
     || lk == 115744                // '%' 'schema-attribute'
     || lk == 115988                // '{' 'schema-attribute'
     || lk == 116255                // '$' 'schema-element'
     || lk == 116256                // '%' 'schema-element'
     || lk == 116500                // '{' 'schema-element'
     || lk == 116767                // '$' 'score'
     || lk == 116768                // '%' 'score'
     || lk == 117012                // '{' 'score'
     || lk == 117279                // '$' 'self'
     || lk == 117280                // '%' 'self'
     || lk == 117524                // '{' 'self'
     || lk == 119839                // '$' 'sliding'
     || lk == 119840                // '%' 'sliding'
     || lk == 120084                // '{' 'sliding'
     || lk == 120351                // '$' 'some'
     || lk == 120352                // '%' 'some'
     || lk == 120596                // '{' 'some'
     || lk == 120863                // '$' 'stable'
     || lk == 120864                // '%' 'stable'
     || lk == 121108                // '{' 'stable'
     || lk == 121375                // '$' 'start'
     || lk == 121376                // '%' 'start'
     || lk == 121620                // '{' 'start'
     || lk == 122911                // '$' 'strict'
     || lk == 122912                // '%' 'strict'
     || lk == 123156                // '{' 'strict'
     || lk == 123935                // '$' 'structured-item'
     || lk == 123936                // '%' 'structured-item'
     || lk == 124180                // '{' 'structured-item'
     || lk == 124447                // '$' 'switch'
     || lk == 124448                // '%' 'switch'
     || lk == 124692                // '{' 'switch'
     || lk == 124959                // '$' 'text'
     || lk == 124960                // '%' 'text'
     || lk == 125204                // '{' 'text'
     || lk == 127007                // '$' 'to'
     || lk == 127008                // '%' 'to'
     || lk == 127252                // '{' 'to'
     || lk == 127519                // '$' 'treat'
     || lk == 127520                // '%' 'treat'
     || lk == 127764                // '{' 'treat'
     || lk == 128031                // '$' 'try'
     || lk == 128032                // '%' 'try'
     || lk == 128276                // '{' 'try'
     || lk == 128543                // '$' 'tumbling'
     || lk == 128544                // '%' 'tumbling'
     || lk == 128788                // '{' 'tumbling'
     || lk == 129055                // '$' 'type'
     || lk == 129056                // '%' 'type'
     || lk == 129300                // '{' 'type'
     || lk == 129567                // '$' 'typeswitch'
     || lk == 129568                // '%' 'typeswitch'
     || lk == 129812                // '{' 'typeswitch'
     || lk == 130079                // '$' 'union'
     || lk == 130080                // '%' 'union'
     || lk == 130324                // '{' 'union'
     || lk == 131103                // '$' 'unordered'
     || lk == 131104                // '%' 'unordered'
     || lk == 131348                // '{' 'unordered'
     || lk == 131615                // '$' 'updating'
     || lk == 131616                // '%' 'updating'
     || lk == 131860                // '{' 'updating'
     || lk == 133151                // '$' 'validate'
     || lk == 133152                // '%' 'validate'
     || lk == 133396                // '{' 'validate'
     || lk == 133663                // '$' 'value'
     || lk == 133664                // '%' 'value'
     || lk == 133908                // '{' 'value'
     || lk == 134175                // '$' 'variable'
     || lk == 134176                // '%' 'variable'
     || lk == 134420                // '{' 'variable'
     || lk == 134687                // '$' 'version'
     || lk == 134688                // '%' 'version'
     || lk == 134932                // '{' 'version'
     || lk == 136223                // '$' 'where'
     || lk == 136224                // '%' 'where'
     || lk == 136468                // '{' 'where'
     || lk == 136735                // '$' 'while'
     || lk == 136736                // '%' 'while'
     || lk == 136980                // '{' 'while'
     || lk == 138271                // '$' 'with'
     || lk == 138272                // '%' 'with'
     || lk == 138516                // '{' 'with'
     || lk == 140319                // '$' 'xquery'
     || lk == 140320                // '%' 'xquery'
     || lk == 140564                // '{' 'xquery'
     || lk == 141588                // '{' '{'
     || lk == 142612                // '{' '{|'
     || lk == 144660)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 90198:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 90214:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 113284:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 116910:                    // 'let' 'score'
    case 119945:                    // 'for' 'sliding'
    case 128649:                    // 'for' 'tumbling'
      parse_FLWORStatement();
      break;
    case 17560:                     // 'if' '('
      parse_IfStatement();
      break;
    case 17651:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 141562:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 17661:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16134:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    case 53:                        // ';'
      parse_VoidStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 132:                       // 'exit'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
      break;
    case 137:                       // 'for'
      lookahead2W(196);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
      break;
    case 174:                       // 'let'
      lookahead2W(193);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
      break;
    case 250:                       // 'try'
      lookahead2W(190);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
      break;
    case 262:                       // 'variable'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
      break;
    case 276:                       // '{'
      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 86:                        // 'break'
    case 102:                       // 'continue'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
      break;
    case 152:                       // 'if'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
    case 267:                       // 'while'
      lookahead2W(185);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
      break;
    default:
      lk = l1;
    }
    if (lk == 2836                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3348                  // '{' EQName^Token
     || lk == 4372                  // '{' IntegerLiteral
     || lk == 4884                  // '{' DecimalLiteral
     || lk == 5396                  // '{' DoubleLiteral
     || lk == 5908                  // '{' StringLiteral
     || lk == 16148                 // '{' '$'
     || lk == 16660                 // '{' '%'
     || lk == 17675                 // 'while' '('
     || lk == 17684                 // '{' '('
     || lk == 18196                 // '{' '(#'
     || lk == 20756                 // '{' '+'
     || lk == 21780                 // '{' '-'
     || lk == 22804                 // '{' '.'
     || lk == 23316                 // '{' '..'
     || lk == 23828                 // '{' '/'
     || lk == 24340                 // '{' '//'
     || lk == 27412                 // '{' ';'
     || lk == 27924                 // '{' '<'
     || lk == 28436                 // '{' '<!--'
     || lk == 30484                 // '{' '<?'
     || lk == 34068                 // '{' '@'
     || lk == 35092                 // '{' '['
     || lk == 35871                 // '$' 'after'
     || lk == 35872                 // '%' 'after'
     || lk == 36116                 // '{' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 36896                 // '%' 'allowing'
     || lk == 37140                 // '{' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37408                 // '%' 'ancestor'
     || lk == 37652                 // '{' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 37920                 // '%' 'ancestor-or-self'
     || lk == 38164                 // '{' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 38432                 // '%' 'and'
     || lk == 38676                 // '{' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39456                 // '%' 'append'
     || lk == 39700                 // '{' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 39968                 // '%' 'array'
     || lk == 40212                 // '{' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40480                 // '%' 'as'
     || lk == 40724                 // '{' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 40992                 // '%' 'ascending'
     || lk == 41236                 // '{' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 41504                 // '%' 'at'
     || lk == 41748                 // '{' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42016                 // '%' 'attribute'
     || lk == 42260                 // '{' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 42528                 // '%' 'base-uri'
     || lk == 42772                 // '{' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43040                 // '%' 'before'
     || lk == 43284                 // '{' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 43552                 // '%' 'boundary-space'
     || lk == 43796                 // '{' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 44064                 // '%' 'break'
     || lk == 44308                 // '{' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45088                 // '%' 'case'
     || lk == 45332                 // '{' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 45600                 // '%' 'cast'
     || lk == 45844                 // '{' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46112                 // '%' 'castable'
     || lk == 46356                 // '{' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 46624                 // '%' 'catch'
     || lk == 46868                 // '{' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 47648                 // '%' 'child'
     || lk == 47892                 // '{' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 48160                 // '%' 'collation'
     || lk == 48404                 // '{' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49184                 // '%' 'comment'
     || lk == 49428                 // '{' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 49696                 // '%' 'constraint'
     || lk == 49940                 // '{' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 50208                 // '%' 'construction'
     || lk == 50452                 // '{' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 51744                 // '%' 'context'
     || lk == 51988                 // '{' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52256                 // '%' 'continue'
     || lk == 52500                 // '{' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 52768                 // '%' 'copy'
     || lk == 53012                 // '{' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53280                 // '%' 'copy-namespaces'
     || lk == 53524                 // '{' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 53792                 // '%' 'count'
     || lk == 54036                 // '{' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 54304                 // '%' 'decimal-format'
     || lk == 54548                 // '{' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55328                 // '%' 'declare'
     || lk == 55572                 // '{' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 55840                 // '%' 'default'
     || lk == 56084                 // '{' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56352                 // '%' 'delete'
     || lk == 56596                 // '{' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 56864                 // '%' 'descendant'
     || lk == 57108                 // '{' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57376                 // '%' 'descendant-or-self'
     || lk == 57620                 // '{' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 57888                 // '%' 'descending'
     || lk == 58132                 // '{' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60448                 // '%' 'div'
     || lk == 60692                 // '{' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 60960                 // '%' 'document'
     || lk == 61204                 // '{' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61472                 // '%' 'document-node'
     || lk == 61716                 // '{' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 61984                 // '%' 'element'
     || lk == 62228                 // '{' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 62496                 // '%' 'else'
     || lk == 62740                 // '{' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63008                 // '%' 'empty'
     || lk == 63252                 // '{' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 63520                 // '%' 'empty-sequence'
     || lk == 63764                 // '{' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64032                 // '%' 'encoding'
     || lk == 64276                 // '{' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 64544                 // '%' 'end'
     || lk == 64788                 // '{' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 65568                 // '%' 'eq'
     || lk == 65812                 // '{' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 66080                 // '%' 'every'
     || lk == 66324                 // '{' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67104                 // '%' 'except'
     || lk == 67348                 // '{' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 67616                 // '%' 'exit'
     || lk == 67860                 // '{' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68128                 // '%' 'external'
     || lk == 68372                 // '{' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 68640                 // '%' 'first'
     || lk == 68884                 // '{' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69152                 // '%' 'following'
     || lk == 69396                 // '{' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 69664                 // '%' 'following-sibling'
     || lk == 69908                 // '{' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 70176                 // '%' 'for'
     || lk == 70420                 // '{' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 72224                 // '%' 'ft-option'
     || lk == 72468                 // '{' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74272                 // '%' 'function'
     || lk == 74516                 // '{' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 74784                 // '%' 'ge'
     || lk == 75028                 // '{' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 75808                 // '%' 'group'
     || lk == 76052                 // '{' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 76832                 // '%' 'gt'
     || lk == 77076                 // '{' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77344                 // '%' 'idiv'
     || lk == 77588                 // '{' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 77856                 // '%' 'if'
     || lk == 78100                 // '{' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78368                 // '%' 'import'
     || lk == 78612                 // '{' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 78880                 // '%' 'in'
     || lk == 79124                 // '{' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 79392                 // '%' 'index'
     || lk == 79636                 // '{' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81440                 // '%' 'insert'
     || lk == 81684                 // '{' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 81952                 // '%' 'instance'
     || lk == 82196                 // '{' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82464                 // '%' 'integrity'
     || lk == 82708                 // '{' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 82976                 // '%' 'intersect'
     || lk == 83220                 // '{' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83488                 // '%' 'into'
     || lk == 83732                 // '{' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84000                 // '%' 'is'
     || lk == 84244                 // '{' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 84512                 // '%' 'item'
     || lk == 84756                 // '{' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85024                 // '%' 'json'
     || lk == 85268                 // '{' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 85536                 // '%' 'json-item'
     || lk == 85780                 // '{' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87072                 // '%' 'last'
     || lk == 87316                 // '{' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 87584                 // '%' 'lax'
     || lk == 87828                 // '{' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 88096                 // '%' 'le'
     || lk == 88340                 // '{' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 89120                 // '%' 'let'
     || lk == 89364                 // '{' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 90144                 // '%' 'loop'
     || lk == 90388                 // '{' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91168                 // '%' 'lt'
     || lk == 91412                 // '{' 'lt'
     || lk == 92191                 // '$' 'mod'
     || lk == 92192                 // '%' 'mod'
     || lk == 92436                 // '{' 'mod'
     || lk == 92703                 // '$' 'modify'
     || lk == 92704                 // '%' 'modify'
     || lk == 92948                 // '{' 'modify'
     || lk == 93215                 // '$' 'module'
     || lk == 93216                 // '%' 'module'
     || lk == 93460                 // '{' 'module'
     || lk == 94239                 // '$' 'namespace'
     || lk == 94240                 // '%' 'namespace'
     || lk == 94484                 // '{' 'namespace'
     || lk == 94751                 // '$' 'namespace-node'
     || lk == 94752                 // '%' 'namespace-node'
     || lk == 94996                 // '{' 'namespace-node'
     || lk == 95263                 // '$' 'ne'
     || lk == 95264                 // '%' 'ne'
     || lk == 95508                 // '{' 'ne'
     || lk == 97823                 // '$' 'node'
     || lk == 97824                 // '%' 'node'
     || lk == 98068                 // '{' 'node'
     || lk == 98335                 // '$' 'nodes'
     || lk == 98336                 // '%' 'nodes'
     || lk == 98580                 // '{' 'nodes'
     || lk == 99359                 // '$' 'object'
     || lk == 99360                 // '%' 'object'
     || lk == 99604                 // '{' 'object'
     || lk == 101407                // '$' 'only'
     || lk == 101408                // '%' 'only'
     || lk == 101652                // '{' 'only'
     || lk == 101919                // '$' 'option'
     || lk == 101920                // '%' 'option'
     || lk == 102164                // '{' 'option'
     || lk == 102431                // '$' 'or'
     || lk == 102432                // '%' 'or'
     || lk == 102676                // '{' 'or'
     || lk == 102943                // '$' 'order'
     || lk == 102944                // '%' 'order'
     || lk == 103188                // '{' 'order'
     || lk == 103455                // '$' 'ordered'
     || lk == 103456                // '%' 'ordered'
     || lk == 103700                // '{' 'ordered'
     || lk == 103967                // '$' 'ordering'
     || lk == 103968                // '%' 'ordering'
     || lk == 104212                // '{' 'ordering'
     || lk == 105503                // '$' 'parent'
     || lk == 105504                // '%' 'parent'
     || lk == 105748                // '{' 'parent'
     || lk == 108575                // '$' 'preceding'
     || lk == 108576                // '%' 'preceding'
     || lk == 108820                // '{' 'preceding'
     || lk == 109087                // '$' 'preceding-sibling'
     || lk == 109088                // '%' 'preceding-sibling'
     || lk == 109332                // '{' 'preceding-sibling'
     || lk == 110623                // '$' 'processing-instruction'
     || lk == 110624                // '%' 'processing-instruction'
     || lk == 110868                // '{' 'processing-instruction'
     || lk == 111647                // '$' 'rename'
     || lk == 111648                // '%' 'rename'
     || lk == 111892                // '{' 'rename'
     || lk == 112159                // '$' 'replace'
     || lk == 112160                // '%' 'replace'
     || lk == 112404                // '{' 'replace'
     || lk == 112671                // '$' 'return'
     || lk == 112672                // '%' 'return'
     || lk == 112916                // '{' 'return'
     || lk == 113183                // '$' 'returning'
     || lk == 113184                // '%' 'returning'
     || lk == 113428                // '{' 'returning'
     || lk == 113695                // '$' 'revalidation'
     || lk == 113696                // '%' 'revalidation'
     || lk == 113940                // '{' 'revalidation'
     || lk == 114719                // '$' 'satisfies'
     || lk == 114720                // '%' 'satisfies'
     || lk == 114964                // '{' 'satisfies'
     || lk == 115231                // '$' 'schema'
     || lk == 115232                // '%' 'schema'
     || lk == 115476                // '{' 'schema'
     || lk == 115743                // '$' 'schema-attribute'
     || lk == 115744                // '%' 'schema-attribute'
     || lk == 115988                // '{' 'schema-attribute'
     || lk == 116255                // '$' 'schema-element'
     || lk == 116256                // '%' 'schema-element'
     || lk == 116500                // '{' 'schema-element'
     || lk == 116767                // '$' 'score'
     || lk == 116768                // '%' 'score'
     || lk == 117012                // '{' 'score'
     || lk == 117279                // '$' 'self'
     || lk == 117280                // '%' 'self'
     || lk == 117524                // '{' 'self'
     || lk == 119839                // '$' 'sliding'
     || lk == 119840                // '%' 'sliding'
     || lk == 120084                // '{' 'sliding'
     || lk == 120351                // '$' 'some'
     || lk == 120352                // '%' 'some'
     || lk == 120596                // '{' 'some'
     || lk == 120863                // '$' 'stable'
     || lk == 120864                // '%' 'stable'
     || lk == 121108                // '{' 'stable'
     || lk == 121375                // '$' 'start'
     || lk == 121376                // '%' 'start'
     || lk == 121620                // '{' 'start'
     || lk == 122911                // '$' 'strict'
     || lk == 122912                // '%' 'strict'
     || lk == 123156                // '{' 'strict'
     || lk == 123935                // '$' 'structured-item'
     || lk == 123936                // '%' 'structured-item'
     || lk == 124180                // '{' 'structured-item'
     || lk == 124447                // '$' 'switch'
     || lk == 124448                // '%' 'switch'
     || lk == 124692                // '{' 'switch'
     || lk == 124959                // '$' 'text'
     || lk == 124960                // '%' 'text'
     || lk == 125204                // '{' 'text'
     || lk == 127007                // '$' 'to'
     || lk == 127008                // '%' 'to'
     || lk == 127252                // '{' 'to'
     || lk == 127519                // '$' 'treat'
     || lk == 127520                // '%' 'treat'
     || lk == 127764                // '{' 'treat'
     || lk == 128031                // '$' 'try'
     || lk == 128032                // '%' 'try'
     || lk == 128276                // '{' 'try'
     || lk == 128543                // '$' 'tumbling'
     || lk == 128544                // '%' 'tumbling'
     || lk == 128788                // '{' 'tumbling'
     || lk == 129055                // '$' 'type'
     || lk == 129056                // '%' 'type'
     || lk == 129300                // '{' 'type'
     || lk == 129567                // '$' 'typeswitch'
     || lk == 129568                // '%' 'typeswitch'
     || lk == 129812                // '{' 'typeswitch'
     || lk == 130079                // '$' 'union'
     || lk == 130080                // '%' 'union'
     || lk == 130324                // '{' 'union'
     || lk == 131103                // '$' 'unordered'
     || lk == 131104                // '%' 'unordered'
     || lk == 131348                // '{' 'unordered'
     || lk == 131615                // '$' 'updating'
     || lk == 131616                // '%' 'updating'
     || lk == 131860                // '{' 'updating'
     || lk == 133151                // '$' 'validate'
     || lk == 133152                // '%' 'validate'
     || lk == 133396                // '{' 'validate'
     || lk == 133663                // '$' 'value'
     || lk == 133664                // '%' 'value'
     || lk == 133908                // '{' 'value'
     || lk == 134175                // '$' 'variable'
     || lk == 134176                // '%' 'variable'
     || lk == 134420                // '{' 'variable'
     || lk == 134687                // '$' 'version'
     || lk == 134688                // '%' 'version'
     || lk == 134932                // '{' 'version'
     || lk == 136223                // '$' 'where'
     || lk == 136224                // '%' 'where'
     || lk == 136468                // '{' 'where'
     || lk == 136735                // '$' 'while'
     || lk == 136736                // '%' 'while'
     || lk == 136980                // '{' 'while'
     || lk == 138271                // '$' 'with'
     || lk == 138272                // '%' 'with'
     || lk == 138516                // '{' 'with'
     || lk == 140319                // '$' 'xquery'
     || lk == 140320                // '%' 'xquery'
     || lk == 140564                // '{' 'xquery'
     || lk == 141588                // '{' '{'
     || lk == 142612                // '{' '{|'
     || lk == 144660)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(7, e0A, -1);
          lk = -15;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(7, e0A, -2);
            lk = -15;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(7, e0A, -3);
              lk = -15;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(7, e0A, -12);
                lk = -15;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(7, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 90198:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 90214:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 113284:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 116910:                    // 'let' 'score'
    case 119945:                    // 'for' 'sliding'
    case 128649:                    // 'for' 'tumbling'
      try_FLWORStatement();
      break;
    case 17560:                     // 'if' '('
      try_IfStatement();
      break;
    case 17651:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 141562:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 17661:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16134:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case 53:                        // ';'
      try_VoidStatement();
      break;
    case -15:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    shift(53);                      // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    shiftT(53);                     // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    shift(52);                      // ':='
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    shift(53);                      // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    shiftT(31);                     // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    shiftT(52);                     // ':='
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
    shiftT(53);                     // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    shift(276);                     // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Statements();
    shift(282);                     // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    shiftT(276);                    // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Statements();
    shiftT(282);                    // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    shift(86);                      // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    shift(176);                     // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    shift(53);                      // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    shiftT(86);                     // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    shiftT(176);                    // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    shiftT(53);                     // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    shift(102);                     // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    shift(176);                     // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    shift(53);                      // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    shiftT(102);                    // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    shiftT(176);                    // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    shiftT(53);                     // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    shift(132);                     // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    shift(221);                     // 'returning'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    shift(53);                      // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    shiftT(132);                    // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    shiftT(221);                    // 'returning'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
    shiftT(53);                     // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
      if (l1 == 220)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
      if (l1 == 220)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    shift(220);                     // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    shiftT(220);                    // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    shift(152);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    shift(245);                     // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    shift(122);                     // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    shiftT(152);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(37);                     // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    shiftT(245);                    // 'then'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    shiftT(122);                    // 'else'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    shift(243);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(109);                     // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    shiftT(243);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(37);                     // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(109);                    // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      shift(88);                    // 'case'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(220);                     // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      shiftT(88);                   // 'case'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(220);                    // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    shift(250);                     // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      shift(91);                    // 'catch'
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      switch (l1)
      {
      case 91:                      // 'catch'
        lookahead2W(279);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
        break;
      default:
        lk = l1;
      }
      if (lk == 38491               // 'catch' 'and'
       || lk == 45659               // 'catch' 'cast'
       || lk == 46171               // 'catch' 'castable'
       || lk == 60507               // 'catch' 'div'
       || lk == 65627               // 'catch' 'eq'
       || lk == 67163               // 'catch' 'except'
       || lk == 74843               // 'catch' 'ge'
       || lk == 76891               // 'catch' 'gt'
       || lk == 77403               // 'catch' 'idiv'
       || lk == 82011               // 'catch' 'instance'
       || lk == 83035               // 'catch' 'intersect'
       || lk == 84059               // 'catch' 'is'
       || lk == 88155               // 'catch' 'le'
       || lk == 91227               // 'catch' 'lt'
       || lk == 92251               // 'catch' 'mod'
       || lk == 95323               // 'catch' 'ne'
       || lk == 102491              // 'catch' 'or'
       || lk == 127067              // 'catch' 'to'
       || lk == 127579              // 'catch' 'treat'
       || lk == 130139)             // 'catch' 'union'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            shiftT(91);             // 'catch'
            lookahead1W(257);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
            try_CatchErrorList();
            try_BlockStatement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0, lk);
        }
      }
      if (lk != -1
       && lk != 2651                // 'catch' Wildcard
       && lk != 3163                // 'catch' EQName^Token
       && lk != 35931               // 'catch' 'after'
       && lk != 36955               // 'catch' 'allowing'
       && lk != 37467               // 'catch' 'ancestor'
       && lk != 37979               // 'catch' 'ancestor-or-self'
       && lk != 39515               // 'catch' 'append'
       && lk != 40027               // 'catch' 'array'
       && lk != 40539               // 'catch' 'as'
       && lk != 41051               // 'catch' 'ascending'
       && lk != 41563               // 'catch' 'at'
       && lk != 42075               // 'catch' 'attribute'
       && lk != 42587               // 'catch' 'base-uri'
       && lk != 43099               // 'catch' 'before'
       && lk != 43611               // 'catch' 'boundary-space'
       && lk != 44123               // 'catch' 'break'
       && lk != 45147               // 'catch' 'case'
       && lk != 46683               // 'catch' 'catch'
       && lk != 47707               // 'catch' 'child'
       && lk != 48219               // 'catch' 'collation'
       && lk != 49243               // 'catch' 'comment'
       && lk != 49755               // 'catch' 'constraint'
       && lk != 50267               // 'catch' 'construction'
       && lk != 51803               // 'catch' 'context'
       && lk != 52315               // 'catch' 'continue'
       && lk != 52827               // 'catch' 'copy'
       && lk != 53339               // 'catch' 'copy-namespaces'
       && lk != 53851               // 'catch' 'count'
       && lk != 54363               // 'catch' 'decimal-format'
       && lk != 55387               // 'catch' 'declare'
       && lk != 55899               // 'catch' 'default'
       && lk != 56411               // 'catch' 'delete'
       && lk != 56923               // 'catch' 'descendant'
       && lk != 57435               // 'catch' 'descendant-or-self'
       && lk != 57947               // 'catch' 'descending'
       && lk != 61019               // 'catch' 'document'
       && lk != 61531               // 'catch' 'document-node'
       && lk != 62043               // 'catch' 'element'
       && lk != 62555               // 'catch' 'else'
       && lk != 63067               // 'catch' 'empty'
       && lk != 63579               // 'catch' 'empty-sequence'
       && lk != 64091               // 'catch' 'encoding'
       && lk != 64603               // 'catch' 'end'
       && lk != 66139               // 'catch' 'every'
       && lk != 67675               // 'catch' 'exit'
       && lk != 68187               // 'catch' 'external'
       && lk != 68699               // 'catch' 'first'
       && lk != 69211               // 'catch' 'following'
       && lk != 69723               // 'catch' 'following-sibling'
       && lk != 70235               // 'catch' 'for'
       && lk != 72283               // 'catch' 'ft-option'
       && lk != 74331               // 'catch' 'function'
       && lk != 75867               // 'catch' 'group'
       && lk != 77915               // 'catch' 'if'
       && lk != 78427               // 'catch' 'import'
       && lk != 78939               // 'catch' 'in'
       && lk != 79451               // 'catch' 'index'
       && lk != 81499               // 'catch' 'insert'
       && lk != 82523               // 'catch' 'integrity'
       && lk != 83547               // 'catch' 'into'
       && lk != 84571               // 'catch' 'item'
       && lk != 85083               // 'catch' 'json'
       && lk != 85595               // 'catch' 'json-item'
       && lk != 87131               // 'catch' 'last'
       && lk != 87643               // 'catch' 'lax'
       && lk != 89179               // 'catch' 'let'
       && lk != 90203               // 'catch' 'loop'
       && lk != 92763               // 'catch' 'modify'
       && lk != 93275               // 'catch' 'module'
       && lk != 94299               // 'catch' 'namespace'
       && lk != 94811               // 'catch' 'namespace-node'
       && lk != 97883               // 'catch' 'node'
       && lk != 98395               // 'catch' 'nodes'
       && lk != 99419               // 'catch' 'object'
       && lk != 101467              // 'catch' 'only'
       && lk != 101979              // 'catch' 'option'
       && lk != 103003              // 'catch' 'order'
       && lk != 103515              // 'catch' 'ordered'
       && lk != 104027              // 'catch' 'ordering'
       && lk != 105563              // 'catch' 'parent'
       && lk != 108635              // 'catch' 'preceding'
       && lk != 109147              // 'catch' 'preceding-sibling'
       && lk != 110683              // 'catch' 'processing-instruction'
       && lk != 111707              // 'catch' 'rename'
       && lk != 112219              // 'catch' 'replace'
       && lk != 112731              // 'catch' 'return'
       && lk != 113243              // 'catch' 'returning'
       && lk != 113755              // 'catch' 'revalidation'
       && lk != 114779              // 'catch' 'satisfies'
       && lk != 115291              // 'catch' 'schema'
       && lk != 115803              // 'catch' 'schema-attribute'
       && lk != 116315              // 'catch' 'schema-element'
       && lk != 116827              // 'catch' 'score'
       && lk != 117339              // 'catch' 'self'
       && lk != 119899              // 'catch' 'sliding'
       && lk != 120411              // 'catch' 'some'
       && lk != 120923              // 'catch' 'stable'
       && lk != 121435              // 'catch' 'start'
       && lk != 122971              // 'catch' 'strict'
       && lk != 123995              // 'catch' 'structured-item'
       && lk != 124507              // 'catch' 'switch'
       && lk != 125019              // 'catch' 'text'
       && lk != 128091              // 'catch' 'try'
       && lk != 128603              // 'catch' 'tumbling'
       && lk != 129115              // 'catch' 'type'
       && lk != 129627              // 'catch' 'typeswitch'
       && lk != 131163              // 'catch' 'unordered'
       && lk != 131675              // 'catch' 'updating'
       && lk != 133211              // 'catch' 'validate'
       && lk != 133723              // 'catch' 'value'
       && lk != 134235              // 'catch' 'variable'
       && lk != 134747              // 'catch' 'version'
       && lk != 136283              // 'catch' 'where'
       && lk != 136795              // 'catch' 'while'
       && lk != 138331              // 'catch' 'with'
       && lk != 140379)             // 'catch' 'xquery'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    shiftT(250);                    // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockStatement();
    lookahead1W(36);                // S^WS | '(:' | 'catch'
    shiftT(91);                     // 'catch'
    lookahead1W(257);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_CatchErrorList();
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      switch (l1)
      {
      case 91:                      // 'catch'
        lookahead2W(279);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
        break;
      default:
        lk = l1;
      }
      if (lk == 38491               // 'catch' 'and'
       || lk == 45659               // 'catch' 'cast'
       || lk == 46171               // 'catch' 'castable'
       || lk == 60507               // 'catch' 'div'
       || lk == 65627               // 'catch' 'eq'
       || lk == 67163               // 'catch' 'except'
       || lk == 74843               // 'catch' 'ge'
       || lk == 76891               // 'catch' 'gt'
       || lk == 77403               // 'catch' 'idiv'
       || lk == 82011               // 'catch' 'instance'
       || lk == 83035               // 'catch' 'intersect'
       || lk == 84059               // 'catch' 'is'
       || lk == 88155               // 'catch' 'le'
       || lk == 91227               // 'catch' 'lt'
       || lk == 92251               // 'catch' 'mod'
       || lk == 95323               // 'catch' 'ne'
       || lk == 102491              // 'catch' 'or'
       || lk == 127067              // 'catch' 'to'
       || lk == 127579              // 'catch' 'treat'
       || lk == 130139)             // 'catch' 'union'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            shiftT(91);             // 'catch'
            lookahead1W(257);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
            try_CatchErrorList();
            try_BlockStatement();
            memoize(8, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(8, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 2651                // 'catch' Wildcard
       && lk != 3163                // 'catch' EQName^Token
       && lk != 35931               // 'catch' 'after'
       && lk != 36955               // 'catch' 'allowing'
       && lk != 37467               // 'catch' 'ancestor'
       && lk != 37979               // 'catch' 'ancestor-or-self'
       && lk != 39515               // 'catch' 'append'
       && lk != 40027               // 'catch' 'array'
       && lk != 40539               // 'catch' 'as'
       && lk != 41051               // 'catch' 'ascending'
       && lk != 41563               // 'catch' 'at'
       && lk != 42075               // 'catch' 'attribute'
       && lk != 42587               // 'catch' 'base-uri'
       && lk != 43099               // 'catch' 'before'
       && lk != 43611               // 'catch' 'boundary-space'
       && lk != 44123               // 'catch' 'break'
       && lk != 45147               // 'catch' 'case'
       && lk != 46683               // 'catch' 'catch'
       && lk != 47707               // 'catch' 'child'
       && lk != 48219               // 'catch' 'collation'
       && lk != 49243               // 'catch' 'comment'
       && lk != 49755               // 'catch' 'constraint'
       && lk != 50267               // 'catch' 'construction'
       && lk != 51803               // 'catch' 'context'
       && lk != 52315               // 'catch' 'continue'
       && lk != 52827               // 'catch' 'copy'
       && lk != 53339               // 'catch' 'copy-namespaces'
       && lk != 53851               // 'catch' 'count'
       && lk != 54363               // 'catch' 'decimal-format'
       && lk != 55387               // 'catch' 'declare'
       && lk != 55899               // 'catch' 'default'
       && lk != 56411               // 'catch' 'delete'
       && lk != 56923               // 'catch' 'descendant'
       && lk != 57435               // 'catch' 'descendant-or-self'
       && lk != 57947               // 'catch' 'descending'
       && lk != 61019               // 'catch' 'document'
       && lk != 61531               // 'catch' 'document-node'
       && lk != 62043               // 'catch' 'element'
       && lk != 62555               // 'catch' 'else'
       && lk != 63067               // 'catch' 'empty'
       && lk != 63579               // 'catch' 'empty-sequence'
       && lk != 64091               // 'catch' 'encoding'
       && lk != 64603               // 'catch' 'end'
       && lk != 66139               // 'catch' 'every'
       && lk != 67675               // 'catch' 'exit'
       && lk != 68187               // 'catch' 'external'
       && lk != 68699               // 'catch' 'first'
       && lk != 69211               // 'catch' 'following'
       && lk != 69723               // 'catch' 'following-sibling'
       && lk != 70235               // 'catch' 'for'
       && lk != 72283               // 'catch' 'ft-option'
       && lk != 74331               // 'catch' 'function'
       && lk != 75867               // 'catch' 'group'
       && lk != 77915               // 'catch' 'if'
       && lk != 78427               // 'catch' 'import'
       && lk != 78939               // 'catch' 'in'
       && lk != 79451               // 'catch' 'index'
       && lk != 81499               // 'catch' 'insert'
       && lk != 82523               // 'catch' 'integrity'
       && lk != 83547               // 'catch' 'into'
       && lk != 84571               // 'catch' 'item'
       && lk != 85083               // 'catch' 'json'
       && lk != 85595               // 'catch' 'json-item'
       && lk != 87131               // 'catch' 'last'
       && lk != 87643               // 'catch' 'lax'
       && lk != 89179               // 'catch' 'let'
       && lk != 90203               // 'catch' 'loop'
       && lk != 92763               // 'catch' 'modify'
       && lk != 93275               // 'catch' 'module'
       && lk != 94299               // 'catch' 'namespace'
       && lk != 94811               // 'catch' 'namespace-node'
       && lk != 97883               // 'catch' 'node'
       && lk != 98395               // 'catch' 'nodes'
       && lk != 99419               // 'catch' 'object'
       && lk != 101467              // 'catch' 'only'
       && lk != 101979              // 'catch' 'option'
       && lk != 103003              // 'catch' 'order'
       && lk != 103515              // 'catch' 'ordered'
       && lk != 104027              // 'catch' 'ordering'
       && lk != 105563              // 'catch' 'parent'
       && lk != 108635              // 'catch' 'preceding'
       && lk != 109147              // 'catch' 'preceding-sibling'
       && lk != 110683              // 'catch' 'processing-instruction'
       && lk != 111707              // 'catch' 'rename'
       && lk != 112219              // 'catch' 'replace'
       && lk != 112731              // 'catch' 'return'
       && lk != 113243              // 'catch' 'returning'
       && lk != 113755              // 'catch' 'revalidation'
       && lk != 114779              // 'catch' 'satisfies'
       && lk != 115291              // 'catch' 'schema'
       && lk != 115803              // 'catch' 'schema-attribute'
       && lk != 116315              // 'catch' 'schema-element'
       && lk != 116827              // 'catch' 'score'
       && lk != 117339              // 'catch' 'self'
       && lk != 119899              // 'catch' 'sliding'
       && lk != 120411              // 'catch' 'some'
       && lk != 120923              // 'catch' 'stable'
       && lk != 121435              // 'catch' 'start'
       && lk != 122971              // 'catch' 'strict'
       && lk != 123995              // 'catch' 'structured-item'
       && lk != 124507              // 'catch' 'switch'
       && lk != 125019              // 'catch' 'text'
       && lk != 128091              // 'catch' 'try'
       && lk != 128603              // 'catch' 'tumbling'
       && lk != 129115              // 'catch' 'type'
       && lk != 129627              // 'catch' 'typeswitch'
       && lk != 131163              // 'catch' 'unordered'
       && lk != 131675              // 'catch' 'updating'
       && lk != 133211              // 'catch' 'validate'
       && lk != 133723              // 'catch' 'value'
       && lk != 134235              // 'catch' 'variable'
       && lk != 134747              // 'catch' 'version'
       && lk != 136283              // 'catch' 'where'
       && lk != 136795              // 'catch' 'while'
       && lk != 138331              // 'catch' 'with'
       && lk != 140379)             // 'catch' 'xquery'
      {
        break;
      }
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      shiftT(91);                   // 'catch'
      lookahead1W(257);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_CatchErrorList();
      try_BlockStatement();
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    shift(253);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(109);                     // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    shiftT(253);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(37);                     // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(109);                    // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    shift(88);                      // 'case'
    lookahead1W(262);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
    }
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    shiftT(88);                     // 'case'
    lookahead1W(262);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
    }
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(262);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      shift(52);                    // ':='
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      whitespace();
      parse_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        shift(52);                  // ':='
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        whitespace();
        parse_ExprSingle();
      }
    }
    shift(53);                      // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(262);                    // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    try_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      shiftT(52);                   // ':='
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
      try_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        shiftT(52);                 // ':='
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        try_ExprSingle();
      }
    }
    shiftT(53);                     // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    shift(267);                     // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    shiftT(267);                    // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Expr();
    shiftT(37);                     // ')'
    lookahead1W(270);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_Statement();
  }

  function parse_VoidStatement()
  {
    eventHandler.startNonterminal("VoidStatement", e0);
    shift(53);                      // ';'
    eventHandler.endNonterminal("VoidStatement", e0);
  }

  function try_VoidStatement()
  {
    shiftT(53);                     // ';'
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
      break;
    case 174:                       // 'let'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
      break;
    case 250:                       // 'try'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 152:                       // 'if'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 116910:                    // 'let' 'score'
    case 119945:                    // 'for' 'sliding'
    case 128649:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 17560:                     // 'if' '('
      parse_IfExpr();
      break;
    case 17651:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 141562:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 17661:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
      break;
    case 174:                       // 'let'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
      break;
    case 250:                       // 'try'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 152:                       // 'if'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 116910:                    // 'let' 'score'
    case 119945:                    // 'for' 'sliding'
    case 128649:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 17560:                     // 'if' '('
      try_IfExpr();
      break;
    case 17651:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 141562:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 17661:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 77:                        // 'append'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 218:                       // 'rename'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 219:                       // 'replace'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 110:                       // 'delete'
    case 159:                       // 'insert'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 235:                       // 'some'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
      break;
    default:
      lk = l1;
    }
    if (lk == 133851)               // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ReplaceExpr();
          lk = -6;
        }
        catch (p6A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case 16001:                     // 'every' '$'
    case 16107:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 97951:                     // 'insert' 'node'
    case 98463:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 97902:                     // 'delete' 'node'
    case 98414:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 98010:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case -6:
    case 98011:                     // 'replace' 'node'
      parse_ReplaceExpr();
      break;
    case 15975:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case 85102:                     // 'delete' 'json'
      parse_JSONDeleteExpr();
      break;
    case 85151:                     // 'insert' 'json'
      parse_JSONInsertExpr();
      break;
    case 85210:                     // 'rename' 'json'
      parse_JSONRenameExpr();
      break;
    case -11:
      parse_JSONReplaceExpr();
      break;
    case 85069:                     // 'append' 'json'
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 77:                        // 'append'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 218:                       // 'rename'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 219:                       // 'replace'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 110:                       // 'delete'
    case 159:                       // 'insert'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 235:                       // 'some'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
      break;
    default:
      lk = l1;
    }
    if (lk == 133851)               // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ReplaceExpr();
          memoize(9, e0A, -6);
          lk = -13;
        }
        catch (p6A)
        {
          lk = -11;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0A, -11);
        }
      }
    }
    switch (lk)
    {
    case 16001:                     // 'every' '$'
    case 16107:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 97951:                     // 'insert' 'node'
    case 98463:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 97902:                     // 'delete' 'node'
    case 98414:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 98010:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case -6:
    case 98011:                     // 'replace' 'node'
      try_ReplaceExpr();
      break;
    case 15975:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case 85102:                     // 'delete' 'json'
      try_JSONDeleteExpr();
      break;
    case 85151:                     // 'insert' 'json'
      try_JSONInsertExpr();
      break;
    case 85210:                     // 'rename' 'json'
      try_JSONRenameExpr();
      break;
    case -11:
      try_JSONReplaceExpr();
      break;
    case 85069:                     // 'append' 'json'
      try_JSONAppendExpr();
      break;
    case -13:
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    shift(110);                     // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shift(166);                     // 'json'
    lookahead1W(264);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    shiftT(110);                    // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shiftT(166);                    // 'json'
    lookahead1W(264);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    switch (l1)
    {
    case 159:                       // 'insert'
      lookahead2W(56);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        shiftT(159);                // 'insert'
        lookahead1W(56);            // S^WS | '(:' | 'json'
        shiftT(166);                // 'json'
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        try_ExprSingle();
        shiftT(163);                // 'into'
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        try_ExprSingle();
        switch (l1)
        {
        case 81:                    // 'at'
          lookahead2W(69);          // S^WS | '(:' | 'position'
          break;
        default:
          lk = l1;
        }
        if (lk == 108113)           // 'at' 'position'
        {
          lk = memoized(11, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2;
            try
            {
              shiftT(81);           // 'at'
              lookahead1W(69);      // S^WS | '(:' | 'position'
              shiftT(211);          // 'position'
              lookahead1W(267);     // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
              try_ExprSingle();
              memoize(11, e0B, -1);
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; end = e2B; }}
              memoize(11, e0B, -2);
            }
            lk = -2;
          }
        }
        if (lk == -1)
        {
          shiftT(81);               // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          shiftT(211);              // 'position'
          lookahead1W(267);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
          try_ExprSingle();
        }
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(10, e0, lk);
    }
    switch (lk)
    {
    case -1:
      shift(159);                   // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      shift(166);                   // 'json'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_ExprSingle();
      shift(163);                   // 'into'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_ExprSingle();
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(69);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 108113)             // 'at' 'position'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(81);             // 'at'
            lookahead1W(69);        // S^WS | '(:' | 'position'
            shiftT(211);            // 'position'
            lookahead1W(267);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
            try_ExprSingle();
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(11, e0, lk);
        }
      }
      if (lk == -1)
      {
        shift(81);                  // 'at'
        lookahead1W(69);            // S^WS | '(:' | 'position'
        shift(211);                 // 'position'
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        whitespace();
        parse_ExprSingle();
      }
      break;
    default:
      shift(159);                   // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      shift(166);                   // 'json'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_PairConstructorList();
      shift(163);                   // 'into'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    switch (l1)
    {
    case 159:                       // 'insert'
      lookahead2W(56);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        shiftT(159);                // 'insert'
        lookahead1W(56);            // S^WS | '(:' | 'json'
        shiftT(166);                // 'json'
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        try_ExprSingle();
        shiftT(163);                // 'into'
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        try_ExprSingle();
        switch (l1)
        {
        case 81:                    // 'at'
          lookahead2W(69);          // S^WS | '(:' | 'position'
          break;
        default:
          lk = l1;
        }
        if (lk == 108113)           // 'at' 'position'
        {
          lk = memoized(11, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2;
            try
            {
              shiftT(81);           // 'at'
              lookahead1W(69);      // S^WS | '(:' | 'position'
              shiftT(211);          // 'position'
              lookahead1W(267);     // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
              try_ExprSingle();
              memoize(11, e0B, -1);
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; end = e2B; }}
              memoize(11, e0B, -2);
            }
            lk = -2;
          }
        }
        if (lk == -1)
        {
          shiftT(81);               // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          shiftT(211);              // 'position'
          lookahead1W(267);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
          try_ExprSingle();
        }
        memoize(10, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(159);                  // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      shiftT(166);                  // 'json'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_ExprSingle();
      shiftT(163);                  // 'into'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_ExprSingle();
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(69);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 108113)             // 'at' 'position'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(81);             // 'at'
            lookahead1W(69);        // S^WS | '(:' | 'position'
            shiftT(211);            // 'position'
            lookahead1W(267);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
            try_ExprSingle();
            memoize(11, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(11, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1)
      {
        shiftT(81);                 // 'at'
        lookahead1W(69);            // S^WS | '(:' | 'position'
        shiftT(211);                // 'position'
        lookahead1W(267);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
        try_ExprSingle();
      }
      break;
    case -3:
      break;
    default:
      shiftT(159);                  // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      shiftT(166);                  // 'json'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_PairConstructorList();
      shiftT(163);                  // 'into'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    shift(218);                     // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shift(166);                     // 'json'
    lookahead1W(264);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_PostfixExpr();
    shift(79);                      // 'as'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    shiftT(218);                    // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shiftT(166);                    // 'json'
    lookahead1W(264);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_PostfixExpr();
    shiftT(79);                     // 'as'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    shift(219);                     // 'replace'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    shift(261);                     // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    shift(196);                     // 'of'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shift(166);                     // 'json'
    lookahead1W(264);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    whitespace();
    parse_PostfixExpr();
    shift(270);                     // 'with'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    shiftT(219);                    // 'replace'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    shiftT(261);                    // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    shiftT(196);                    // 'of'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shiftT(166);                    // 'json'
    lookahead1W(264);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
    try_PostfixExpr();
    shiftT(270);                    // 'with'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    shift(77);                      // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shift(166);                     // 'json'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    shift(163);                     // 'into'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    shiftT(77);                     // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shiftT(166);                    // 'json'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
    shiftT(163);                    // 'into'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      shift(12);                    // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      shift(23);                    // CharRef
      break;
    case 277:                       // '{{'
      shift(277);                   // '{{'
      break;
    case 283:                       // '}}'
      shift(283);                   // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      shiftT(12);                   // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      shiftT(23);                   // CharRef
      break;
    case 277:                       // '{{'
      shiftT(277);                  // '{{'
      break;
    case 283:                       // '}}'
      shiftT(283);                  // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    shift(119);                     // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    shiftT(119);                    // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    shift(82);                      // 'attribute'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_Expr();
      shift(282);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 144660)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(276);              // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          shiftT(282);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(12, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(276);                   // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      shift(282);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    shiftT(82);                     // 'attribute'
    lookahead1W(258);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 276:                       // '{'
      shiftT(276);                  // '{'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_Expr();
      shiftT(282);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 144660)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(276);              // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          shiftT(282);              // '}'
          memoize(12, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(276);                  // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      shiftT(282);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    shift(216);                     // 'processing-instruction'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_Expr();
      shift(282);                   // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 144660)               // '{' '}'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(276);              // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          shiftT(282);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(13, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(276);                   // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      shift(282);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    shiftT(216);                    // 'processing-instruction'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    switch (l1)
    {
    case 276:                       // '{'
      shiftT(276);                  // '{'
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_Expr();
      shiftT(282);                  // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      break;
    default:
      lk = l1;
    }
    if (lk == 144660)               // '{' '}'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(276);              // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          shiftT(282);              // '}'
          memoize(13, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(13, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(276);                  // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      shiftT(282);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    shift(96);                      // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    shiftT(96);                     // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    shift(244);                     // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    shiftT(244);                    // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 184:                       // 'namespace'
      lookahead2W(256);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 216:                       // 'processing-instruction'
      lookahead2W(254);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 276:                       // '{'
      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      break;
    case 82:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(259);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 96:                        // 'comment'
    case 244:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 202:                       // 'ordered'
    case 256:                       // 'unordered'
      lookahead2W(139);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 93:                        // 'child'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 180:                       // 'mod'
    case 181:                       // 'modify'
    case 182:                       // 'module'
    case 186:                       // 'ne'
    case 192:                       // 'nodes'
    case 194:                       // 'object'
    case 198:                       // 'only'
    case 199:                       // 'option'
    case 200:                       // 'or'
    case 201:                       // 'order'
    case 203:                       // 'ordering'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
    case 218:                       // 'rename'
    case 219:                       // 'replace'
    case 220:                       // 'return'
    case 221:                       // 'returning'
    case 222:                       // 'revalidation'
    case 224:                       // 'satisfies'
    case 225:                       // 'schema'
    case 228:                       // 'score'
    case 229:                       // 'self'
    case 234:                       // 'sliding'
    case 235:                       // 'some'
    case 236:                       // 'stable'
    case 237:                       // 'start'
    case 240:                       // 'strict'
    case 248:                       // 'to'
    case 249:                       // 'treat'
    case 250:                       // 'try'
    case 251:                       // 'tumbling'
    case 252:                       // 'type'
    case 254:                       // 'union'
    case 257:                       // 'updating'
    case 260:                       // 'validate'
    case 261:                       // 'value'
    case 262:                       // 'variable'
    case 263:                       // 'version'
    case 266:                       // 'where'
    case 267:                       // 'while'
    case 270:                       // 'with'
    case 274:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2836                  // '{' Wildcard
     || lk == 3348                  // '{' EQName^Token
     || lk == 4372                  // '{' IntegerLiteral
     || lk == 4884                  // '{' DecimalLiteral
     || lk == 5396                  // '{' DoubleLiteral
     || lk == 5908                  // '{' StringLiteral
     || lk == 16148                 // '{' '$'
     || lk == 16660                 // '{' '%'
     || lk == 17684                 // '{' '('
     || lk == 18196                 // '{' '(#'
     || lk == 20756                 // '{' '+'
     || lk == 21780                 // '{' '-'
     || lk == 22804                 // '{' '.'
     || lk == 23316                 // '{' '..'
     || lk == 23828                 // '{' '/'
     || lk == 24340                 // '{' '//'
     || lk == 27924                 // '{' '<'
     || lk == 28436                 // '{' '<!--'
     || lk == 30484                 // '{' '<?'
     || lk == 34068                 // '{' '@'
     || lk == 35092                 // '{' '['
     || lk == 36116                 // '{' 'after'
     || lk == 37140                 // '{' 'allowing'
     || lk == 37652                 // '{' 'ancestor'
     || lk == 38164                 // '{' 'ancestor-or-self'
     || lk == 38676                 // '{' 'and'
     || lk == 39700                 // '{' 'append'
     || lk == 40212                 // '{' 'array'
     || lk == 40724                 // '{' 'as'
     || lk == 41236                 // '{' 'ascending'
     || lk == 41748                 // '{' 'at'
     || lk == 42260                 // '{' 'attribute'
     || lk == 42772                 // '{' 'base-uri'
     || lk == 43284                 // '{' 'before'
     || lk == 43796                 // '{' 'boundary-space'
     || lk == 44308                 // '{' 'break'
     || lk == 45332                 // '{' 'case'
     || lk == 45844                 // '{' 'cast'
     || lk == 46356                 // '{' 'castable'
     || lk == 46868                 // '{' 'catch'
     || lk == 47892                 // '{' 'child'
     || lk == 48404                 // '{' 'collation'
     || lk == 49428                 // '{' 'comment'
     || lk == 49940                 // '{' 'constraint'
     || lk == 50452                 // '{' 'construction'
     || lk == 51988                 // '{' 'context'
     || lk == 52500                 // '{' 'continue'
     || lk == 53012                 // '{' 'copy'
     || lk == 53524                 // '{' 'copy-namespaces'
     || lk == 54036                 // '{' 'count'
     || lk == 54548                 // '{' 'decimal-format'
     || lk == 55572                 // '{' 'declare'
     || lk == 56084                 // '{' 'default'
     || lk == 56596                 // '{' 'delete'
     || lk == 57108                 // '{' 'descendant'
     || lk == 57620                 // '{' 'descendant-or-self'
     || lk == 58132                 // '{' 'descending'
     || lk == 60692                 // '{' 'div'
     || lk == 61204                 // '{' 'document'
     || lk == 61716                 // '{' 'document-node'
     || lk == 62228                 // '{' 'element'
     || lk == 62740                 // '{' 'else'
     || lk == 63252                 // '{' 'empty'
     || lk == 63764                 // '{' 'empty-sequence'
     || lk == 64276                 // '{' 'encoding'
     || lk == 64788                 // '{' 'end'
     || lk == 65812                 // '{' 'eq'
     || lk == 66324                 // '{' 'every'
     || lk == 67348                 // '{' 'except'
     || lk == 67860                 // '{' 'exit'
     || lk == 68372                 // '{' 'external'
     || lk == 68884                 // '{' 'first'
     || lk == 69396                 // '{' 'following'
     || lk == 69908                 // '{' 'following-sibling'
     || lk == 70420                 // '{' 'for'
     || lk == 72468                 // '{' 'ft-option'
     || lk == 74516                 // '{' 'function'
     || lk == 75028                 // '{' 'ge'
     || lk == 76052                 // '{' 'group'
     || lk == 77076                 // '{' 'gt'
     || lk == 77588                 // '{' 'idiv'
     || lk == 78100                 // '{' 'if'
     || lk == 78612                 // '{' 'import'
     || lk == 79124                 // '{' 'in'
     || lk == 79636                 // '{' 'index'
     || lk == 81684                 // '{' 'insert'
     || lk == 82196                 // '{' 'instance'
     || lk == 82708                 // '{' 'integrity'
     || lk == 83220                 // '{' 'intersect'
     || lk == 83732                 // '{' 'into'
     || lk == 84244                 // '{' 'is'
     || lk == 84756                 // '{' 'item'
     || lk == 85268                 // '{' 'json'
     || lk == 85780                 // '{' 'json-item'
     || lk == 87316                 // '{' 'last'
     || lk == 87828                 // '{' 'lax'
     || lk == 88340                 // '{' 'le'
     || lk == 89364                 // '{' 'let'
     || lk == 90388                 // '{' 'loop'
     || lk == 91412                 // '{' 'lt'
     || lk == 92436                 // '{' 'mod'
     || lk == 92948                 // '{' 'modify'
     || lk == 93460                 // '{' 'module'
     || lk == 94484                 // '{' 'namespace'
     || lk == 94996                 // '{' 'namespace-node'
     || lk == 95508                 // '{' 'ne'
     || lk == 98068                 // '{' 'node'
     || lk == 98580                 // '{' 'nodes'
     || lk == 99604                 // '{' 'object'
     || lk == 101652                // '{' 'only'
     || lk == 102164                // '{' 'option'
     || lk == 102676                // '{' 'or'
     || lk == 103188                // '{' 'order'
     || lk == 103700                // '{' 'ordered'
     || lk == 104212                // '{' 'ordering'
     || lk == 105748                // '{' 'parent'
     || lk == 108820                // '{' 'preceding'
     || lk == 109332                // '{' 'preceding-sibling'
     || lk == 110868                // '{' 'processing-instruction'
     || lk == 111892                // '{' 'rename'
     || lk == 112404                // '{' 'replace'
     || lk == 112916                // '{' 'return'
     || lk == 113428                // '{' 'returning'
     || lk == 113940                // '{' 'revalidation'
     || lk == 114964                // '{' 'satisfies'
     || lk == 115476                // '{' 'schema'
     || lk == 115988                // '{' 'schema-attribute'
     || lk == 116500                // '{' 'schema-element'
     || lk == 117012                // '{' 'score'
     || lk == 117524                // '{' 'self'
     || lk == 120084                // '{' 'sliding'
     || lk == 120596                // '{' 'some'
     || lk == 121108                // '{' 'stable'
     || lk == 121620                // '{' 'start'
     || lk == 123156                // '{' 'strict'
     || lk == 124180                // '{' 'structured-item'
     || lk == 124692                // '{' 'switch'
     || lk == 125204                // '{' 'text'
     || lk == 127252                // '{' 'to'
     || lk == 127764                // '{' 'treat'
     || lk == 128276                // '{' 'try'
     || lk == 128788                // '{' 'tumbling'
     || lk == 129300                // '{' 'type'
     || lk == 129812                // '{' 'typeswitch'
     || lk == 130324                // '{' 'union'
     || lk == 131348                // '{' 'unordered'
     || lk == 131860                // '{' 'updating'
     || lk == 133396                // '{' 'validate'
     || lk == 133908                // '{' 'value'
     || lk == 134420                // '{' 'variable'
     || lk == 134932                // '{' 'version'
     || lk == 136468                // '{' 'where'
     || lk == 136980                // '{' 'while'
     || lk == 138516                // '{' 'with'
     || lk == 140564                // '{' 'xquery'
     || lk == 141588                // '{' '{'
     || lk == 142612                // '{' '{|'
     || lk == 144660)               // '{' '}'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -10;
        }
        catch (p10A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(14, e0, lk);
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17588:                     // 'mod' '('
    case 17589:                     // 'modify' '('
    case 17590:                     // 'module' '('
    case 17592:                     // 'namespace' '('
    case 17594:                     // 'ne' '('
    case 17600:                     // 'nodes' '('
    case 17602:                     // 'object' '('
    case 17606:                     // 'only' '('
    case 17607:                     // 'option' '('
    case 17608:                     // 'or' '('
    case 17609:                     // 'order' '('
    case 17610:                     // 'ordered' '('
    case 17611:                     // 'ordering' '('
    case 17614:                     // 'parent' '('
    case 17620:                     // 'preceding' '('
    case 17621:                     // 'preceding-sibling' '('
    case 17626:                     // 'rename' '('
    case 17627:                     // 'replace' '('
    case 17628:                     // 'return' '('
    case 17629:                     // 'returning' '('
    case 17630:                     // 'revalidation' '('
    case 17632:                     // 'satisfies' '('
    case 17633:                     // 'schema' '('
    case 17636:                     // 'score' '('
    case 17637:                     // 'self' '('
    case 17642:                     // 'sliding' '('
    case 17643:                     // 'some' '('
    case 17644:                     // 'stable' '('
    case 17645:                     // 'start' '('
    case 17648:                     // 'strict' '('
    case 17656:                     // 'to' '('
    case 17657:                     // 'treat' '('
    case 17658:                     // 'try' '('
    case 17659:                     // 'tumbling' '('
    case 17660:                     // 'type' '('
    case 17662:                     // 'union' '('
    case 17664:                     // 'unordered' '('
    case 17665:                     // 'updating' '('
    case 17668:                     // 'validate' '('
    case 17669:                     // 'value' '('
    case 17670:                     // 'variable' '('
    case 17671:                     // 'version' '('
    case 17674:                     // 'where' '('
    case 17675:                     // 'while' '('
    case 17678:                     // 'with' '('
    case 17682:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 141514:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 141568:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 78:                        // 'array'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 145:                       // 'function'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 242:                       // 'structured-item'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15014:                     // 'json' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15028:                     // 'mod' '#'
    case 15029:                     // 'modify' '#'
    case 15030:                     // 'module' '#'
    case 15032:                     // 'namespace' '#'
    case 15034:                     // 'ne' '#'
    case 15040:                     // 'nodes' '#'
    case 15042:                     // 'object' '#'
    case 15046:                     // 'only' '#'
    case 15047:                     // 'option' '#'
    case 15048:                     // 'or' '#'
    case 15049:                     // 'order' '#'
    case 15050:                     // 'ordered' '#'
    case 15051:                     // 'ordering' '#'
    case 15054:                     // 'parent' '#'
    case 15060:                     // 'preceding' '#'
    case 15061:                     // 'preceding-sibling' '#'
    case 15064:                     // 'processing-instruction' '#'
    case 15066:                     // 'rename' '#'
    case 15067:                     // 'replace' '#'
    case 15068:                     // 'return' '#'
    case 15069:                     // 'returning' '#'
    case 15070:                     // 'revalidation' '#'
    case 15072:                     // 'satisfies' '#'
    case 15073:                     // 'schema' '#'
    case 15076:                     // 'score' '#'
    case 15077:                     // 'self' '#'
    case 15082:                     // 'sliding' '#'
    case 15083:                     // 'some' '#'
    case 15084:                     // 'stable' '#'
    case 15085:                     // 'start' '#'
    case 15088:                     // 'strict' '#'
    case 15092:                     // 'text' '#'
    case 15096:                     // 'to' '#'
    case 15097:                     // 'treat' '#'
    case 15098:                     // 'try' '#'
    case 15099:                     // 'tumbling' '#'
    case 15100:                     // 'type' '#'
    case 15102:                     // 'union' '#'
    case 15104:                     // 'unordered' '#'
    case 15105:                     // 'updating' '#'
    case 15108:                     // 'validate' '#'
    case 15109:                     // 'value' '#'
    case 15110:                     // 'variable' '#'
    case 15111:                     // 'version' '#'
    case 15114:                     // 'where' '#'
    case 15115:                     // 'while' '#'
    case 15118:                     // 'with' '#'
    case 15122:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case -10:
    case 27412:                     // '{' ';'
      parse_BlockExpr();
      break;
    case -11:
      parse_ObjectConstructor();
      break;
    case 68:                        // '['
      parse_ArrayConstructor();
      break;
    case 278:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 184:                       // 'namespace'
      lookahead2W(256);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 216:                       // 'processing-instruction'
      lookahead2W(254);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 276:                       // '{'
      lookahead2W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      break;
    case 82:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(259);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
      break;
    case 96:                        // 'comment'
    case 244:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 202:                       // 'ordered'
    case 256:                       // 'unordered'
      lookahead2W(139);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 93:                        // 'child'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 180:                       // 'mod'
    case 181:                       // 'modify'
    case 182:                       // 'module'
    case 186:                       // 'ne'
    case 192:                       // 'nodes'
    case 194:                       // 'object'
    case 198:                       // 'only'
    case 199:                       // 'option'
    case 200:                       // 'or'
    case 201:                       // 'order'
    case 203:                       // 'ordering'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
    case 218:                       // 'rename'
    case 219:                       // 'replace'
    case 220:                       // 'return'
    case 221:                       // 'returning'
    case 222:                       // 'revalidation'
    case 224:                       // 'satisfies'
    case 225:                       // 'schema'
    case 228:                       // 'score'
    case 229:                       // 'self'
    case 234:                       // 'sliding'
    case 235:                       // 'some'
    case 236:                       // 'stable'
    case 237:                       // 'start'
    case 240:                       // 'strict'
    case 248:                       // 'to'
    case 249:                       // 'treat'
    case 250:                       // 'try'
    case 251:                       // 'tumbling'
    case 252:                       // 'type'
    case 254:                       // 'union'
    case 257:                       // 'updating'
    case 260:                       // 'validate'
    case 261:                       // 'value'
    case 262:                       // 'variable'
    case 263:                       // 'version'
    case 266:                       // 'where'
    case 267:                       // 'while'
    case 270:                       // 'with'
    case 274:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2836                  // '{' Wildcard
     || lk == 3348                  // '{' EQName^Token
     || lk == 4372                  // '{' IntegerLiteral
     || lk == 4884                  // '{' DecimalLiteral
     || lk == 5396                  // '{' DoubleLiteral
     || lk == 5908                  // '{' StringLiteral
     || lk == 16148                 // '{' '$'
     || lk == 16660                 // '{' '%'
     || lk == 17684                 // '{' '('
     || lk == 18196                 // '{' '(#'
     || lk == 20756                 // '{' '+'
     || lk == 21780                 // '{' '-'
     || lk == 22804                 // '{' '.'
     || lk == 23316                 // '{' '..'
     || lk == 23828                 // '{' '/'
     || lk == 24340                 // '{' '//'
     || lk == 27924                 // '{' '<'
     || lk == 28436                 // '{' '<!--'
     || lk == 30484                 // '{' '<?'
     || lk == 34068                 // '{' '@'
     || lk == 35092                 // '{' '['
     || lk == 36116                 // '{' 'after'
     || lk == 37140                 // '{' 'allowing'
     || lk == 37652                 // '{' 'ancestor'
     || lk == 38164                 // '{' 'ancestor-or-self'
     || lk == 38676                 // '{' 'and'
     || lk == 39700                 // '{' 'append'
     || lk == 40212                 // '{' 'array'
     || lk == 40724                 // '{' 'as'
     || lk == 41236                 // '{' 'ascending'
     || lk == 41748                 // '{' 'at'
     || lk == 42260                 // '{' 'attribute'
     || lk == 42772                 // '{' 'base-uri'
     || lk == 43284                 // '{' 'before'
     || lk == 43796                 // '{' 'boundary-space'
     || lk == 44308                 // '{' 'break'
     || lk == 45332                 // '{' 'case'
     || lk == 45844                 // '{' 'cast'
     || lk == 46356                 // '{' 'castable'
     || lk == 46868                 // '{' 'catch'
     || lk == 47892                 // '{' 'child'
     || lk == 48404                 // '{' 'collation'
     || lk == 49428                 // '{' 'comment'
     || lk == 49940                 // '{' 'constraint'
     || lk == 50452                 // '{' 'construction'
     || lk == 51988                 // '{' 'context'
     || lk == 52500                 // '{' 'continue'
     || lk == 53012                 // '{' 'copy'
     || lk == 53524                 // '{' 'copy-namespaces'
     || lk == 54036                 // '{' 'count'
     || lk == 54548                 // '{' 'decimal-format'
     || lk == 55572                 // '{' 'declare'
     || lk == 56084                 // '{' 'default'
     || lk == 56596                 // '{' 'delete'
     || lk == 57108                 // '{' 'descendant'
     || lk == 57620                 // '{' 'descendant-or-self'
     || lk == 58132                 // '{' 'descending'
     || lk == 60692                 // '{' 'div'
     || lk == 61204                 // '{' 'document'
     || lk == 61716                 // '{' 'document-node'
     || lk == 62228                 // '{' 'element'
     || lk == 62740                 // '{' 'else'
     || lk == 63252                 // '{' 'empty'
     || lk == 63764                 // '{' 'empty-sequence'
     || lk == 64276                 // '{' 'encoding'
     || lk == 64788                 // '{' 'end'
     || lk == 65812                 // '{' 'eq'
     || lk == 66324                 // '{' 'every'
     || lk == 67348                 // '{' 'except'
     || lk == 67860                 // '{' 'exit'
     || lk == 68372                 // '{' 'external'
     || lk == 68884                 // '{' 'first'
     || lk == 69396                 // '{' 'following'
     || lk == 69908                 // '{' 'following-sibling'
     || lk == 70420                 // '{' 'for'
     || lk == 72468                 // '{' 'ft-option'
     || lk == 74516                 // '{' 'function'
     || lk == 75028                 // '{' 'ge'
     || lk == 76052                 // '{' 'group'
     || lk == 77076                 // '{' 'gt'
     || lk == 77588                 // '{' 'idiv'
     || lk == 78100                 // '{' 'if'
     || lk == 78612                 // '{' 'import'
     || lk == 79124                 // '{' 'in'
     || lk == 79636                 // '{' 'index'
     || lk == 81684                 // '{' 'insert'
     || lk == 82196                 // '{' 'instance'
     || lk == 82708                 // '{' 'integrity'
     || lk == 83220                 // '{' 'intersect'
     || lk == 83732                 // '{' 'into'
     || lk == 84244                 // '{' 'is'
     || lk == 84756                 // '{' 'item'
     || lk == 85268                 // '{' 'json'
     || lk == 85780                 // '{' 'json-item'
     || lk == 87316                 // '{' 'last'
     || lk == 87828                 // '{' 'lax'
     || lk == 88340                 // '{' 'le'
     || lk == 89364                 // '{' 'let'
     || lk == 90388                 // '{' 'loop'
     || lk == 91412                 // '{' 'lt'
     || lk == 92436                 // '{' 'mod'
     || lk == 92948                 // '{' 'modify'
     || lk == 93460                 // '{' 'module'
     || lk == 94484                 // '{' 'namespace'
     || lk == 94996                 // '{' 'namespace-node'
     || lk == 95508                 // '{' 'ne'
     || lk == 98068                 // '{' 'node'
     || lk == 98580                 // '{' 'nodes'
     || lk == 99604                 // '{' 'object'
     || lk == 101652                // '{' 'only'
     || lk == 102164                // '{' 'option'
     || lk == 102676                // '{' 'or'
     || lk == 103188                // '{' 'order'
     || lk == 103700                // '{' 'ordered'
     || lk == 104212                // '{' 'ordering'
     || lk == 105748                // '{' 'parent'
     || lk == 108820                // '{' 'preceding'
     || lk == 109332                // '{' 'preceding-sibling'
     || lk == 110868                // '{' 'processing-instruction'
     || lk == 111892                // '{' 'rename'
     || lk == 112404                // '{' 'replace'
     || lk == 112916                // '{' 'return'
     || lk == 113428                // '{' 'returning'
     || lk == 113940                // '{' 'revalidation'
     || lk == 114964                // '{' 'satisfies'
     || lk == 115476                // '{' 'schema'
     || lk == 115988                // '{' 'schema-attribute'
     || lk == 116500                // '{' 'schema-element'
     || lk == 117012                // '{' 'score'
     || lk == 117524                // '{' 'self'
     || lk == 120084                // '{' 'sliding'
     || lk == 120596                // '{' 'some'
     || lk == 121108                // '{' 'stable'
     || lk == 121620                // '{' 'start'
     || lk == 123156                // '{' 'strict'
     || lk == 124180                // '{' 'structured-item'
     || lk == 124692                // '{' 'switch'
     || lk == 125204                // '{' 'text'
     || lk == 127252                // '{' 'to'
     || lk == 127764                // '{' 'treat'
     || lk == 128276                // '{' 'try'
     || lk == 128788                // '{' 'tumbling'
     || lk == 129300                // '{' 'type'
     || lk == 129812                // '{' 'typeswitch'
     || lk == 130324                // '{' 'union'
     || lk == 131348                // '{' 'unordered'
     || lk == 131860                // '{' 'updating'
     || lk == 133396                // '{' 'validate'
     || lk == 133908                // '{' 'value'
     || lk == 134420                // '{' 'variable'
     || lk == 134932                // '{' 'version'
     || lk == 136468                // '{' 'where'
     || lk == 136980                // '{' 'while'
     || lk == 138516                // '{' 'with'
     || lk == 140564                // '{' 'xquery'
     || lk == 141588                // '{' '{'
     || lk == 142612                // '{' '{|'
     || lk == 144660)               // '{' '}'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          memoize(14, e0A, -10);
          lk = -14;
        }
        catch (p10A)
        {
          lk = -11;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(14, e0A, -11);
        }
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      try_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17588:                     // 'mod' '('
    case 17589:                     // 'modify' '('
    case 17590:                     // 'module' '('
    case 17592:                     // 'namespace' '('
    case 17594:                     // 'ne' '('
    case 17600:                     // 'nodes' '('
    case 17602:                     // 'object' '('
    case 17606:                     // 'only' '('
    case 17607:                     // 'option' '('
    case 17608:                     // 'or' '('
    case 17609:                     // 'order' '('
    case 17610:                     // 'ordered' '('
    case 17611:                     // 'ordering' '('
    case 17614:                     // 'parent' '('
    case 17620:                     // 'preceding' '('
    case 17621:                     // 'preceding-sibling' '('
    case 17626:                     // 'rename' '('
    case 17627:                     // 'replace' '('
    case 17628:                     // 'return' '('
    case 17629:                     // 'returning' '('
    case 17630:                     // 'revalidation' '('
    case 17632:                     // 'satisfies' '('
    case 17633:                     // 'schema' '('
    case 17636:                     // 'score' '('
    case 17637:                     // 'self' '('
    case 17642:                     // 'sliding' '('
    case 17643:                     // 'some' '('
    case 17644:                     // 'stable' '('
    case 17645:                     // 'start' '('
    case 17648:                     // 'strict' '('
    case 17656:                     // 'to' '('
    case 17657:                     // 'treat' '('
    case 17658:                     // 'try' '('
    case 17659:                     // 'tumbling' '('
    case 17660:                     // 'type' '('
    case 17662:                     // 'union' '('
    case 17664:                     // 'unordered' '('
    case 17665:                     // 'updating' '('
    case 17668:                     // 'validate' '('
    case 17669:                     // 'value' '('
    case 17670:                     // 'variable' '('
    case 17671:                     // 'version' '('
    case 17674:                     // 'where' '('
    case 17675:                     // 'while' '('
    case 17678:                     // 'with' '('
    case 17682:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 141514:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 141568:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 78:                        // 'array'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 145:                       // 'function'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 242:                       // 'structured-item'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15014:                     // 'json' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15028:                     // 'mod' '#'
    case 15029:                     // 'modify' '#'
    case 15030:                     // 'module' '#'
    case 15032:                     // 'namespace' '#'
    case 15034:                     // 'ne' '#'
    case 15040:                     // 'nodes' '#'
    case 15042:                     // 'object' '#'
    case 15046:                     // 'only' '#'
    case 15047:                     // 'option' '#'
    case 15048:                     // 'or' '#'
    case 15049:                     // 'order' '#'
    case 15050:                     // 'ordered' '#'
    case 15051:                     // 'ordering' '#'
    case 15054:                     // 'parent' '#'
    case 15060:                     // 'preceding' '#'
    case 15061:                     // 'preceding-sibling' '#'
    case 15064:                     // 'processing-instruction' '#'
    case 15066:                     // 'rename' '#'
    case 15067:                     // 'replace' '#'
    case 15068:                     // 'return' '#'
    case 15069:                     // 'returning' '#'
    case 15070:                     // 'revalidation' '#'
    case 15072:                     // 'satisfies' '#'
    case 15073:                     // 'schema' '#'
    case 15076:                     // 'score' '#'
    case 15077:                     // 'self' '#'
    case 15082:                     // 'sliding' '#'
    case 15083:                     // 'some' '#'
    case 15084:                     // 'stable' '#'
    case 15085:                     // 'start' '#'
    case 15088:                     // 'strict' '#'
    case 15092:                     // 'text' '#'
    case 15096:                     // 'to' '#'
    case 15097:                     // 'treat' '#'
    case 15098:                     // 'try' '#'
    case 15099:                     // 'tumbling' '#'
    case 15100:                     // 'type' '#'
    case 15102:                     // 'union' '#'
    case 15104:                     // 'unordered' '#'
    case 15105:                     // 'updating' '#'
    case 15108:                     // 'validate' '#'
    case 15109:                     // 'value' '#'
    case 15110:                     // 'variable' '#'
    case 15111:                     // 'version' '#'
    case 15114:                     // 'where' '#'
    case 15115:                     // 'while' '#'
    case 15118:                     // 'with' '#'
    case 15122:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case -10:
    case 27412:                     // '{' ';'
      try_BlockExpr();
      break;
    case -11:
      try_ObjectConstructor();
      break;
    case 68:                        // '['
      try_ArrayConstructor();
      break;
    case 278:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    case -14:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    shift(278);                     // '{|'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 281)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    shift(281);                     // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    shiftT(278);                    // '{|'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 281)                  // '|}'
    {
      try_Expr();
    }
    shiftT(281);                    // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    shift(276);                     // '{'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 282)                  // '}'
    {
      whitespace();
      parse_PairConstructorList();
    }
    shift(282);                     // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    shiftT(276);                    // '{'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 282)                  // '}'
    {
      try_PairConstructorList();
    }
    shiftT(282);                    // '}'
  }

  function parse_PairConstructorList()
  {
    eventHandler.startNonterminal("PairConstructorList", e0);
    parse_PairConstructor();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_PairConstructor();
    }
    eventHandler.endNonterminal("PairConstructorList", e0);
  }

  function try_PairConstructorList()
  {
    try_PairConstructor();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(267);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      try_PairConstructor();
    }
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    parse_ExprSingle();
    shift(49);                      // ':'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    shiftT(49);                     // ':'
    lookahead1W(267);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    shift(68);                      // '['
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 69)                   // ']'
    {
      whitespace();
      parse_Expr();
    }
    shift(69);                      // ']'
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    shiftT(68);                     // '['
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    if (l1 != 69)                   // ']'
    {
      try_Expr();
    }
    shiftT(69);                     // ']'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    shift(276);                     // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    whitespace();
    parse_StatementsAndOptionalExpr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    shiftT(276);                    // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
    try_StatementsAndOptionalExpr();
    shiftT(282);                    // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    shift(145);                     // 'function'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(37);                      // ')'
    lookahead1W(148);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_ReturnType();
    }
    lookahead1W(118);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
      whitespace();
      parse_StatementsAndOptionalExpr();
      shift(282);                   // '}'
      break;
    default:
      shift(133);                   // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function parse_ReturnType()
  {
    eventHandler.startNonterminal("ReturnType", e0);
    shift(79);                      // 'as'
    lookahead1W(260);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("ReturnType", e0);
  }

  function shift(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1 > size ? size : e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function shiftT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      b0 = e0;
      e0 = b1;
      eventHandler.whitespace(b0, e0);
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 22)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e > ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new self.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;
  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }
        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    return (result & 511) - 1;
  }
}

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 284; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 3694 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 1) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 3) + XQueryParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.MAP0 =
[ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
];

XQueryParser.MAP1 =
[ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181, 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440, 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
];

XQueryParser.MAP2 =
[ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30, 38
];

XQueryParser.INITIAL =
[ 1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287
];

XQueryParser.TRANSITION =

];

XQueryParser.EXPECTED =
[ 1039, 1047, 1048, 1046, 1042, 1052, 1056, 1060, 1064, 1068, 1446, 1074, 2948, 2053, 1092, 1446, 2490, 1670, 1213, 1080, 1084, 1085, 1446, 1089, 1446, 1446, 2818, 1098, 1103, 1108, 1187, 1181, 1181, 1114, 1118, 1446, 1933, 1123, 1446, 1136, 1098, 1098, 1204, 1108, 1108, 1171, 1181, 1181, 1130, 1134, 1446, 1446, 1140, 1446, 1147, 1098, 1152, 1108, 1108, 1109, 1181, 1181, 1182, 1158, 1446, 1446, 1238, 1668, 1098, 1148, 1108, 1108, 1206, 1181, 1181, 1165, 1446, 3130, 2162, 1098, 1099, 1108, 1177, 1181, 1215, 1219, 2143, 1136, 1098, 1186, 1110, 1181, 1191, 3130, 2153, 1099, 1108, 1180, 1217, 2659, 2819, 1197, 1173, 1201, 1104, 1235, 1210, 1224, 1154, 1228, 1232, 1168, 1243, 1247, 1251, 1255, 1259, 1261, 1266, 1262, 1270, 1274, 1278, 1282, 1286, 1290, 1220, 1295, 1890, 1296, 1446, 1446, 1446, 1446, 1375, 2489, 1446, 1446, 1446, 2385, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1076, 1446, 1446, 1446, 1446, 2986, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1300, 1304, 1305, 1309, 1405, 1315, 1318, 1322, 1326, 1330, 1446, 1446, 1804, 1334, 2315, 1338, 2350, 1142, 1143, 1342, 1346, 1446, 1446, 2834, 1352, 1362, 1369, 1446, 1126, 1446, 2386, 1379, 1446, 1384, 1390, 1446, 2987, 2588, 1396, 2688, 1457, 1446, 1518, 1446, 1446, 2269, 1446, 1446, 1446, 1402, 1446, 1441, 1897, 1409, 1413, 1446, 1447, 1419, 1446, 1447, 1419, 1446, 1446, 1193, 1446, 2988, 3136, 2482, 1446, 2617, 1425, 1446, 1448, 1431, 1446, 1918, 1446, 2648, 1436, 1457, 1348, 1457, 1380, 1440, 1446, 1445, 3050, 1452, 1446, 1456, 1311, 1446, 1916, 2325, 1463, 2125, 1347, 1472, 2317, 1909, 1478, 3010, 2343, 2076, 2746, 2758, 1482, 2765, 2077, 1799, 1486, 2744, 1493, 1358, 1446, 1446, 2131, 1446, 2559, 1386, 1365, 1497, 1501, 1505, 1509, 1515, 2369, 1569, 2450, 1522, 2538, 1526, 1530, 1536, 2479, 2088, 1457, 1971, 1540, 1544, 1548, 1552, 1557, 1446, 2103, 1446, 1532, 1446, 2479, 2082, 1563, 1568, 2137, 1573, 1577, 3026, 1446, 1446, 2116, 1446, 1446, 3027, 1446, 1586, 1938, 1584, 2123, 1647, 1590, 1432, 1594, 1446, 2517, 1600, 1446, 2517, 1600, 1446, 2872, 1606, 1612, 1616, 1620, 1626, 1446, 1239, 1633, 1446, 1596, 1640, 3118, 2782, 1645, 1651, 1863, 1446, 1863, 1446, 1602, 1446, 2675, 2173, 1655, 2685, 1559, 1866, 2685, 3124, 1659, 1665, 2904, 2903, 3055, 2673, 1674, 1678, 3047, 2266, 2239, 1682, 1686, 1690, 1694, 1698, 2892, 1702, 1715, 1719, 1723, 1727, 1731, 1446, 2332, 1773, 1737, 1744, 1748, 1751, 1755, 1758, 1446, 1772, 2979, 1777, 1781, 2506, 1788, 1792, 1635, 1636, 1446, 2668, 2874, 1796, 1808, 2784, 1815, 1819, 1823, 2304, 1828, 1446, 2430, 1446, 1446, 2334, 1853, 2583, 1834, 1843, 1446, 2069, 1446, 1446, 1954, 1446, 1446, 2070, 1446, 1446, 1622, 1608, 1847, 1851, 1857, 1641, 1871, 1446, 2225, 1956, 1446, 2225, 1956, 1446, 2374, 1885, 1876, 1811, 1446, 1883, 1446, 1947, 1889, 1446, 1511, 1446, 1291, 2287, 1894, 1901, 1906, 1446, 1906, 1446, 1913, 1446, 1740, 1922, 1446, 1932, 1733, 1446, 1932, 1830, 1094, 1732, 1446, 1937, 2066, 2439, 2671, 1945, 1942, 2455, 1489, 2323, 1951, 1709, 1711, 1629, 1161, 1962, 1968, 1977, 1980, 1984, 1446, 1119, 1994, 1999, 2003, 2007, 2011, 2015, 2019, 2023, 1986, 1872, 2093, 1928, 2028, 2032, 2036, 1802, 2040, 1446, 1446, 2044, 1580, 2050, 2059, 2063, 2074, 2046, 1446, 2024, 2081, 1446, 2086, 1446, 1446, 1988, 2092, 2097, 2109, 2113, 1446, 2120, 1446, 1446, 2129, 1446, 1558, 2135, 1446, 1446, 2141, 2535, 2866, 2147, 1446, 1990, 1446, 1446, 3096, 1446, 1446, 3096, 1446, 1446, 1466, 2151, 2157, 2204, 1458, 2161, 1446, 2914, 1446, 1446, 1764, 1446, 3053, 2166, 2170, 1446, 2182, 1446, 2187, 1446, 2916, 1957, 2192, 2202, 2305, 1446, 2210, 2496, 1824, 3112, 2217, 1761, 1459, 1558, 2224, 2229, 2841, 2969, 2682, 2815, 2233, 2248, 2236, 2243, 1837, 1839, 2247, 2252, 2100, 1446, 1446, 1446, 1446, 2918, 1766, 2256, 2260, 2273, 2277, 2281, 2284, 1446, 2889, 1902, 2985, 2524, 2433, 2299, 2576, 2212, 2213, 2303, 1415, 1457, 2309, 1958, 2321, 2329, 1446, 2976, 1446, 1398, 1446, 1553, 2338, 2342, 2751, 1446, 2347, 2503, 2354, 2358, 1558, 2363, 1446, 1995, 2368, 1446, 1421, 2364, 2373, 2733, 2378, 2383, 2390, 3044, 1446, 2715, 1446, 1446, 1860, 1446, 1446, 1860, 2719, 2733, 2397, 2176, 2401, 1946, 2461, 1446, 1446, 2405, 1446, 1473, 2717, 2413, 2417, 2427, 2437, 3061, 1446, 2105, 1446, 1973, 2407, 2443, 2447, 2454, 2459, 2379, 1446, 2465, 2472, 2476, 2486, 2511, 2494, 2701, 2409, 2500, 2510, 2516, 2521, 2528, 2220, 2532, 2542, 2546, 2198, 2312, 2550, 2554, 2563, 2567, 2571, 2575, 1446, 2580, 2592, 2596, 2600, 2604, 2608, 2612, 2616, 1446, 2621, 2393, 1372, 2628, 2632, 2636, 2640, 2652, 3103, 1446, 2708, 2468, 2656, 2665, 2679, 2692, 1558, 2699, 1446, 2705, 1446, 2998, 2712, 1446, 2723, 2624, 1768, 1879, 3159, 1446, 2205, 2727, 1446, 1468, 2732, 1446, 2206, 2982, 1446, 3004, 2737, 2741, 3109, 2750, 1446, 2755, 1446, 1446, 2762, 1446, 1446, 2762, 2769, 3037, 2775, 2420, 2779, 1446, 2788, 1446, 1446, 2795, 1446, 1427, 2801, 3020, 2805, 2646, 1446, 2812, 1446, 2809, 1446, 3067, 2853, 2823, 2643, 2183, 2827, 2863, 2512, 2832, 2838, 1707, 1070, 2359, 2845, 2851, 2857, 1964, 1474, 3084, 2557, 2878, 2955, 3090, 2882, 2293, 2295, 2886, 2896, 2900, 2908, 2912, 1446, 1446, 1446, 2922, 2926, 2930, 2934, 2938, 2942, 2946, 1446, 2055, 2952, 1355, 2791, 2178, 2959, 1867, 2963, 1784, 2967, 1446, 2973, 2423, 2992, 2996, 3002, 1446, 2728, 1446, 1446, 3008, 1446, 3014, 3018, 1446, 3024, 2188, 3031, 3147, 1446, 1446, 2694, 1446, 1446, 2847, 1446, 1446, 2695, 3035, 1446, 3041, 3078, 3141, 3059, 1446, 1446, 3065, 1446, 1446, 3065, 1446, 1446, 3071, 1446, 3075, 1925, 3153, 1446, 1446, 3082, 1446, 1564, 3088, 1446, 1661, 3094, 3100, 2195, 3116, 1446, 3122, 1446, 3128, 1446, 3134, 1705, 3140, 2586, 2797, 1446, 3145, 2771, 1392, 3151, 1446, 3157, 2290, 2828, 2661, 2869, 2422, 3106, 2860, 2263, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1473, 3163, 3166, 3170, 3182, 3186, 3182, 3189, 3181, 3182, 3182, 3182, 3182, 3177, 3173, 3193, 3182, 3197, 3201, 3204, 3210, 3214, 3216, 3206, 3220, 3224, 3228, 3232, 3235, 3239, 3243, 3729, 3929, 3929, 3246, 3929, 3929, 5383, 3929, 3929, 3300, 3929, 3261, 3562, 3273, 4078, 3734, 3929, 3929, 3929, 3277, 3287, 3294, 4847, 3929, 3250, 3929, 3929, 3344, 3929, 4873, 4873, 4873, 4873, 3266, 4873, 4873, 3564, 3564, 3567, 3564, 3564, 3564, 3564, 3267, 3256, 3305, 3562, 3568, 3335, 4081, 3929, 3929, 3929, 3323, 4919, 3377, 4693, 3929, 3252, 3722, 3750, 3365, 3315, 3269, 3334, 4080, 3732, 3929, 3929, 3559, 4873, 5799, 4692, 3929, 3929, 3688, 3929, 3929, 3560, 4873, 4873, 4873, 4195, 4873, 4873, 4873, 4874, 3564, 3267, 3264, 3331, 3339, 3929, 3342, 3929, 3738, 3256, 3367, 3317, 3321, 3560, 4873, 3564, 3309, 3256, 3256, 3365, 3371, 3564, 3564, 3564, 3567, 3256, 3256, 3256, 3256, 3327, 4195, 3564, 3564, 3564, 3310, 3365, 3359, 3929, 3929, 3813, 3929, 3564, 3564, 3564, 3364, 3929, 5741, 3559, 4873, 4194, 3564, 3564, 3268, 3256, 4193, 4873, 3266, 3564, 3310, 3256, 3256, 3256, 3366, 3348, 3929, 3929, 3929, 3505, 3383, 3256, 3373, 3766, 3256, 3384, 3929, 4872, 4874, 3564, 3268, 3256, 3257, 3373, 4694, 3929, 3929, 3929, 3355, 3566, 3256, 3321, 4194, 3565, 3311, 3560, 3563, 3384, 3561, 3319, 3360, 3388, 3390, 4109, 3394, 3401, 3405, 3429, 3429, 3429, 3429, 3424, 3430, 3412, 3416, 3420, 3428, 3434, 3438, 3442, 3397, 3446, 3450, 3453, 3457, 3460, 3463, 3465, 3469, 3473, 3408, 3477, 3481, 3485, 3696, 3498, 4473, 3929, 3929, 3929, 3512, 3511, 3929, 3929, 3929, 3517, 4964, 4966, 3929, 3523, 3527, 3929, 3929, 3929, 3752, 3534, 3543, 3929, 3929, 3850, 3854, 3578, 3582, 3586, 3589, 3590, 3594, 3597, 3601, 3604, 3608, 3611, 3614, 3618, 3622, 3626, 4965, 3648, 3636, 5178, 3647, 5820, 3654, 4257, 3659, 3929, 3669, 4219, 3694, 3703, 3929, 5714, 3525, 3929, 3929, 3929, 3770, 3790, 3929, 5539, 3707, 3929, 3342, 5695, 3904, 3929, 3289, 3290, 3906, 3929, 4658, 4464, 5227, 4306, 3936, 3718, 3726, 3743, 3929, 3375, 3631, 3929, 3548, 5050, 5064, 3749, 3929, 3929, 3929, 3836, 3758, 3298, 3929, 3929, 3915, 3927, 4893, 3528, 3929, 3929, 3921, 4548, 5744, 4281, 3929, 3929, 3932, 5019, 3929, 5587, 5178, 3929, 3553, 3557, 3572, 5826, 3929, 3929, 4530, 3789, 3794, 3929, 3929, 3972, 4899, 3798, 3806, 3929, 3929, 3972, 5040, 3817, 3826, 3929, 3929, 3972, 5490, 3785, 3929, 3929, 3929, 3869, 4728, 4203, 3770, 3790, 4142, 3929, 3929, 3929, 3894, 4001, 3929, 3929, 3929, 3929, 3252, 3798, 4127, 4203, 3850, 3854, 4139, 3744, 3929, 3929, 3929, 3844, 5313, 5832, 4137, 4141, 3929, 3650, 3929, 3929, 4854, 4858, 4140, 3929, 3929, 3929, 3930, 5557, 3873, 3929, 3929, 3883, 3929, 5107, 3929, 5107, 4780, 3929, 4781, 5020, 3929, 3929, 3738, 5109, 3929, 3290, 3904, 3940, 3947, 3946, 3942, 3951, 3955, 3956, 3956, 3960, 3962, 3963, 3962, 3967, 3971, 3929, 3929, 4017, 4021, 4708, 3978, 3988, 3929, 3683, 3781, 3802, 3995, 4392, 3929, 5597, 5363, 3530, 3929, 4135, 4005, 4013, 3929, 3929, 4065, 4070, 4026, 3929, 3929, 4026, 3375, 3929, 3929, 4049, 4056, 4576, 3997, 5403, 5596, 3929, 3856, 4795, 3529, 3929, 3929, 3929, 3931, 4061, 3929, 3929, 3929, 3972, 4199, 3911, 3929, 3929, 3929, 3974, 5170, 3929, 3929, 4704, 3929, 4075, 5320, 4248, 5165, 3855, 4657, 4085, 3929, 3690, 4699, 5178, 3978, 3251, 3929, 3929, 4101, 3929, 5319, 4247, 5772, 5010, 4113, 3981, 3929, 3929, 4164, 4148, 4148, 4120, 3929, 3929, 4165, 4115, 4709, 4132, 3929, 3929, 4247, 4459, 5170, 3929, 3929, 4706, 3879, 4572, 4576, 5321, 4249, 4655, 3929, 3929, 4274, 3929, 3972, 4146, 4150, 3929, 3735, 3929, 3735, 4154, 4158, 3929, 3929, 4396, 3929, 3929, 3982, 3929, 3929, 3929, 4029, 4107, 3929, 4706, 3929, 4366, 4574, 4181, 5320, 5850, 4644, 4180, 5319, 4886, 4217, 4208, 4673, 3929, 3929, 4424, 5855, 3279, 5321, 4215, 3929, 3766, 4873, 4873, 3563, 3564, 4228, 3929, 4451, 4182, 4233, 4305, 4240, 4273, 4435, 4246, 4434, 4245, 4708, 4241, 3929, 3699, 4502, 3698, 4255, 5609, 4272, 5609, 4272, 3699, 5199, 5610, 4273, 4253, 3281, 4246, 4270, 3929, 3809, 3929, 4549, 3737, 3929, 3896, 3929, 5021, 3770, 4271, 3771, 4182, 5163, 5161, 3929, 3283, 5762, 3710, 4279, 4279, 4211, 4127, 4128, 4405, 3712, 4286, 3929, 3929, 3929, 4052, 3929, 5548, 3754, 4301, 3929, 3842, 3574, 4534, 4651, 5125, 3745, 4537, 4310, 4314, 4318, 4319, 4323, 4327, 4333, 4334, 4331, 4338, 4339, 4339, 4340, 3929, 3844, 4827, 3929, 3846, 3929, 3929, 4905, 3929, 3376, 5780, 4202, 3929, 3929, 3929, 4235, 4524, 5352, 5187, 4364, 4473, 3342, 4273, 3929, 3888, 5737, 4840, 4356, 4374, 4378, 4842, 5051, 4864, 3929, 4387, 4491, 3929, 4413, 3929, 3892, 5107, 3929, 3665, 3929, 3929, 4681, 3640, 4265, 4472, 3929, 4802, 3929, 4518, 3670, 4266, 4421, 3929, 4204, 4203, 3929, 4718, 4428, 4432, 3929, 3929, 3929, 4451, 4440, 4445, 3929, 3929, 4450, 4541, 4470, 3929, 3343, 3929, 3897, 3929, 4294, 3929, 4296, 3929, 5616, 3929, 5461, 4463, 3929, 5347, 4362, 5468, 4800, 3929, 3929, 4457, 4461, 5243, 3929, 4484, 3929, 3931, 5074, 3929, 3972, 4166, 4116, 3929, 3929, 3929, 4035, 4737, 3929, 3929, 3929, 4505, 3929, 5347, 4495, 3929, 3972, 5410, 5415, 4015, 4019, 3929, 3929, 4457, 4490, 4499, 3929, 3929, 3929, 4624, 5347, 3929, 4801, 3929, 3997, 3929, 5743, 4160, 3929, 3929, 3929, 4628, 3929, 5704, 4529, 3929, 3998, 5353, 5435, 3929, 5703, 4528, 3929, 4000, 3929, 3929, 3999, 3528, 4505, 5352, 4800, 3929, 4007, 4653, 3929, 4009, 3929, 4642, 5697, 3929, 3929, 3929, 4695, 4052, 3929, 3929, 3929, 4708, 4545, 3929, 3929, 3301, 4450, 3929, 3929, 3929, 4734, 3929, 5303, 3342, 3929, 4030, 4480, 3929, 3929, 3929, 4516, 4994, 3894, 3929, 3895, 3929, 3929, 3351, 3892, 3737, 3735, 3929, 4039, 3929, 3929, 4086, 5090, 3895, 5020, 3895, 3737, 5022, 3736, 3737, 4554, 4556, 3929, 3929, 4638, 4794, 3929, 3929, 4668, 4806, 4689, 3929, 3929, 3929, 4752, 4504, 3929, 3929, 5097, 4566, 4022, 5334, 4383, 5691, 4570, 4582, 4586, 4590, 4594, 4598, 4602, 4605, 4608, 4612, 4614, 4618, 4634, 4632, 4634, 4621, 3929, 3929, 3929, 4757, 4725, 4816, 3929, 4648, 4662, 4666, 5081, 4672, 3929, 5344, 4398, 4352, 4678, 3929, 3929, 4678, 4687, 5178, 3929, 3929, 4745, 4749, 4210, 3929, 4965, 4768, 5739, 3929, 3929, 3322, 5689, 3899, 5181, 4703, 5110, 5214, 4713, 4722, 3929, 4051, 3558, 3929, 4028, 4478, 4500, 3929, 5400, 4741, 3929, 3929, 4780, 3929, 4780, 4762, 3929, 3929, 3929, 4821, 4756, 4761, 3929, 3929, 4818, 4822, 4505, 3863, 3867, 3929, 3341, 3341, 3929, 4766, 4294, 3929, 3899, 3929, 4066, 3929, 3929, 4087, 5091, 3767, 5433, 4817, 4683, 4716, 3929, 5809, 3929, 4091, 4095, 3751, 3972, 4773, 4777, 3929, 4107, 3929, 3929, 4137, 4141, 4786, 4775, 3929, 3929, 4820, 3910, 4788, 4777, 3929, 3929, 4828, 3972, 3322, 4792, 3929, 3929, 4847, 3929, 5432, 4816, 4833, 4799, 3929, 5147, 3929, 3929, 4872, 4873, 4966, 4295, 4304, 4814, 4826, 3929, 3929, 3929, 4871, 4674, 3929, 4708, 3897, 5180, 5433, 4832, 3929, 4159, 3929, 3377, 3299, 3929, 4503, 4708, 3929, 4837, 3929, 3929, 3929, 4913, 5207, 3929, 3929, 3929, 4965, 3929, 5148, 3929, 4008, 3929, 4408, 3929, 4172, 3929, 4172, 3900, 5432, 3628, 3929, 3929, 3929, 4856, 4860, 3844, 5313, 3929, 3929, 4982, 3929, 5086, 3768, 5434, 3630, 3929, 4174, 3929, 4562, 5312, 3929, 3929, 3929, 5003, 4502, 5148, 4878, 4885, 4293, 3929, 3929, 4296, 3929, 4296, 3929, 4229, 5198, 5520, 3928, 3929, 3928, 3897, 4293, 3929, 3898, 3929, 5228, 3899, 3898, 3929, 4296, 3929, 5547, 3519, 4911, 3929, 5584, 4917, 3769, 3929, 3929, 3929, 4240, 4273, 3929, 3779, 3800, 3744, 4923, 4927, 4934, 4935, 4930, 4939, 4943, 4949, 4953, 4945, 4957, 4957, 4958, 4962, 3929, 4247, 4511, 3929, 3972, 5871, 3929, 3983, 3929, 5572, 5591, 3929, 4731, 4359, 5861, 5581, 4990, 3929, 3929, 3929, 5111, 4846, 5503, 4707, 5051, 3929, 4263, 4465, 3929, 4282, 3929, 3929, 3860, 3929, 5742, 3929, 3929, 3737, 3929, 3894, 5322, 3929, 5000, 5007, 3507, 3929, 4290, 3929, 3929, 4449, 3929, 5018, 3929, 3929, 3642, 5026, 3929, 3929, 3929, 5177, 4628, 3929, 3300, 3929, 4346, 3674, 3681, 3547, 3929, 3539, 5030, 5034, 3929, 3929, 3929, 5337, 5040, 3822, 3929, 3929, 3641, 5042, 3929, 3929, 3929, 5368, 3643, 3929, 3929, 3929, 5405, 5793, 3929, 3929, 3929, 5453, 4626, 3377, 5052, 3929, 3929, 3929, 3721, 4501, 4368, 3929, 3546, 3490, 5496, 5308, 5793, 3929, 3929, 5485, 4370, 3929, 3929, 5068, 3972, 5073, 4863, 3929, 3513, 4450, 5122, 3375, 5406, 3842, 3929, 3655, 5793, 3929, 3739, 4707, 5781, 3929, 3990, 3929, 3929, 4006, 3299, 4452, 4369, 3929, 4439, 4444, 3929, 3895, 4547, 3886, 3929, 5078, 3929, 3929, 5048, 5304, 3929, 5095, 3929, 5486, 5051, 4451, 4368, 3929, 4474, 4050, 4057, 4293, 4450, 3929, 3929, 5228, 3929, 5453, 3929, 3929, 5072, 4862, 3929, 5101, 3929, 3512, 5742, 3929, 5241, 5105, 4986, 3751, 5323, 3296, 4502, 4381, 3929, 4486, 4034, 3929, 3684, 3783, 3744, 5062, 3929, 3929, 4209, 3929, 3929, 3929, 3560, 3929, 5118, 3929, 3929, 5111, 4852, 4515, 4382, 5129, 3929, 4502, 4176, 3929, 4350, 5314, 3549, 3929, 5797, 3929, 3929, 3929, 5526, 5795, 3929, 3929, 3929, 5603, 5136, 5144, 5227, 4451, 4236, 3929, 4975, 3676, 5063, 4465, 3744, 4042, 4464, 5152, 3929, 4507, 3865, 3929, 4121, 5622, 4297, 4174, 3342, 5169, 3342, 5169, 4514, 3537, 4561, 4558, 3929, 4559, 4453, 3929, 5213, 4466, 3929, 4520, 3929, 3929, 5170, 4045, 5196, 5187, 5174, 4560, 5185, 4558, 5193, 5203, 5211, 5218, 5221, 5222, 5226, 3929, 3929, 3929, 5725, 3929, 5232, 4690, 3929, 4524, 5352, 3677, 3929, 3929, 3929, 5771, 3929, 5740, 3929, 4274, 4848, 5238, 5247, 5773, 5254, 5251, 4704, 3918, 5260, 5266, 5262, 5268, 5272, 5276, 5280, 5284, 5287, 5291, 5294, 5293, 5298, 5302, 3929, 3929, 3929, 5742, 5425, 3929, 4694, 5050, 3546, 3490, 3494, 3929, 5318, 3929, 5327, 3923, 4464, 4390, 5227, 3929, 5816, 5331, 5341, 3929, 5782, 3744, 3929, 4547, 3770, 3929, 4547, 3929, 3736, 5322, 3929, 5189, 3929, 3929, 5189, 5361, 5367, 3374, 3929, 4693, 3929, 3929, 3829, 3929, 5372, 3929, 5411, 3929, 4704, 4292, 3929, 3892, 3929, 3929, 4517, 5713, 4819, 4170, 3929, 5416, 3991, 3929, 4708, 4852, 3929, 4186, 4190, 3929, 3765, 3775, 3800, 5841, 5084, 3929, 3929, 5111, 5157, 3753, 5377, 5381, 3929, 3929, 5117, 3929, 3929, 5388, 3821, 3929, 4708, 5234, 4550, 3929, 5393, 5392, 3929, 4751, 5041, 3744, 3929, 3929, 5048, 5036, 3929, 5373, 5397, 4693, 3501, 3929, 3929, 3929, 5766, 4862, 3929, 3929, 3929, 5789, 5048, 4769, 3378, 3492, 5429, 4705, 5779, 3929, 4781, 4779, 3929, 4505, 5110, 3876, 3929, 3929, 3929, 5791, 3972, 5439, 3839, 3929, 4815, 3929, 4778, 5514, 5443, 3839, 3929, 4815, 3929, 5108, 5841, 5843, 3929, 3929, 5139, 3929, 5050, 5457, 3492, 4485, 5465, 3770, 3878, 3929, 4821, 3929, 3929, 4417, 3929, 3929, 5472, 5477, 3929, 4881, 3929, 5701, 5473, 5482, 3929, 3929, 5140, 3929, 5478, 3929, 5420, 3877, 3546, 5494, 3714, 3632, 3929, 5514, 5508, 3929, 4907, 5500, 3929, 4890, 4880, 3929, 4193, 4873, 4873, 4195, 5742, 3379, 5773, 3631, 5525, 3929, 3929, 3929, 5870, 5524, 3760, 3896, 3929, 5819, 4519, 5513, 3488, 5530, 5351, 3929, 4708, 4846, 4159, 3929, 3929, 3929, 5155, 5159, 5336, 5518, 3761, 3929, 3929, 5512, 5536, 4519, 4522, 3989, 3929, 3929, 3929, 4913, 5518, 3929, 4964, 4293, 5179, 5352, 3929, 3929, 4125, 3929, 3929, 4247, 4402, 4086, 3353, 3929, 5556, 5570, 3929, 5570, 5578, 3983, 3929, 5573, 3929, 4971, 3751, 3929, 4253, 3929, 4261, 5594, 4522, 3929, 5601, 3984, 3929, 5574, 3929, 4978, 4224, 3929, 3929, 5608, 5571, 5607, 5351, 5349, 3929, 3929, 3929, 5206, 4827, 3929, 3929, 4897, 4901, 5733, 5834, 3662, 4782, 5757, 3879, 5132, 5614, 5467, 5620, 5626, 5630, 5634, 5638, 5642, 5646, 5650, 5654, 5658, 5662, 5666, 5670, 5673, 5677, 5681, 5685, 3929, 3929, 5256, 4275, 5756, 3929, 3972, 3929, 4996, 3929, 5561, 5708, 5718, 3929, 5722, 5729, 3929, 3888, 3998, 5749, 3929, 3929, 3929, 5311, 3929, 5731, 5753, 5459, 3929, 5014, 4985, 3929, 4344, 4461, 3929, 3875, 5420, 3929, 3878, 3929, 3929, 3929, 3736, 4071, 4506, 3929, 3766, 4521, 4967, 3929, 3929, 3929, 5387, 3820, 5761, 4485, 3929, 3929, 5424, 4691, 5113, 3998, 3929, 3929, 5435, 3873, 3929, 5112, 5770, 4234, 5849, 3929, 3929, 3929, 5447, 3929, 5732, 5805, 3929, 3972, 4093, 4097, 3929, 3905, 3929, 4408, 3670, 5786, 3929, 3929, 3929, 5447, 4693, 4517, 5803, 5807, 3929, 5046, 5056, 3929, 4434, 4245, 3929, 3770, 5321, 3929, 3649, 3929, 3929, 4977, 4223, 3929, 5830, 3929, 3929, 5450, 5042, 4423, 5838, 3929, 3929, 5507, 4159, 4423, 5838, 4248, 5847, 4578, 5805, 3929, 4548, 3929, 3929, 5813, 4423, 5854, 3929, 3929, 5552, 5542, 5859, 3929, 3929, 3929, 5564, 3929, 5786, 4235, 3929, 3929, 5566, 4810, 4103, 5807, 3990, 3929, 5059, 5357, 3929, 4549, 3929, 3929, 4549, 5416, 3929, 4674, 3929, 4868, 5532, 3929, 3929, 3929, 5710, 3929, 3831, 3998, 3929, 3929, 5712, 4818, 3973, 5866, 3929, 3929, 5739, 3929, 3972, 5865, 3929, 3929, 5745, 3929, 4964, 3929, 5180, 4523, 5824, 3832, 3929, 3929, 3929, 5777, 5545, 4965, 3929, 4409, 3929, 3675, 3738, 3973, 3547, 3929, 3929, 5841, 3929, 6277, 6502, 5875, 6282, 5878, 6547, 6266, 5881, 6546, 5889, 6232, 5882, 6232, 5892, 6221, 6267, 5888, 5883, 5884, 6232, 6232, 6232, 6232, 6414, 5887, 5883, 6232, 5891, 6232, 6232, 5894, 6232, 6232, 5922, 5937, 5949, 5938, 5939, 5949, 5944, 5950, 5944, 5944, 5940, 5944, 5941, 5952, 5941, 5944, 5946, 5945, 5946, 5946, 5946, 5946, 5947, 5941, 5948, 5952, 5948, 5944, 5942, 5954, 5956, 5958, 5962, 5960, 5959, 5964, 5966, 5967, 5971, 5967, 5968, 5967, 5969, 5974, 5973, 5976, 5978, 6293, 5998, 5875, 6282, 5896, 6871, 6437, 6282, 6321, 6282, 6282, 6282, 5917, 6456, 6456, 6456, 6456, 5991, 5906, 6379, 6455, 5990, 6019, 5991, 5904, 5904, 5904, 6456, 6456, 5926, 5899, 6456, 6456, 5997, 6282, 6408, 6410, 6282, 5932, 6282, 5933, 6464, 6024, 6282, 6282, 6379, 5924, 6282, 6282, 5924, 6282, 6362, 6010, 5984, 6282, 6003, 6282, 6362, 6282, 6282, 6282, 6004, 6456, 5906, 6455, 5990, 5904, 5902, 6456, 6456, 6456, 5906, 6457, 6019, 6019, 5904, 5904, 6456, 6456, 6282, 6282, 6282, 5980, 5917, 6456, 6456, 6456, 6455, 5905, 6456, 6445, 5926, 5926, 5926, 5926, 6032, 6032, 6008, 5932, 6282, 6282, 6282, 6434, 6024, 6282, 6019, 5904, 6456, 6282, 5896, 6873, 6282, 6282, 6282, 6474, 5903, 6457, 6019, 5904, 6456, 6229, 5904, 6456, 6456, 6456, 6018, 6457, 6019, 5991, 5905, 5906, 6282, 6282, 6282, 5984, 6282, 6282, 6282, 5925, 6543, 5905, 6456, 6456, 6456, 6282, 5905, 6229, 5905, 6229, 5905, 6282, 6650, 6437, 6043, 6515, 6056, 6672, 6088, 6052, 6515, 6520, 6054, 6060, 6058, 6515, 6515, 6083, 6528, 6101, 6761, 6518, 6521, 6516, 6517, 6063, 6065, 6068, 6061, 6057, 6515, 6515, 6519, 6515, 6070, 6072, 6066, 6515, 6515, 6515, 6515, 6125, 6522, 6074, 6515, 6515, 6076, 6515, 6523, 6079, 6082, 6515, 6081, 6055, 6091, 6089, 6090, 6093, 6114, 6092, 6113, 6114, 6114, 6114, 6114, 6115, 6117, 6116, 6117, 6117, 6118, 6119, 6120, 6121, 6121, 6095, 6097, 6099, 6122, 6123, 6124, 6524, 5900, 6515, 6518, 6103, 6108, 6110, 6104, 6105, 6109, 6106, 6112, 6121, 6127, 6129, 6282, 5899, 6282, 5925, 6463, 6321, 6282, 6294, 6006, 6378, 6282, 6508, 6282, 6449, 6646, 6218, 6604, 6282, 6524, 6291, 6282, 6774, 6282, 6270, 6282, 6282, 6282, 6000, 6000, 6027, 6161, 6282, 6282, 5895, 6375, 6282, 6312, 6230, 6366, 6265, 5876, 6282, 6282, 6282, 6015, 6406, 6282, 6284, 6027, 6027, 6137, 6282, 6282, 6379, 6281, 6372, 6028, 6159, 6282, 5899, 6282, 6282, 6282, 6573, 6282, 6282, 6467, 6282, 6311, 6312, 6372, 6282, 6282, 6282, 6019, 6019, 5904, 5904, 5904, 5904, 5905, 6456, 6456, 6031, 6154, 6158, 6282, 6149, 6273, 6282, 6163, 6282, 6677, 6280, 6166, 6279, 6682, 6685, 6501, 6173, 6175, 6178, 6178, 6178, 6178, 6176, 6181, 6180, 6181, 6181, 6183, 6181, 6185, 6187, 6188, 6188, 6188, 6194, 6193, 6194, 6193, 6193, 6189, 6191, 6190, 6190, 6196, 6196, 6198, 6203, 6202, 6204, 6208, 6203, 6205, 6199, 6200, 6210, 6206, 6212, 6282, 6282, 5896, 6282, 6282, 6282, 6512, 6282, 6150, 6135, 6320, 6500, 6163, 6282, 6282, 6282, 6026, 6282, 6026, 6166, 6282, 6282, 6282, 6027, 6221, 6282, 6505, 6282, 6282, 6282, 6032, 6238, 6282, 6241, 6282, 5899, 6451, 6282, 5913, 6669, 6401, 6238, 6282, 6282, 6282, 6037, 6245, 6282, 6282, 6282, 6040, 6282, 6282, 6225, 6248, 6282, 6282, 5916, 6722, 6377, 6247, 6249, 6282, 6282, 5924, 6370, 6252, 6253, 6282, 6282, 5932, 6282, 6282, 6530, 5924, 6254, 6282, 6282, 6254, 6282, 6322, 6228, 6282, 5933, 6378, 6282, 6378, 6282, 6452, 6282, 6432, 6317, 6282, 5917, 6086, 6725, 6727, 6216, 6086, 6726, 6450, 6231, 5926, 5933, 6008, 6008, 6008, 6282, 6282, 6282, 5918, 6282, 6282, 6282, 5923, 6309, 6683, 6282, 6282, 6282, 6148, 6216, 6308, 6310, 6282, 6282, 6282, 6149, 6282, 5903, 6397, 6605, 6282, 6282, 5933, 5933, 5933, 6780, 6282, 6282, 6282, 6229, 6282, 6282, 6282, 5933, 5924, 6316, 5917, 6723, 6377, 5916, 6722, 6323, 6448, 6454, 6216, 6332, 6436, 6683, 6282, 5917, 6328, 6465, 6450, 6217, 6231, 6160, 6436, 6683, 6328, 6448, 6454, 6216, 6610, 6436, 6683, 6282, 6221, 6602, 6310, 6282, 5984, 5899, 5925, 6229, 6435, 6500, 6281, 6722, 6013, 6465, 6450, 6160, 6603, 6683, 6282, 6282, 6231, 6218, 6310, 6282, 5984, 6282, 6283, 6043, 5914, 6282, 5933, 6328, 6465, 6450, 6647, 6604, 6282, 6000, 6282, 6282, 6283, 6277, 6707, 6733, 6282, 6722, 6465, 6230, 6396, 6282, 6282, 6282, 6235, 6686, 6282, 6708, 6281, 6282, 6000, 6437, 6362, 6338, 6279, 6282, 6282, 6283, 6444, 6145, 6683, 6282, 6282, 5933, 6003, 6282, 6282, 6282, 6006, 6375, 6465, 6708, 6282, 6005, 6282, 6282, 6287, 6289, 6282, 6548, 6282, 6282, 5933, 6282, 6282, 6282, 6137, 6282, 6282, 6020, 6282, 6375, 6282, 6282, 6282, 6281, 6471, 6218, 6683, 6282, 6282, 6282, 6370, 5984, 6282, 6010, 6795, 5984, 5899, 6282, 6282, 6661, 6282, 6000, 6137, 6282, 6282, 6282, 6282, 5896, 5914, 6704, 6273, 5928, 6340, 6344, 6503, 6348, 6349, 6349, 6350, 6355, 6352, 6349, 6349, 6349, 6349, 6354, 6355, 6355, 6355, 6356, 6357, 6357, 6357, 6357, 6357, 6358, 6359, 6359, 6359, 6359, 6383, 6360, 6382, 6382, 6382, 6361, 6282, 6282, 6282, 6283, 6043, 5903, 5897, 6485, 6376, 6395, 6425, 6282, 6282, 6282, 6293, 6291, 6338, 6282, 6282, 6282, 6284, 6282, 6282, 6345, 6282, 6282, 6291, 6282, 6282, 6282, 6230, 5876, 6282, 6407, 6282, 6282, 6282, 6286, 6282, 6282, 6037, 6411, 6417, 6282, 6282, 5979, 5903, 6470, 6313, 6647, 6281, 6282, 6282, 6408, 6416, 6418, 6282, 6282, 5979, 6525, 6458, 6342, 6422, 6282, 6282, 6282, 6288, 6282, 6664, 6731, 6282, 6012, 6000, 6282, 6012, 6335, 6310, 5985, 6504, 6282, 6282, 6273, 6470, 6372, 6273, 6504, 6385, 6282, 6282, 6412, 6257, 6598, 6600, 6282, 6411, 6413, 6597, 6599, 6599, 6282, 6282, 6282, 6291, 6410, 6282, 6322, 6451, 5926, 5926, 6008, 6008, 6008, 5932, 6236, 6282, 6282, 6282, 6292, 5982, 6282, 6283, 6442, 6050, 6013, 6609, 6259, 6424, 6310, 6282, 5919, 5920, 6282, 6282, 6011, 5916, 6282, 6664, 6282, 6282, 6023, 6437, 6459, 5983, 6013, 6594, 6700, 6437, 6282, 6424, 6437, 6282, 6282, 6235, 6480, 6481, 6282, 6282, 6133, 6282, 6282, 6485, 6376, 6647, 6282, 6016, 6282, 6282, 5933, 6330, 6454, 6217, 6683, 6282, 6282, 6484, 5917, 5929, 6011, 6608, 6259, 6425, 6282, 6486, 5983, 6013, 6594, 6786, 6437, 6282, 6282, 6282, 6294, 6282, 6283, 6484, 5917, 5983, 6013, 6531, 6471, 6282, 6282, 6146, 6683, 6282, 6282, 6155, 6282, 6282, 6385, 6282, 6322, 6282, 6282, 6275, 6493, 5917, 5983, 6324, 6259, 6729, 6282, 6019, 6019, 6019, 5991, 5904, 6277, 5903, 6531, 6011, 6148, 6282, 6282, 6282, 6234, 6531, 6282, 6282, 6282, 6322, 6282, 6133, 6372, 6505, 6282, 6230, 6282, 6282, 6171, 6756, 6531, 6046, 6834, 6437, 6282, 6282, 6285, 6530, 5924, 6282, 6684, 6282, 6149, 6282, 6282, 6282, 6325, 6285, 6530, 6045, 6159, 6024, 6046, 6386, 6282, 6282, 6282, 6372, 6282, 6294, 6282, 6530, 6464, 6386, 6282, 6282, 6215, 6224, 5933, 5924, 6410, 6282, 6040, 6282, 6482, 6282, 6282, 6282, 6531, 6536, 6024, 6282, 6282, 6282, 6370, 5987, 6282, 6535, 6282, 6282, 6227, 6282, 6282, 6282, 6378, 6378, 6378, 6282, 6452, 5994, 6282, 6282, 6282, 6394, 6282, 6282, 6282, 6404, 6539, 6333, 6683, 6282, 6020, 6282, 6282, 6282, 6341, 6282, 6570, 6300, 6569, 6301, 6370, 6545, 6300, 6302, 6303, 6303, 6303, 6303, 6303, 6304, 6551, 6554, 6552, 6561, 6552, 6555, 6563, 6564, 6563, 6563, 6563, 6563, 6564, 6556, 6557, 6557, 6557, 6557, 6558, 6372, 6273, 6282, 6282, 6243, 6282, 6509, 6566, 6282, 6282, 6271, 6213, 6282, 6283, 6568, 6282, 6021, 6041, 6282, 6027, 6282, 6321, 6282, 6006, 6282, 6282, 6027, 6462, 6282, 6282, 6282, 6572, 6282, 6168, 6282, 6575, 6510, 6282, 6029, 6282, 6282, 6282, 6588, 5907, 5909, 5911, 6282, 6036, 6282, 6282, 6388, 6407, 5908, 5910, 6282, 6282, 6272, 6282, 6526, 6282, 5916, 6322, 6282, 6378, 6282, 6020, 6282, 6278, 6282, 6282, 6394, 5924, 6278, 6282, 6283, 6502, 6365, 6282, 6579, 6282, 6282, 6275, 6525, 5914, 5992, 6371, 6048, 6365, 6367, 6369, 6282, 6282, 6277, 6531, 6046, 6275, 6583, 5993, 6047, 6256, 6256, 6366, 6368, 6282, 6282, 6452, 6000, 6282, 6282, 6282, 6408, 6282, 6027, 6282, 6372, 6526, 6282, 5899, 6539, 6664, 6682, 6282, 6282, 6282, 6146, 6282, 6482, 6282, 6006, 6451, 6282, 6282, 6282, 5985, 6458, 6342, 6313, 6136, 6152, 6282, 6037, 6378, 6282, 6282, 6282, 6421, 6584, 6020, 6437, 6683, 6282, 6027, 6321, 6282, 6451, 6646, 6152, 6282, 6282, 6282, 6410, 6282, 6282, 6282, 6375, 6282, 6000, 6526, 6322, 6533, 6682, 6282, 6408, 6282, 6282, 6282, 6505, 6282, 6282, 6278, 6282, 6282, 6282, 6143, 6371, 6472, 6282, 6282, 6282, 6423, 6539, 6437, 6683, 6282, 6040, 6148, 6040, 6149, 6273, 6229, 6682, 6282, 6470, 6282, 6282, 6283, 6282, 6282, 6282, 6524, 6548, 5933, 6282, 5933, 6282, 6434, 6410, 6282, 6282, 6434, 6537, 6282, 6664, 6491, 6866, 5876, 6482, 6491, 6282, 6282, 6283, 6410, 6282, 6427, 6282, 6282, 5980, 6011, 6276, 6037, 6285, 6038, 6590, 6783, 6607, 6612, 6620, 6619, 6620, 6620, 6616, 6620, 6620, 6618, 6622, 6620, 6614, 6613, 6624, 6627, 6626, 6627, 6627, 6628, 6630, 6630, 6634, 6630, 6632, 6631, 6630, 6630, 6630, 6636, 6638, 6638, 6637, 6637, 6640, 6641, 6282, 6132, 6282, 6282, 5895, 5924, 5984, 6282, 6640, 6637, 6640, 6640, 6640, 6640, 6505, 5903, 6644, 6331, 6649, 6282, 6282, 6229, 5879, 6282, 6527, 6653, 6148, 6282, 6137, 5924, 6282, 6282, 6282, 6230, 6281, 6282, 6282, 6306, 6402, 6433, 6346, 6656, 6658, 6549, 6282, 6282, 6283, 6475, 6423, 6282, 6282, 6282, 6437, 6682, 5912, 6668, 6400, 6282, 6157, 6282, 6282, 5896, 6451, 5980, 5917, 6029, 6221, 6281, 6282, 6282, 6524, 6282, 6282, 6282, 5930, 6664, 6282, 6264, 6683, 6694, 6282, 6282, 6282, 6452, 6282, 6282, 6282, 6285, 5897, 6453, 6654, 6282, 6346, 6295, 6282, 6282, 6283, 6582, 6297, 6282, 6681, 6282, 6164, 6024, 6282, 6133, 6451, 6282, 5988, 6281, 6285, 5980, 6458, 6371, 6263, 6647, 6281, 6282, 6676, 6282, 6676, 6514, 5903, 6680, 6465, 6489, 5995, 6282, 6282, 6283, 6496, 6085, 6282, 6513, 6525, 6679, 6688, 6688, 6399, 6713, 6281, 6282, 6286, 6282, 6037, 6282, 6282, 6282, 5899, 6691, 6497, 6724, 6488, 6734, 6282, 6282, 6282, 6498, 6282, 6282, 6282, 6255, 6282, 6283, 6691, 6696, 6724, 6488, 6698, 6331, 6222, 6282, 6282, 6282, 6431, 6296, 6282, 6282, 6282, 6499, 6282, 6282, 5903, 6464, 6231, 6734, 6696, 6134, 6733, 6281, 6693, 6282, 6282, 6434, 6282, 6282, 6282, 6277, 6525, 6531, 6471, 6218, 6231, 6490, 6282, 6282, 6282, 6504, 6548, 6282, 6283, 6278, 6282, 6275, 6710, 6733, 6282, 6169, 6282, 6282, 6509, 6003, 6712, 6282, 6282, 6282, 6508, 5899, 6702, 6490, 6282, 6282, 6283, 6861, 6854, 6033, 6858, 6646, 6218, 6604, 6282, 6282, 6282, 6577, 6286, 6282, 6394, 6282, 6229, 6019, 6019, 6019, 6019, 5904, 6286, 6282, 6137, 6282, 6229, 6282, 6292, 6229, 6282, 6282, 6372, 6505, 6282, 6437, 6683, 6282, 6229, 6146, 6265, 6282, 6283, 6525, 5927, 6539, 6729, 6683, 6282, 6282, 6650, 6282, 6282, 6283, 6863, 6364, 6024, 6282, 6282, 6283, 6869, 6282, 6362, 6282, 6362, 6363, 6010, 6592, 5925, 6719, 6591, 6593, 6718, 6721, 5934, 5934, 5935, 6469, 6736, 5934, 5934, 5934, 6736, 6738, 6742, 6740, 6739, 6744, 6746, 6751, 6751, 6752, 6753, 6747, 6748, 6748, 6748, 6749, 6751, 6751, 6751, 6753, 6753, 6753, 6753, 6758, 6754, 6755, 6282, 6282, 6285, 6282, 6282, 6282, 6014, 6760, 5981, 6007, 6728, 6282, 6763, 6282, 6282, 6285, 6496, 6531, 6282, 6283, 6768, 6770, 6282, 6282, 6282, 6539, 6392, 6282, 6282, 6392, 6027, 6156, 6282, 6282, 6293, 6586, 6282, 6373, 6281, 6285, 6507, 5903, 6470, 6326, 6505, 6659, 6282, 6234, 6229, 5879, 6283, 6496, 6703, 6776, 6704, 6777, 6282, 6282, 6282, 6548, 6282, 5918, 6025, 6282, 6282, 6026, 6282, 6286, 6505, 6394, 6282, 6291, 6370, 6282, 6370, 6282, 6496, 6085, 6831, 6147, 6603, 6683, 6282, 6380, 6282, 6282, 6370, 6282, 6282, 6282, 6003, 6282, 6294, 6336, 6000, 6282, 6239, 6846, 6282, 6260, 6282, 6282, 6282, 6642, 6379, 6282, 6505, 6336, 6283, 6702, 6782, 6319, 6218, 6604, 6282, 6785, 5999, 6282, 6269, 6663, 6282, 6140, 6282, 6282, 6393, 6282, 5982, 6724, 6319, 6218, 6604, 6539, 6310, 6282, 6282, 6375, 6370, 6375, 6788, 6320, 6310, 6000, 6000, 6282, 6282, 6375, 6548, 6282, 6282, 6282, 6275, 6084, 6447, 6282, 6788, 6429, 6683, 6282, 6282, 6664, 6683, 6282, 6273, 6541, 6148, 6282, 6394, 6000, 6282, 6274, 6282, 6003, 6318, 6429, 6683, 6282, 6275, 5898, 5915, 6282, 6282, 6370, 6370, 6370, 6664, 6282, 6683, 6282, 6410, 6282, 6699, 6282, 6275, 5901, 5982, 6724, 6291, 6282, 6282, 6531, 6689, 6282, 6282, 6220, 6282, 6537, 6282, 6282, 6282, 6664, 6146, 6282, 6282, 6434, 6281, 6282, 6282, 6282, 6020, 6282, 6006, 6410, 6408, 6282, 6027, 6282, 6282, 6250, 6843, 6434, 6410, 6282, 6434, 6410, 6282, 6408, 6282, 6322, 6282, 6410, 6410, 6027, 6282, 6275, 6702, 6231, 6490, 6146, 6282, 6146, 6282, 6282, 6282, 6671, 6146, 6410, 6408, 6408, 6409, 6409, 6409, 6409, 6409, 6282, 6282, 6282, 6682, 6282, 6282, 6285, 6039, 6216, 6221, 6281, 6286, 6282, 6282, 6790, 6543, 6282, 6505, 6003, 6282, 6559, 6282, 6282, 6559, 6508, 6792, 6282, 6077, 6139, 6282, 6282, 6379, 6374, 6793, 6806, 6798, 6798, 6801, 6799, 6798, 6799, 6798, 6797, 6803, 6808, 6807, 6808, 6805, 6808, 6809, 6810, 6813, 6814, 6815, 6816, 6815, 6818, 6811, 6813, 6811, 6813, 6820, 6822, 6822, 6821, 6821, 6824, 6824, 6824, 6824, 6821, 6824, 6824, 6828, 6825, 6826, 6282, 6282, 6282, 6683, 6282, 6282, 6689, 6439, 6282, 6277, 6715, 6282, 6282, 6282, 6510, 6035, 6282, 6282, 6282, 6684, 6282, 6282, 6282, 6233, 6282, 6716, 6282, 6580, 6419, 6282, 6836, 6282, 6281, 6282, 6282, 6283, 6293, 6337, 6282, 6838, 6840, 6282, 6282, 6666, 6282, 6143, 6292, 6282, 6282, 6292, 6282, 6282, 6282, 6378, 6845, 6282, 6282, 6845, 6282, 6487, 6282, 6282, 6391, 6391, 6651, 6282, 6282, 6282, 6730, 6512, 6282, 6282, 6282, 6830, 6853, 5931, 6141, 6428, 6602, 6604, 6282, 6282, 6409, 6410, 6282, 6852, 6854, 6856, 6450, 6002, 6282, 6001, 6003, 6282, 6645, 6231, 6281, 6282, 6282, 6674, 6282, 6167, 6282, 6282, 6000, 6282, 6000, 6034, 6282, 6282, 6282, 6848, 6282, 6394, 6683, 6282, 6282, 5933, 6003, 5933, 6003, 6282, 6830, 6645, 6231, 6222, 6487, 6282, 6024, 6282, 6282, 6693, 6282, 6282, 6282, 6464, 6861, 6854, 6009, 6377, 6525, 5931, 6011, 6465, 6282, 6830, 5885, 6282, 6282, 6702, 5931, 6319, 6436, 6683, 5916, 6282, 6282, 5925, 6282, 6282, 6448, 6282, 6282, 6931, 6282, 6282, 6451, 6282, 6282, 6282, 6860, 6044, 6011, 6465, 6449, 6647, 6310, 6282, 6282, 6142, 6436, 6683, 6282, 6282, 6732, 5924, 5984, 6861, 5983, 6377, 6454, 5982, 6321, 6282, 6294, 6138, 6282, 6461, 6151, 6437, 6282, 6282, 6732, 6772, 6860, 5983, 6465, 6151, 6437, 6282, 6865, 6282, 6282, 6282, 6860, 6337, 6437, 6282, 6282, 6466, 6282, 6144, 6436, 6282, 6282, 6282, 6868, 6219, 6282, 6282, 6282, 6468, 6282, 6282, 6732, 6282, 5916, 6262, 6299, 6282, 5918, 5918, 5918, 6378, 6282, 6282, 6526, 6282, 6148, 6282, 6283, 6293, 6586, 6292, 6502, 6437, 6282, 6282, 6282, 6294, 6282, 6292, 6294, 6282, 6282, 6474, 5980, 6293, 6291, 6282, 6282, 6292, 6502, 6282, 6278, 6294, 6282, 6278, 6282, 6282, 6765, 6282, 6229, 6362, 6282, 6230, 6320, 6500, 6282, 6505, 6282, 6292, 6502, 6282, 6505, 6233, 6282, 6282, 6293, 6282, 6282, 6282, 6474, 6478, 6291, 6278, 6282, 6282, 6292, 6531, 6536, 6875, 6255, 6282, 6282, 6476, 6282, 6006, 6255, 6282, 6006, 6390, 6282, 6314, 6049, 6282, 6877, 6878, 6881, 6375, 6880, 5930, 6282, 6532, 6542, 6883, 6596, 6258, 6885, 6596, 6595, 6595, 6886, 6889, 6595, 6888, 6890, 6889, 6892, 6897, 6893, 6894, 6895, 6899, 6900, 6905, 6905, 6901, 6902, 6912, 6903, 6902, 6906, 6905, 6906, 6905, 6906, 6907, 6909, 6908, 6910, 6914, 6908, 6908, 6922, 6922, 6921, 6922, 6923, 6916, 6917, 6918, 6920, 6926, 6925, 6928, 6460, 6371, 6282, 6282, 6482, 5932, 6321, 6285, 6282, 6282, 6494, 6371, 6930, 6282, 6282, 6282, 6505, 6494, 6371, 6130, 6282, 6282, 6282, 6505, 6506, 6282, 6282, 6282, 6312, 6933, 6282, 6505, 6935, 6282, 6282, 6937, 6282, 6282, 6767, 6769, 6290, 6282, 6282, 6282, 6505, 6692, 6011, 6313, 6291, 6233, 6282, 6282, 6508, 6282, 6282, 6282, 5916, 6030, 6282, 6423, 6170, 6282, 6282, 6170, 6011, 6372, 6282, 5916, 6282, 6282, 5915, 6451, 6440, 6282, 6282, 5918, 6322, 6283, 6939, 6446, 6705, 6447, 6291, 6282, 6282, 6294, 6282, 6282, 6282, 6438, 6282, 6282, 6511, 6282, 6282, 6282, 6842, 6149, 6282, 6149, 6282, 6282, 6779, 6007, 6728, 6310, 6282, 6282, 6319, 6310, 6282, 6282, 6363, 6282, 6692, 6011, 6372, 5916, 6282, 5915, 6282, 6282, 6511, 6268, 6286, 6282, 5924, 6282, 6282, 6833, 6282, 6279, 6398, 6282, 6282, 6014, 6282, 6282, 6282, 6601, 6282, 6439, 5933, 6133, 6282, 6148, 6282, 6255, 6282, 5914, 5931, 6705, 6282, 6282, 6850, 6282, 6850, 6282, 6372, 6282, 6372, 6282, 6149, 6282, 6505, 5914, 5931, 6291, 6282, 6282, 5982, 6585, 6282, 6282, 6660, 6291, 6043, 5914, 6291, 6282, 6282, 6283, 6043, 5899, 6282, 6282, 1048576, 1073741824, 0x80000000, 1075838976, 2097152, 0x80000000, 4194560, 4196352, -2143289344, -2143289344, 4194304, 0x80000000, 37748736, 541065216, 541065216, -2143289344, 4198144, 4196352, 276901888, 8540160, 4194304, 1, 4, 16, 64, 0, 48, 64, 32, 64, 64, 96, 0, 59, 140224, 5505024, -1887436800, 0, 63, 64, 128, 0, 64, 256, 0, 110, 110, 8425488, 4194304, 1024, 0, 128, 128, 512, 512, 1024, 1024, 2048, 0, 256, 256, 257, 37748736, 742391808, 742391808, 775946240, -1371537408, 775946240, 4718592, 775946240, 775946240, 171966464, 171966464, 775946240, 239075328, -1405091840, -1371537408, 239075328, 171966464, 64, 4718592, 2097216, 4720640, 541589504, 4194368, 4194368, 541065280, 541589504, 4194400, -2143289280, 4194368, -2143285440, -2143285408, -2143285408, -2109730976, 775946336, 776470528, -2143285408, 776470528, 775946304, 775946304, -1908404384, 775946304, -1908404384, 2, 8, 32, 128, 1024, 4096, 0, 260, 8392704, 0, 1856, 64, 524288, 64, 896, 8192, 67108864, 0x80000000, 96, 262144, 262144, 8192, 0, 288, 8388608, 0, 384, 0, 512, 2048, 2048, 4096, 4096, 8192, 8192, 16384, 0, 520, 520, 96, 524288, 524288, 0, 2432, 2048, 268435456, 0, 24576, 0, 32768, 32768, 65536, 1048576, 128, 2048, 12288, 0, 12289, 0, 16384, 16384, 32768, 0, 1864, 2, 16, 1024, 98304, 131072, 262144, 1048576, 512, 5120, 2, 536936448, 80, 528, 528, 2097168, 2097168, 268435472, 524304, 1048592, 2097168, 24, 560, 48, 2097680, 1048592, 3145744, 1048592, 20, 560, 48, 3146256, 2097552, 3146256, 28, 16, 8192, 2, 2098064, 163577856, 17, 21, 112, 128, 3584, 8192, 2228784, -161430188, -161430188, -161429680, -161430188, -161429676, -161430188, -161298576, -160299088, -161298576, -161298572, -160774288, -160299084, 146804757, 146812949, 146862101, 146863389, 146863389, 148960541, -161429740, -161429676, 146863421, 148960541, 146863389, -161429676, -160905388, -161429676, -161429676, -161429675, -161349072, -161349072, -161347728, -161347728, -161298572, -161298572, -160774284, -161298572, 16, 262160, -18860267, -160774284, -18729163, 0, 58368, 159383552, 0, 65536, 2097152, 8388608, 33554432, 0, 66048, 0, 77824, 524288, 33554432, 1024, 262144, 2097152, 16777216, 67108864, 0, 131072, 524288, 134217728, 0x80000000, 1, 32768, 196608, 0, 131328, 131072, 16777216, 100663296, -1073741824, 164096, 0, 131584, 2621440, 0, 139264, 0, 150528, 0, 235712, 16777216, 1073774592, 1226014816, 100665360, -2046818288, 100665360, 100665360, -2044196848, 1091799136, 1091799136, 1091803360, 1091799136, 1158908000, 1158908001, 1192462432, 1192462448, 1192462448, 1870638912, 1870655296, 1870638912, 1200851056, 1200851056, 1091799393, 1870655296, 1870655296, 1870655312, 1870655316, 1870655312, 1870655312, 1870638928, 1870655316, 1870655316, 1870655317, 1870655316, 1879043952, 1870655348, 1870655316, 1879027568, 1879043952, 1879043956, 0, 284672, 229440, 1048576, 2097152, 67108864, 134217728, 8, 4194304, 16777216, 0x80000000, 1224736768, 0, 503616, 2048, 100663296, 0, 524288, 2097152, 4194304, 4194304, 0, 40, 0, 44, -2046820352, 0, 605503, 231488, 1090519040, 1157627904, 1191182336, 9437184, 231744, 520000, 7864320, 1862270976, 0, 867391, 1862270976, 1862270976, 16252928, 0, 1048576, 4194304, 25165824, 25165824, 33554432, 8192, 98304, 1048576, 8388608, 134217728, 268435456, 4194432, 3145728, 0, 24, 0, 29, 0, 32, 1, 2, 2, 4, 0, 0x80000000, 0x80000000, 0, 0, 1, 0, 2, 0, 3, 240, 19456, 262144, 0, 4, 8, 0, 6, 0, 7, 150994944, 0, 1049088, 1049088, 12845065, 12845065, 147193865, 128, 6144, 4194304, 251658240, 536870912, 1073741824, 32768, 131072, 1048576, 4096, 83886080, 117440512, 0, 3145728, 16777216, 134217728, 0, 2048, 8192, 229376, 0, 2304, 1536, 8192, 1536, 65536, 4194304, 67108864, 536870912, 9216, 33554432, 262144, 134217728, 1073741824, 50331649, 9476, 512, 8192, 134218240, 1050624, 0, 5242880, 1275208192, 4194312, 4194312, 4194344, 4194312, 541065224, 4203820, -869654016, -869654016, 1279402504, 1279402504, 2143549415, 2143549415, 2143549423, 0, 8388608, 4096, 4194304, 8388608, 16777216, 33554432, -1946157056, 0, 8192, 131072, 0, 1792, 0, 1024, 8192, 65536, 0, 1536, 0x80000000, 2143549423, 2143549423, 2143549415, 1, 16777216, 268435456, 512, 139264, 2760704, -872415232, 0, 19947520, 0, 33554432, 67108864, 1073741824, 1073741824, 262144, 7340032, -2030043136, 0, 331776, 300, 4203520, 4333568, 1275068416, 0, 16777216, 16777216, 0, 999, 259072, 4194304, 4194432, 999, 29619200, 2113929216, 0, 58720256, 1007, 1007, 0, 67108864, 402653184, 536870912, 2048, 1048576, 16777216, 536870912, 300, 0, 83886080, 0, 2097152, 134217728, 536870912, 0, 49152, 0, 57344, 102, 384, 6, 96, 128, 3072, 16384, 65536, 524288, 1048576, 0, 4096, 262144, 524288, 96, 96, 64, 384, 512, 4096, 65536, 131072, 1024, 65536, 262144, 131072, 32768, 256, 384, 8192, 33554432, 0x80000000, 1, 6, 8, 8388608, 96, 384, 104, 104, 0, 134217728, 6, 32, 256, 512, 65536, 7340032, 50331648, 0, 8396800, 4, 32, 384, 4, 64, 1024, 2097152, 268435456, 1073741824, 8, 262144, 512, 0, 8, 8, 16, 0, 9, 0, 12, 0, 15, 16, 16, 17, 20, 16, 20, 48, 16, 28, 0, 16, 32, 0, 21, 53, 4, 256, 1024, 524288, 536870912, 256, 65536, 16777216, 1073741824, 2048, 524288, 32, 4100, 1024, 134217728, 1049088, 270532608, 2097152, 2097152, 0, 23, 5505537, 5587457, 5591557, 147202057, 5587457, 13894153, -1881791493, -1881791493, 0, 134218752, 5587465, 5587457, 13894153, 13894153, 81003049, 4456448, 8388608, 5505024, 0, 134348800, 134348800, 82432, 0, 142606336, 5, 86528, 41, 75497472, 81920, 0, 184549376, 2, 56, 64, 2048, 262144, 536870912, 2048, 134217728, -2113929216, 16777216, 1073743872, 268435968, 229376, 25165824, 92274688, 25165824, 100663296, 402653184, 1610612736, 0, 100663296, 134217728, 805306368, 1073741824, 8388608, 268567040, 16384, 229376, 4194304, 117440512, 2113544, 68423701, -2079059883, -2079059947, 85200917, 68423701, 68423765, 68489237, 68423701, 68423701, 72618005, 68423701, 68425749, 68423703, 85200919, 69488664, 69488664, 70537244, 70537245, 70537245, -2076946339, -2076946403, 70537245, 70537309, 70539293, -2022351745, -2022351617, -2022351745, -2022351617, -2022351617, 0, 243269632, 256, 32768, 1048576, 33554432, 134217728, -2113929216, 0, 268435456, 49152, 266240, 1048576, 67108864, -2080374784, -2080374784, 268288, 0, 301989888, 0, 318767104, 282624, 0, 536870912, 28, 3145728, 192, 351232, 7340032, 5, 16, 1049104, 12, 3145728, 13, 0, 1073741825, 192, 3072, 20480, 0, 1073741824, 0, 262144, 2621440, -1073741824, 20480, 65536, 268435456, 14, 32, 512, 131072, 268435456, 192, 1024, 64, 32768, 33554432, 268435456, 4, 128, 3840, 16384, 262144, 128, 2097152, 1073741824, 4, 2097152, 4, 50331648, 67108864, 128, 50331648, 1073741824, 128, 268435968, 268435968, 268436032, 256, 1536, 2048, 16384, 98304, 393216, 524288, 268435456, 536870912, 9216, 0, 4194304, 50331648, 0x80000000, 256, 536871168, -1879046336, -1879046334, -1879046326, -1879046334, 1073744256, -1879046334, -1879046326, -1845491902, -1878784182, 268444480, 268436288, 268436288, 268436289, 268444480, 268444480, 2100318149, 2100318149, 2100326341, 0, 1090519040, 2100326341, 2100326341, 1, 16, 536936448, 576, 0, 832, 8192, 1, 4036, 19939328, 2080374784, 0, 1, 1024, 768, 8192, 16384, 19922944, 2080374784, 1, 128, 4096, 3584, 16384, 524288, 8, 33554432, 402653184, 2048, 3145728, 128, 131072, 268500992, 4243456, 4096, 1048588, 0, 1258292224, 1124073472, 1124073472, 1124073488, 1124073474, 1124073472, 1392574464, 1124073472, 1073754113, 12289, 1124073472, 12289, 12289, 1098920193, 1132474625, 1098920209, 1132474625, 1132474625, 1124085761, 1124085761, 1124085777, 1258304513, 1124085761, 1400975617, 2132360255, 2132622399, 2132360255, 2132622399, 2132622399, 2141011263, 0, 2140749119, 2141011263, 2, 16384, 3145728, 12545, 25165824, 268435456, 12305, 13313, 12561, 0, 78081, 327155712, 605247, 1058013184, 1073741824, 867647, 1066401792, 0, 1, 12288, 256, 8388608, 1, 30, 32, 1024, 2048, 339968, 327680, 524288, 1, 14, 16, 14, 1024, 16384, 4194304, 134217728, 1, 12, 1024, 8, 134217728, 8, 536870912, 9437184, 0, 68157440, 137363456, 0, 137363456, 66, 66, 100680704, 25165824, 26214400, 92274688, 25165952, 93323264, 92274688, 92274688, 92274720, 93323264, 25165890, 100721928, 100721928, 100787464, 100721664, 100721664, 100853000, 100721928, 125977600, 125846528, 125846528, 125846560, 125977600, 125977600, 127026176, 281843, 281843, 1330419, 281843, 126895104, 125846528, 1330419, 1330419, 72633587, 5524723, 72633587, 92556531, 93605107, 93605107, 5524723, 5524723, 39079155, 97799411, 127290611, 127290611, 131484915, 0, 17408, 33554432, 1073741824, 58624, 0, 124160, 189696, 148480, 50331648, 2, 112
];

XQueryParser.TOKEN =
[
  "(0)",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "Wildcard",
  "EQName",
  "URILiteral",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'check'",
  "'child'",
  "'collation'",
  "'collection'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exit'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'foreach'",
  "'foreign'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json'",
  "'json-item'",
  "'key'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'loop'",
  "'lowercase'",
  "'lt'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'object'",
  "'occurs'",
  "'of'",
  "'on'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unique'",
  "'unordered'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'while'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "'}}'"
];

},
{}],
11:[function(require,module,exports){
'use strict';

exports.TreeOps = {
    flatten: function(node){
        var that = this;
        var value = '';
        if(!node) {
            throw new Error('Invalid node found');
        } else if (node.value === undefined) {
            node.children.forEach(function(child){
                value += that.flatten(child);
            });
        } else {
            value += node.value;
        }
        return value;
    },
    
    concat: function(obj1, obj2, copy){
        var result = copy ? {} : obj1;
        if(copy){
            Object.keys(obj1).forEach(function(key){
                result[key] = obj1[key];
            });
        }
        var keys = Object.keys(obj2);
        keys.forEach(function(key){
            result[key] = obj2[key];
        });
        return result;
    },
    
    removeParentPtr: function(ast){
        if(ast.getParent !== undefined) {
            delete ast.getParent;
        }
        for(var i in ast.children) {
            var child = ast.children[i];
            this.removeParentPtr(child);
        }
    },
    
    inRange: function(p, pos, exclusive){
        if(p && p.sl <= pos.line && pos.line <= p.el) {
            if(p.sl < pos.line && pos.line < p.el) {
                return true;
            } else if(p.sl === pos.line && pos.line < p.el) {
                return p.sc <= pos.col;
            } else if(p.sl === pos.line && p.el === pos.line) {
                return p.sc <= pos.col && pos.col <= p.ec + (exclusive ? 1 : 0);
            } else if(p.sl < pos.line && p.el === pos.line) {
                return pos.col <= p.ec + (exclusive ? 1 : 0);
            }
        }
    },
    
    findNode: function(ast, pos) {
        if(!ast) {
            return;
        }
        var p = ast.pos;
        if(this.inRange(p, pos) === true) {
            for(var i in ast.children) {
                var child = ast.children[i];
                var n = this.findNode(child, pos);
                if(n !== undefined) {
                    return n;
                }
            }
            return ast;
        } else {
            return;
        }
    },
    
    astAsXML: function(node, indent){
        var result =  '';
        indent = indent ? indent : '';
        if(node.value) {
            result += (indent + '<' + node.name + '>' + node.value + '</' + node.name + '>\n');
        }
        result += indent + '<' + node.name + '>\n';
        var that = this;
        node.children.forEach(function(child){
            result += that.astAsXML(child, indent + '  ');
        });
        result += indent + '</' + node.name + '>\n';
        return result;
    }
};
},
{}],
12:[function(require,module,exports){
'use strict';

var JSONiqParser = require('./parsers/JSONiqParser').JSONiqParser;
var XQueryParser = require('./parsers/XQueryParser').XQueryParser;
var JSONParseTreeHandler = require('./parsers/JSONParseTreeHandler').JSONParseTreeHandler;
var Translator = require('./compiler/translator').Translator;
var StyleChecker = require('./formatter/style_checker').StyleChecker;
var completer = require('../lib/completion/completer');
    
var createStaticContext = exports.createStaticContext = function(){
    var StaticContext = require('./compiler/static_context').StaticContext;
    return new StaticContext();
};

var defaults = function(current, def){
    if(!current) {
        return def;
    }
    Object.keys(def).forEach(function(key){
        if(current[key] === undefined){
            current[key] = def[key];
        }
    });
    return current;
};

var convertPosition = function (code, begin, end) {
    var before = code.substring(0, begin);
    var after = code.substring(0, end);
    var startline = before.split('\n').length;
    var startcolumn = begin - before.lastIndexOf('\n');
    var endline = after.split('\n').length;
    var endcolumn = end - after.lastIndexOf('\n');
    var pos = {
        sl: startline - 1,
        sc: startcolumn - 1,
        el: endline - 1,
        ec: endcolumn - 1
    };
    return pos;
};

exports.XQLint = function (source, opts) {

    opts = opts ? opts : {};
    opts = defaults(opts, { styleCheck: false });

    var ast;
    this.getAST = function () {
        return ast;
    };

    var markers = [];
    this.getMarkers = function () {
        return markers;
    };
    
    this.getMarkers = function(type){
        var m = [];
        markers.forEach(function(marker){
            if(marker.type === type || type === undefined){
                m.push(marker);
            }
        });
        return m;
    };

    this.getErrors = function(){
        return this.getMarkers('error');
    };

    this.getWarnings = function(){
        return this.getMarkers('warning');
    };
    
    this.getCompletions = function(pos){
        return completer.complete(source, ast, sctx, pos);
    };

    var syntaxError = false;
    this.hasSyntaxError = function () {
        return syntaxError;
    };

    var sctx = opts.staticContext ? opts.staticContext : createStaticContext();
    var file = opts.fileName ? opts.fileName : '';
    var isJSONiq = ((file.substring(file.length - '.jq'.length).indexOf('.jq') !== -1) && source.indexOf('xquery version') !== 0) || source.indexOf('jsoniq version') === 0;
    var h = new JSONParseTreeHandler(source);
    var parser = isJSONiq ? new JSONiqParser(source, h) : new XQueryParser(source, h);
    try {
        parser.parse_XQuery();
    } catch (e) {
        if (e instanceof parser.ParseException) {
            syntaxError = true;
            h.closeParseTree();
            var pos = convertPosition(source, e.getBegin(), e.getEnd());
            var message = parser.getErrorMessage(e);
            if (pos.sc === pos.ec) {
                pos.ec++;
            }
            markers.push({
                pos: pos,
                type: 'error',
                level: 'error',
                message: message
            });
        } else {
            throw e;
        }
    }
    ast = h.getParseTree();
    if(opts.styleCheck) {
        markers = markers.concat(new StyleChecker(ast, source).getMarkers());
    }
    var translator = new Translator(sctx, ast);
    markers = markers.concat(translator.getMarkers());
};

},
{"../lib/completion/completer":6,"./compiler/static_context":4,"./compiler/translator":5,"./formatter/style_checker":7,"./parsers/JSONParseTreeHandler":8,"./parsers/JSONiqParser":9,"./parsers/XQueryParser":10}]},{},[12])(12)

});

define("ace/mode/xquery_worker",["require","exports","module","ace/lib/oop","ace/worker/mirror","ace/mode/xquery/xqlint"], function(require, exports, module) {
"use strict";
    
var oop = require("../lib/oop");
var Mirror = require("../worker/mirror").Mirror;
var XQLintLib = require("./xquery/xqlint");
var XQLint =  XQLintLib.XQLint;

var getModuleResolverFromModules = function(modules){
    return function(uri){
            var index = modules;
            var mod = index[uri];
            var variables = {};
            var functions = {};
            mod.functions.forEach(function(fn){
                functions[uri + '#' + fn.name + '#' + fn.arity] = {
                    params: []
                };
                fn.parameters.forEach(function(param){
                    functions[uri + '#' + fn.name + '#' + fn.arity].params.push('$' + param.name);
                });
            });
            mod.variables.forEach(function(variable){
                var name = variable.name.substring(variable.name.indexOf(':') + 1);
                variables[uri + '#' + name] = { type: 'VarDecl', annotations: [] };
            });
            return {
                variables: variables,
                functions: functions
            };
    };
};

var XQueryWorker = exports.XQueryWorker = function(sender) {
    Mirror.call(this, sender);
    this.setTimeout(200);
    this.opts = {
        styleCheck: false
    };
    var that = this;

    this.sender.on("complete", function(e){
        if(that.xqlint) {
            var pos = { line: e.data.pos.row, col: e.data.pos.column };
            var proposals = that.xqlint.getCompletions(pos);
            that.sender.emit("complete", proposals);
        }
    });

    this.sender.on("setAvailableModuleNamespaces", function(e){
        that.availableModuleNamespaces = e.data;
    });

    this.sender.on("setModuleResolver", function(e){
        that.moduleResolver = getModuleResolverFromModules(e.data);
    });
};

oop.inherits(XQueryWorker, Mirror);

(function() {
    
    this.onUpdate = function() {
        this.sender.emit("start");
        var value = this.doc.getValue();
        var sctx = XQLintLib.createStaticContext();
        if(this.moduleResolver) {
            sctx.setModuleResolver(this.moduleResolver);
        }
        if(this.availableModuleNamespaces) {
            sctx.availableModuleNamespaces = this.availableModuleNamespaces;
        }
        var opts = {
            styleCheck: this.styleCheck,
            staticContext: sctx
        };
        this.xqlint = new XQLint(value, opts);
        this.sender.emit("markers", this.xqlint.getMarkers());
    };
}).call(XQueryWorker.prototype);

});

define("ace/lib/es5-shim",["require","exports","module"], function(require, exports, module) {

function Empty() {}

if (!Function.prototype.bind) {
    Function.prototype.bind = function bind(that) { // .length is 1
        var target = this;
        if (typeof target != "function") {
            throw new TypeError("Function.prototype.bind called on incompatible " + target);
        }
        var args = slice.call(arguments, 1); // for normal call
        var bound = function () {

            if (this instanceof bound) {

                var result = target.apply(
                    this,
                    args.concat(slice.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;

            } else {
                return target.apply(
                    that,
                    args.concat(slice.call(arguments))
                );

            }

        };
        if(target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            Empty.prototype = null;
        }
        return bound;
    };
}
var call = Function.prototype.call;
var prototypeOfArray = Array.prototype;
var prototypeOfObject = Object.prototype;
var slice = prototypeOfArray.slice;
var _toString = call.bind(prototypeOfObject.toString);
var owns = call.bind(prototypeOfObject.hasOwnProperty);
var defineGetter;
var defineSetter;
var lookupGetter;
var lookupSetter;
var supportsAccessors;
if ((supportsAccessors = owns(prototypeOfObject, "__defineGetter__"))) {
    defineGetter = call.bind(prototypeOfObject.__defineGetter__);
    defineSetter = call.bind(prototypeOfObject.__defineSetter__);
    lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);
    lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);
}
if ([1,2].splice(0).length != 2) {
    if(function() { // test IE < 9 to splice bug - see issue #138
        function makeArray(l) {
            var a = new Array(l+2);
            a[0] = a[1] = 0;
            return a;
        }
        var array = [], lengthBefore;
        
        array.splice.apply(array, makeArray(20));
        array.splice.apply(array, makeArray(26));

        lengthBefore = array.length; //46
        array.splice(5, 0, "XXX"); // add one element

        lengthBefore + 1 == array.length

        if (lengthBefore + 1 == array.length) {
            return true;// has right splice implementation without bugs
        }
    }()) {//IE 6/7
        var array_splice = Array.prototype.splice;
        Array.prototype.splice = function(start, deleteCount) {
            if (!arguments.length) {
                return [];
            } else {
                return array_splice.apply(this, [
                    start === void 0 ? 0 : start,
                    deleteCount === void 0 ? (this.length - start) : deleteCount
                ].concat(slice.call(arguments, 2)))
            }
        };
    } else {//IE8
        Array.prototype.splice = function(pos, removeCount){
            var length = this.length;
            if (pos > 0) {
                if (pos > length)
                    pos = length;
            } else if (pos == void 0) {
                pos = 0;
            } else if (pos < 0) {
                pos = Math.max(length + pos, 0);
            }

            if (!(pos+removeCount < length))
                removeCount = length - pos;

            var removed = this.slice(pos, pos+removeCount);
            var insert = slice.call(arguments, 2);
            var add = insert.length;            
            if (pos === length) {
                if (add) {
                    this.push.apply(this, insert);
                }
            } else {
                var remove = Math.min(removeCount, length - pos);
                var tailOldPos = pos + remove;
                var tailNewPos = tailOldPos + add - remove;
                var tailCount = length - tailOldPos;
                var lengthAfterRemove = length - remove;

                if (tailNewPos < tailOldPos) { // case A
                    for (var i = 0; i < tailCount; ++i) {
                        this[tailNewPos+i] = this[tailOldPos+i];
                    }
                } else if (tailNewPos > tailOldPos) { // case B
                    for (i = tailCount; i--; ) {
                        this[tailNewPos+i] = this[tailOldPos+i];
                    }
                } // else, add == remove (nothing to do)

                if (add && pos === lengthAfterRemove) {
                    this.length = lengthAfterRemove; // truncate array
                    this.push.apply(this, insert);
                } else {
                    this.length = lengthAfterRemove + add; // reserves space
                    for (i = 0; i < add; ++i) {
                        this[pos+i] = insert[i];
                    }
                }
            }
            return removed;
        };
    }
}
if (!Array.isArray) {
    Array.isArray = function isArray(obj) {
        return _toString(obj) == "[object Array]";
    };
}
var boxedString = Object("a"),
    splitString = boxedString[0] != "a" || !(0 in boxedString);

if (!Array.prototype.forEach) {
    Array.prototype.forEach = function forEach(fun /*, thisp*/) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                object,
            thisp = arguments[1],
            i = -1,
            length = self.length >>> 0;
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(); // TODO message
        }

        while (++i < length) {
            if (i in self) {
                fun.call(thisp, self[i], i, object);
            }
        }
    };
}
if (!Array.prototype.map) {
    Array.prototype.map = function map(fun /*, thisp*/) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                object,
            length = self.length >>> 0,
            result = Array(length),
            thisp = arguments[1];
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(fun + " is not a function");
        }

        for (var i = 0; i < length; i++) {
            if (i in self)
                result[i] = fun.call(thisp, self[i], i, object);
        }
        return result;
    };
}
if (!Array.prototype.filter) {
    Array.prototype.filter = function filter(fun /*, thisp */) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                    object,
            length = self.length >>> 0,
            result = [],
            value,
            thisp = arguments[1];
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(fun + " is not a function");
        }

        for (var i = 0; i < length; i++) {
            if (i in self) {
                value = self[i];
                if (fun.call(thisp, value, i, object)) {
                    result.push(value);
                }
            }
        }
        return result;
    };
}
if (!Array.prototype.every) {
    Array.prototype.every = function every(fun /*, thisp */) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                object,
            length = self.length >>> 0,
            thisp = arguments[1];
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(fun + " is not a function");
        }

        for (var i = 0; i < length; i++) {
            if (i in self && !fun.call(thisp, self[i], i, object)) {
                return false;
            }
        }
        return true;
    };
}
if (!Array.prototype.some) {
    Array.prototype.some = function some(fun /*, thisp */) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                object,
            length = self.length >>> 0,
            thisp = arguments[1];
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(fun + " is not a function");
        }

        for (var i = 0; i < length; i++) {
            if (i in self && fun.call(thisp, self[i], i, object)) {
                return true;
            }
        }
        return false;
    };
}
if (!Array.prototype.reduce) {
    Array.prototype.reduce = function reduce(fun /*, initial*/) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                object,
            length = self.length >>> 0;
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(fun + " is not a function");
        }
        if (!length && arguments.length == 1) {
            throw new TypeError("reduce of empty array with no initial value");
        }

        var i = 0;
        var result;
        if (arguments.length >= 2) {
            result = arguments[1];
        } else {
            do {
                if (i in self) {
                    result = self[i++];
                    break;
                }
                if (++i >= length) {
                    throw new TypeError("reduce of empty array with no initial value");
                }
            } while (true);
        }

        for (; i < length; i++) {
            if (i in self) {
                result = fun.call(void 0, result, self[i], i, object);
            }
        }

        return result;
    };
}
if (!Array.prototype.reduceRight) {
    Array.prototype.reduceRight = function reduceRight(fun /*, initial*/) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                object,
            length = self.length >>> 0;
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(fun + " is not a function");
        }
        if (!length && arguments.length == 1) {
            throw new TypeError("reduceRight of empty array with no initial value");
        }

        var result, i = length - 1;
        if (arguments.length >= 2) {
            result = arguments[1];
        } else {
            do {
                if (i in self) {
                    result = self[i--];
                    break;
                }
                if (--i < 0) {
                    throw new TypeError("reduceRight of empty array with no initial value");
                }
            } while (true);
        }

        do {
            if (i in this) {
                result = fun.call(void 0, result, self[i], i, object);
            }
        } while (i--);

        return result;
    };
}
if (!Array.prototype.indexOf || ([0, 1].indexOf(1, 2) != -1)) {
    Array.prototype.indexOf = function indexOf(sought /*, fromIndex */ ) {
        var self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                toObject(this),
            length = self.length >>> 0;

        if (!length) {
            return -1;
        }

        var i = 0;
        if (arguments.length > 1) {
            i = toInteger(arguments[1]);
        }
        i = i >= 0 ? i : Math.max(0, length + i);
        for (; i < length; i++) {
            if (i in self && self[i] === sought) {
                return i;
            }
        }
        return -1;
    };
}
if (!Array.prototype.lastIndexOf || ([0, 1].lastIndexOf(0, -3) != -1)) {
    Array.prototype.lastIndexOf = function lastIndexOf(sought /*, fromIndex */) {
        var self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                toObject(this),
            length = self.length >>> 0;

        if (!length) {
            return -1;
        }
        var i = length - 1;
        if (arguments.length > 1) {
            i = Math.min(i, toInteger(arguments[1]));
        }
        i = i >= 0 ? i : length - Math.abs(i);
        for (; i >= 0; i--) {
            if (i in self && sought === self[i]) {
                return i;
            }
        }
        return -1;
    };
}
if (!Object.getPrototypeOf) {
    Object.getPrototypeOf = function getPrototypeOf(object) {
        return object.__proto__ || (
            object.constructor ?
            object.constructor.prototype :
            prototypeOfObject
        );
    };
}
if (!Object.getOwnPropertyDescriptor) {
    var ERR_NON_OBJECT = "Object.getOwnPropertyDescriptor called on a " +
                         "non-object: ";
    Object.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
        if ((typeof object != "object" && typeof object != "function") || object === null)
            throw new TypeError(ERR_NON_OBJECT + object);
        if (!owns(object, property))
            return;

        var descriptor, getter, setter;
        descriptor =  { enumerable: true, configurable: true };
        if (supportsAccessors) {
            var prototype = object.__proto__;
            object.__proto__ = prototypeOfObject;

            var getter = lookupGetter(object, property);
            var setter = lookupSetter(object, property);
            object.__proto__ = prototype;

            if (getter || setter) {
                if (getter) descriptor.get = getter;
                if (setter) descriptor.set = setter;
                return descriptor;
            }
        }
        descriptor.value = object[property];
        return descriptor;
    };
}
if (!Object.getOwnPropertyNames) {
    Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
        return Object.keys(object);
    };
}
if (!Object.create) {
    var createEmpty;
    if (Object.prototype.__proto__ === null) {
        createEmpty = function () {
            return { "__proto__": null };
        };
    } else {
        createEmpty = function () {
            var empty = {};
            for (var i in empty)
                empty[i] = null;
            empty.constructor =
            empty.hasOwnProperty =
            empty.propertyIsEnumerable =
            empty.isPrototypeOf =
            empty.toLocaleString =
            empty.toString =
            empty.valueOf =
            empty.__proto__ = null;
            return empty;
        }
    }

    Object.create = function create(prototype, properties) {
        var object;
        if (prototype === null) {
            object = createEmpty();
        } else {
            if (typeof prototype != "object")
                throw new TypeError("typeof prototype["+(typeof prototype)+"] != 'object'");
            var Type = function () {};
            Type.prototype = prototype;
            object = new Type();
            object.__proto__ = prototype;
        }
        if (properties !== void 0)
            Object.defineProperties(object, properties);
        return object;
    };
}

function doesDefinePropertyWork(object) {
    try {
        Object.defineProperty(object, "sentinel", {});
        return "sentinel" in object;
    } catch (exception) {
    }
}
if (Object.defineProperty) {
    var definePropertyWorksOnObject = doesDefinePropertyWork({});
    var definePropertyWorksOnDom = typeof document == "undefined" ||
        doesDefinePropertyWork(document.createElement("div"));
    if (!definePropertyWorksOnObject || !definePropertyWorksOnDom) {
        var definePropertyFallback = Object.defineProperty;
    }
}

if (!Object.defineProperty || definePropertyFallback) {
    var ERR_NON_OBJECT_DESCRIPTOR = "Property description must be an object: ";
    var ERR_NON_OBJECT_TARGET = "Object.defineProperty called on non-object: "
    var ERR_ACCESSORS_NOT_SUPPORTED = "getters & setters can not be defined " +
                                      "on this javascript engine";

    Object.defineProperty = function defineProperty(object, property, descriptor) {
        if ((typeof object != "object" && typeof object != "function") || object === null)
            throw new TypeError(ERR_NON_OBJECT_TARGET + object);
        if ((typeof descriptor != "object" && typeof descriptor != "function") || descriptor === null)
            throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor);
        if (definePropertyFallback) {
            try {
                return definePropertyFallback.call(Object, object, property, descriptor);
            } catch (exception) {
            }
        }
        if (owns(descriptor, "value")) {

            if (supportsAccessors && (lookupGetter(object, property) ||
                                      lookupSetter(object, property)))
            {
                var prototype = object.__proto__;
                object.__proto__ = prototypeOfObject;
                delete object[property];
                object[property] = descriptor.value;
                object.__proto__ = prototype;
            } else {
                object[property] = descriptor.value;
            }
        } else {
            if (!supportsAccessors)
                throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);
            if (owns(descriptor, "get"))
                defineGetter(object, property, descriptor.get);
            if (owns(descriptor, "set"))
                defineSetter(object, property, descriptor.set);
        }

        return object;
    };
}
if (!Object.defineProperties) {
    Object.defineProperties = function defineProperties(object, properties) {
        for (var property in properties) {
            if (owns(properties, property))
                Object.defineProperty(object, property, properties[property]);
        }
        return object;
    };
}
if (!Object.seal) {
    Object.seal = function seal(object) {
        return object;
    };
}
if (!Object.freeze) {
    Object.freeze = function freeze(object) {
        return object;
    };
}
try {
    Object.freeze(function () {});
} catch (exception) {
    Object.freeze = (function freeze(freezeObject) {
        return function freeze(object) {
            if (typeof object == "function") {
                return object;
            } else {
                return freezeObject(object);
            }
        };
    })(Object.freeze);
}
if (!Object.preventExtensions) {
    Object.preventExtensions = function preventExtensions(object) {
        return object;
    };
}
if (!Object.isSealed) {
    Object.isSealed = function isSealed(object) {
        return false;
    };
}
if (!Object.isFrozen) {
    Object.isFrozen = function isFrozen(object) {
        return false;
    };
}
if (!Object.isExtensible) {
    Object.isExtensible = function isExtensible(object) {
        if (Object(object) === object) {
            throw new TypeError(); // TODO message
        }
        var name = '';
        while (owns(object, name)) {
            name += '?';
        }
        object[name] = true;
        var returnValue = owns(object, name);
        delete object[name];
        return returnValue;
    };
}
if (!Object.keys) {
    var hasDontEnumBug = true,
        dontEnums = [
            "toString",
            "toLocaleString",
            "valueOf",
            "hasOwnProperty",
            "isPrototypeOf",
            "propertyIsEnumerable",
            "constructor"
        ],
        dontEnumsLength = dontEnums.length;

    for (var key in {"toString": null}) {
        hasDontEnumBug = false;
    }

    Object.keys = function keys(object) {

        if (
            (typeof object != "object" && typeof object != "function") ||
            object === null
        ) {
            throw new TypeError("Object.keys called on a non-object");
        }

        var keys = [];
        for (var name in object) {
            if (owns(object, name)) {
                keys.push(name);
            }
        }

        if (hasDontEnumBug) {
            for (var i = 0, ii = dontEnumsLength; i < ii; i++) {
                var dontEnum = dontEnums[i];
                if (owns(object, dontEnum)) {
                    keys.push(dontEnum);
                }
            }
        }
        return keys;
    };

}
if (!Date.now) {
    Date.now = function now() {
        return new Date().getTime();
    };
}
var ws = "\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003" +
    "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028" +
    "\u2029\uFEFF";
if (!String.prototype.trim || ws.trim()) {
    ws = "[" + ws + "]";
    var trimBeginRegexp = new RegExp("^" + ws + ws + "*"),
        trimEndRegexp = new RegExp(ws + ws + "*$");
    String.prototype.trim = function trim() {
        return String(this).replace(trimBeginRegexp, "").replace(trimEndRegexp, "");
    };
}

function toInteger(n) {
    n = +n;
    if (n !== n) { // isNaN
        n = 0;
    } else if (n !== 0 && n !== (1/0) && n !== -(1/0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
    }
    return n;
}

function isPrimitive(input) {
    var type = typeof input;
    return (
        input === null ||
        type === "undefined" ||
        type === "boolean" ||
        type === "number" ||
        type === "string"
    );
}

function toPrimitive(input) {
    var val, valueOf, toString;
    if (isPrimitive(input)) {
        return input;
    }
    valueOf = input.valueOf;
    if (typeof valueOf === "function") {
        val = valueOf.call(input);
        if (isPrimitive(val)) {
            return val;
        }
    }
    toString = input.toString;
    if (typeof toString === "function") {
        val = toString.call(input);
        if (isPrimitive(val)) {
            return val;
        }
    }
    throw new TypeError();
}
var toObject = function (o) {
    if (o == null) { // this matches both null and undefined
        throw new TypeError("can't convert "+o+" to object");
    }
    return Object(o);
};

});
