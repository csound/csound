// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "CsoundVstUi.h"

Fl_Button *newButton=(Fl_Button *)0;

Fl_Button *newVersionButton=(Fl_Button *)0;

Fl_Button *openButton=(Fl_Button *)0;

Fl_Button *importButton=(Fl_Button *)0;

Fl_Button *saveButton=(Fl_Button *)0;

Fl_Button *saveAsButton=(Fl_Button *)0;

Fl_Button *performButton=(Fl_Button *)0;

Fl_Button *stopPerformingButton=(Fl_Button *)0;

Fl_Button *editButton=(Fl_Button *)0;

Fl_Button *settingsApplyButton=(Fl_Button *)0;

Fl_Tabs *mainTabs=(Fl_Tabs *)0;

Fl_Group *settingsGroup=(Fl_Group *)0;

Fl_Check_Button *settingsVstPluginModeEffect=(Fl_Check_Button *)0;

Fl_Check_Button *settingsVstPluginModeInstrument=(Fl_Check_Button *)0;

Fl_Input *commandInput=(Fl_Input *)0;

Fl_Input *settingsEditSoundfileInput=(Fl_Input *)0;

Fl_Browser *runtimeMessagesBrowser=(Fl_Browser *)0;

Fl_Group *orchestraGroup=(Fl_Group *)0;

Fl_Text_Editor *orchestraTextEdit=(Fl_Text_Editor *)0;

Fl_Group *scoreGroup=(Fl_Group *)0;

Fl_Text_Editor *scoreTextEdit=(Fl_Text_Editor *)0;

Fl_Group *aboutGroup=(Fl_Group *)0;

Fl_Text_Display *aboutTextDisplay=(Fl_Text_Display *)0;

Fl_Double_Window* make_window(CsoundVstFltk *csoundVstFltk) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(708, 389, "CsoundVST");
    w = o;
    o->color((Fl_Color)48);
    o->labelsize(12);
    o->user_data((void*)(csoundVstFltk));
    o->align(Fl_Align(FL_ALIGN_TEXT_OVER_IMAGE|FL_ALIGN_INSIDE));
    { newButton = new Fl_Button(5, 4, 70, 26, "&New");
      newButton->tooltip("Create a blank orchestra and score");
      newButton->box(FL_GTK_THIN_UP_BOX);
      newButton->shortcut(0x4006e);
      newButton->down_box(FL_THIN_DOWN_BOX);
      newButton->color(FL_LIGHT1);
      newButton->selection_color((Fl_Color)46);
      newButton->labelfont(1);
      newButton->labelsize(12);
      newButton->callback((Fl_Callback*)onNew, (void*)(csoundVstFltk));
      newButton->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Button* newButton
    { newVersionButton = new Fl_Button(75, 4, 70, 26, "&Version");
      newVersionButton->tooltip("Save the current score and orchestra to a new automatically generated filenam\
e");
      newVersionButton->box(FL_GTK_THIN_UP_BOX);
      newVersionButton->shortcut(0x40076);
      newVersionButton->down_box(FL_GTK_THIN_UP_BOX);
      newVersionButton->color(FL_LIGHT1);
      newVersionButton->selection_color((Fl_Color)46);
      newVersionButton->labelfont(1);
      newVersionButton->labelsize(12);
      newVersionButton->callback((Fl_Callback*)onNewVersion, (void*)(csoundVstFltk));
      newVersionButton->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Button* newVersionButton
    { openButton = new Fl_Button(145, 4, 70, 26, "&Open..");
      openButton->tooltip("Open an existing orchestra or score");
      openButton->box(FL_GTK_THIN_UP_BOX);
      openButton->shortcut(0x4006f);
      openButton->down_box(FL_THIN_DOWN_BOX);
      openButton->color(FL_LIGHT1);
      openButton->selection_color((Fl_Color)46);
      openButton->labelfont(1);
      openButton->labelsize(12);
      openButton->callback((Fl_Callback*)onOpen, (void*)(csoundVstFltk));
      openButton->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Button* openButton
    { importButton = new Fl_Button(215, 4, 70, 26, "&Import..");
      importButton->tooltip("Import an existing orchestra or score");
      importButton->box(FL_GTK_THIN_UP_BOX);
      importButton->shortcut(0x40069);
      importButton->down_box(FL_THIN_DOWN_BOX);
      importButton->color(FL_LIGHT1);
      importButton->selection_color((Fl_Color)46);
      importButton->labelfont(1);
      importButton->labelsize(12);
      importButton->callback((Fl_Callback*)onImport, (void*)(csoundVstFltk));
      importButton->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Button* importButton
    { saveButton = new Fl_Button(285, 4, 70, 26, "Sa&ve");
      saveButton->tooltip("Save the current orchestra and score");
      saveButton->box(FL_GTK_THIN_UP_BOX);
      saveButton->shortcut(0x40076);
      saveButton->down_box(FL_THIN_DOWN_BOX);
      saveButton->color(FL_LIGHT1);
      saveButton->selection_color((Fl_Color)46);
      saveButton->labelfont(1);
      saveButton->labelsize(12);
      saveButton->callback((Fl_Callback*)onSave, (void*)(csoundVstFltk));
      saveButton->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Button* saveButton
    { saveAsButton = new Fl_Button(355, 4, 70, 26, "Save &as..");
      saveAsButton->tooltip("Save current orchestra or score to a new filename");
      saveAsButton->box(FL_GTK_THIN_UP_BOX);
      saveAsButton->shortcut(0x40061);
      saveAsButton->down_box(FL_THIN_DOWN_BOX);
      saveAsButton->color(FL_LIGHT1);
      saveAsButton->selection_color((Fl_Color)46);
      saveAsButton->labelfont(1);
      saveAsButton->labelsize(12);
      saveAsButton->callback((Fl_Callback*)onSaveAs, (void*)(csoundVstFltk));
      saveAsButton->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Button* saveAsButton
    { performButton = new Fl_Button(425, 4, 70, 26, "&Perform");
      performButton->tooltip("Perform the current orchestra and score");
      performButton->box(FL_THIN_UP_BOX);
      performButton->shortcut(0x40070);
      performButton->down_box(FL_GTK_THIN_UP_BOX);
      performButton->color(FL_LIGHT1);
      performButton->selection_color((Fl_Color)46);
      performButton->labelfont(1);
      performButton->labelsize(12);
      performButton->callback((Fl_Callback*)onPerform, (void*)(csoundVstFltk));
      performButton->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Button* performButton
    { stopPerformingButton = new Fl_Button(495, 4, 70, 26, "&Stop");
      stopPerformingButton->tooltip("Stop performing");
      stopPerformingButton->box(FL_GTK_THIN_UP_BOX);
      stopPerformingButton->shortcut(0x40073);
      stopPerformingButton->down_box(FL_GTK_THIN_UP_BOX);
      stopPerformingButton->color(FL_LIGHT1);
      stopPerformingButton->selection_color((Fl_Color)46);
      stopPerformingButton->labelfont(1);
      stopPerformingButton->labelsize(12);
      stopPerformingButton->callback((Fl_Callback*)onStop, (void*)(csoundVstFltk));
      stopPerformingButton->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Button* stopPerformingButton
    { editButton = new Fl_Button(565, 4, 70, 26, "&Edit");
      editButton->tooltip("Open the output soundfile");
      editButton->box(FL_GTK_THIN_UP_BOX);
      editButton->shortcut(0x40065);
      editButton->down_box(FL_THIN_DOWN_BOX);
      editButton->color(FL_LIGHT1);
      editButton->selection_color((Fl_Color)46);
      editButton->labelfont(1);
      editButton->labelsize(12);
      editButton->callback((Fl_Callback*)onEdit, (void*)(csoundVstFltk));
      editButton->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Button* editButton
    { settingsApplyButton = new Fl_Button(635, 4, 70, 26, "Appl&y");
      settingsApplyButton->tooltip("Save settings to disk");
      settingsApplyButton->box(FL_GTK_THIN_UP_BOX);
      settingsApplyButton->shortcut(0x40079);
      settingsApplyButton->down_box(FL_THIN_DOWN_BOX);
      settingsApplyButton->color(FL_LIGHT1);
      settingsApplyButton->selection_color((Fl_Color)46);
      settingsApplyButton->labelfont(1);
      settingsApplyButton->labelsize(12);
      settingsApplyButton->callback((Fl_Callback*)onSettingsApply, (void*)(csoundVstFltk));
      settingsApplyButton->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Button* settingsApplyButton
    { mainTabs = new Fl_Tabs(5, 34, 700, 351);
      mainTabs->box(FL_GTK_THIN_UP_BOX);
      mainTabs->color(FL_LIGHT1);
      mainTabs->labelsize(10);
      { settingsGroup = new Fl_Group(5, 59, 700, 325, "Settings");
        settingsGroup->box(FL_GTK_THIN_UP_BOX);
        settingsGroup->color(FL_LIGHT1);
        settingsGroup->selection_color(FL_DARK1);
        settingsGroup->labelfont(1);
        settingsGroup->labelsize(12);
        { settingsVstPluginModeEffect = new Fl_Check_Button(555, 114, 55, 22, "VST Effect");
          settingsVstPluginModeEffect->tooltip("Plugin is a VST effect");
          settingsVstPluginModeEffect->type(102);
          settingsVstPluginModeEffect->down_box(FL_GTK_THIN_DOWN_BOX);
          settingsVstPluginModeEffect->selection_color((Fl_Color)42);
          settingsVstPluginModeEffect->labelsize(12);
          settingsVstPluginModeEffect->callback((Fl_Callback*)onSettingsVstPluginMode, (void*)(csoundVstFltk));
          settingsVstPluginModeEffect->when(FL_WHEN_CHANGED);
        } // Fl_Check_Button* settingsVstPluginModeEffect
        { settingsVstPluginModeInstrument = new Fl_Check_Button(450, 114, 83, 22, "VST Instrument");
          settingsVstPluginModeInstrument->tooltip("Plugin is a VST instrument");
          settingsVstPluginModeInstrument->type(102);
          settingsVstPluginModeInstrument->down_box(FL_GTK_THIN_DOWN_BOX);
          settingsVstPluginModeInstrument->selection_color((Fl_Color)42);
          settingsVstPluginModeInstrument->labelsize(12);
          settingsVstPluginModeInstrument->callback((Fl_Callback*)onSettingsVstInstrumentMode, (void*)(csoundVstFltk));
          settingsVstPluginModeInstrument->when(FL_WHEN_CHANGED);
        } // Fl_Check_Button* settingsVstPluginModeInstrument
        { commandInput = new Fl_Input(100, 67, 535, 40, "Command line");
          commandInput->tooltip("Csound command line");
          commandInput->type(4);
          commandInput->box(FL_GTK_THIN_DOWN_BOX);
          commandInput->selection_color((Fl_Color)46);
          commandInput->labelsize(12);
          commandInput->textfont(4);
          commandInput->textsize(11);
        } // Fl_Input* commandInput
        { settingsEditSoundfileInput = new Fl_Input(100, 114, 345, 22, "Soundfile editor");
          settingsEditSoundfileInput->tooltip("Program to be used for editing soundfiles");
          settingsEditSoundfileInput->box(FL_GTK_THIN_DOWN_BOX);
          settingsEditSoundfileInput->selection_color((Fl_Color)46);
          settingsEditSoundfileInput->labelsize(12);
          settingsEditSoundfileInput->textfont(4);
          settingsEditSoundfileInput->textsize(11);
        } // Fl_Input* settingsEditSoundfileInput
        { runtimeMessagesBrowser = new Fl_Browser(10, 144, 690, 231);
          runtimeMessagesBrowser->box(FL_GTK_THIN_DOWN_BOX);
          runtimeMessagesBrowser->labelsize(12);
          runtimeMessagesBrowser->textfont(4);
          runtimeMessagesBrowser->textsize(11);
          Fl_Group::current()->resizable(runtimeMessagesBrowser);
        } // Fl_Browser* runtimeMessagesBrowser
        { Fl_Group* o = new Fl_Group(640, 67, 59, 68);
          o->box(FL_GTK_THIN_DOWN_BOX);
          o->labelsize(12);
          o->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
          o->end();
        } // Fl_Group* o
        settingsGroup->end();
        Fl_Group::current()->resizable(settingsGroup);
      } // Fl_Group* settingsGroup
      { orchestraGroup = new Fl_Group(5, 59, 700, 325, "Orchestra");
        orchestraGroup->box(FL_GTK_THIN_UP_BOX);
        orchestraGroup->color(FL_LIGHT1);
        orchestraGroup->selection_color(FL_DARK1);
        orchestraGroup->labelfont(1);
        orchestraGroup->labelsize(12);
        orchestraGroup->hide();
        { orchestraTextEdit = new Fl_Text_Editor(10, 65, 690, 312);
          orchestraTextEdit->box(FL_GTK_THIN_DOWN_BOX);
          orchestraTextEdit->labelsize(12);
          orchestraTextEdit->textfont(4);
          orchestraTextEdit->textsize(11);
          Fl_Group::current()->resizable(orchestraTextEdit);
        } // Fl_Text_Editor* orchestraTextEdit
        orchestraGroup->end();
      } // Fl_Group* orchestraGroup
      { scoreGroup = new Fl_Group(5, 59, 700, 325, "Score");
        scoreGroup->box(FL_GTK_THIN_UP_BOX);
        scoreGroup->color(FL_LIGHT1);
        scoreGroup->selection_color(FL_DARK1);
        scoreGroup->labelfont(1);
        scoreGroup->labelsize(12);
        scoreGroup->hide();
        { scoreTextEdit = new Fl_Text_Editor(10, 65, 690, 312);
          scoreTextEdit->box(FL_GTK_THIN_DOWN_BOX);
          scoreTextEdit->labelsize(12);
          scoreTextEdit->textfont(4);
          scoreTextEdit->textsize(11);
          Fl_Group::current()->resizable(scoreTextEdit);
        } // Fl_Text_Editor* scoreTextEdit
        scoreGroup->end();
      } // Fl_Group* scoreGroup
      { aboutGroup = new Fl_Group(5, 59, 700, 325, "About");
        aboutGroup->box(FL_GTK_THIN_UP_BOX);
        aboutGroup->color(FL_LIGHT1);
        aboutGroup->selection_color(FL_DARK1);
        aboutGroup->labelfont(1);
        aboutGroup->labelsize(12);
        aboutGroup->hide();
        { aboutTextDisplay = new Fl_Text_Display(10, 65, 690, 312);
          aboutTextDisplay->box(FL_GTK_THIN_DOWN_BOX);
          aboutTextDisplay->color(FL_LIGHT3);
          aboutTextDisplay->labelsize(12);
          aboutTextDisplay->textfont(4);
          aboutTextDisplay->textsize(11);
          aboutTextDisplay->align(Fl_Align(FL_ALIGN_CENTER));
          Fl_Group::current()->resizable(aboutTextDisplay);
        } // Fl_Text_Display* aboutTextDisplay
        aboutGroup->end();
      } // Fl_Group* aboutGroup
      mainTabs->end();
      Fl_Group::current()->resizable(mainTabs);
    } // Fl_Tabs* mainTabs
    o->end();
  } // Fl_Double_Window* o
  return w;
}
